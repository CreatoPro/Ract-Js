{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n/**\n * Open DisplayOptions Format Parser\n * @class\n * @param {document} displayOptionsDocument XML\n */\n\n\nclass DisplayOptions {\n  constructor(displayOptionsDocument) {\n    this.interactive = \"\";\n    this.fixedLayout = \"\";\n    this.openToSpread = \"\";\n    this.orientationLock = \"\";\n\n    if (displayOptionsDocument) {\n      this.parse(displayOptionsDocument);\n    }\n  }\n  /**\n   * Parse XML\n   * @param  {document} displayOptionsDocument XML\n   * @return {DisplayOptions} self\n   */\n\n\n  parse(displayOptionsDocument) {\n    if (!displayOptionsDocument) {\n      return this;\n    }\n\n    const displayOptionsNode = (0, _core.qs)(displayOptionsDocument, \"display_options\");\n\n    if (!displayOptionsNode) {\n      return this;\n    }\n\n    const options = (0, _core.qsa)(displayOptionsNode, \"option\");\n    options.forEach(el => {\n      let value = \"\";\n\n      if (el.childNodes.length) {\n        value = el.childNodes[0].nodeValue;\n      }\n\n      switch (el.attributes.name.value) {\n        case \"interactive\":\n          this.interactive = value;\n          break;\n\n        case \"fixed-layout\":\n          this.fixedLayout = value;\n          break;\n\n        case \"open-to-spread\":\n          this.openToSpread = value;\n          break;\n\n        case \"orientation-lock\":\n          this.orientationLock = value;\n          break;\n      }\n    });\n    return this;\n  }\n\n  destroy() {\n    this.interactive = undefined;\n    this.fixedLayout = undefined;\n    this.openToSpread = undefined;\n    this.orientationLock = undefined;\n  }\n\n}\n\nvar _default = DisplayOptions;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/displayoptions.js"],"names":["Object","defineProperty","exports","value","default","_core","require","DisplayOptions","constructor","displayOptionsDocument","interactive","fixedLayout","openToSpread","orientationLock","parse","displayOptionsNode","qs","options","qsa","forEach","el","childNodes","length","nodeValue","attributes","name","destroy","undefined","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,sBAAD,EAAyB;AAClC,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AAEA,QAAIJ,sBAAJ,EAA4B;AAC1B,WAAKK,KAAL,CAAWL,sBAAX;AACD;AACF;AACD;AACF;AACA;AACA;AACA;;;AAGEK,EAAAA,KAAK,CAACL,sBAAD,EAAyB;AAC5B,QAAI,CAACA,sBAAL,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,UAAMM,kBAAkB,GAAG,CAAC,GAAGV,KAAK,CAACW,EAAV,EAAcP,sBAAd,EAAsC,iBAAtC,CAA3B;;AAEA,QAAI,CAACM,kBAAL,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,UAAME,OAAO,GAAG,CAAC,GAAGZ,KAAK,CAACa,GAAV,EAAeH,kBAAf,EAAmC,QAAnC,CAAhB;AACAE,IAAAA,OAAO,CAACE,OAAR,CAAgBC,EAAE,IAAI;AACpB,UAAIjB,KAAK,GAAG,EAAZ;;AAEA,UAAIiB,EAAE,CAACC,UAAH,CAAcC,MAAlB,EAA0B;AACxBnB,QAAAA,KAAK,GAAGiB,EAAE,CAACC,UAAH,CAAc,CAAd,EAAiBE,SAAzB;AACD;;AAED,cAAQH,EAAE,CAACI,UAAH,CAAcC,IAAd,CAAmBtB,KAA3B;AACE,aAAK,aAAL;AACE,eAAKO,WAAL,GAAmBP,KAAnB;AACA;;AAEF,aAAK,cAAL;AACE,eAAKQ,WAAL,GAAmBR,KAAnB;AACA;;AAEF,aAAK,gBAAL;AACE,eAAKS,YAAL,GAAoBT,KAApB;AACA;;AAEF,aAAK,kBAAL;AACE,eAAKU,eAAL,GAAuBV,KAAvB;AACA;AAfJ;AAiBD,KAxBD;AAyBA,WAAO,IAAP;AACD;;AAEDuB,EAAAA,OAAO,GAAG;AACR,SAAKhB,WAAL,GAAmBiB,SAAnB;AACA,SAAKhB,WAAL,GAAmBgB,SAAnB;AACA,SAAKf,YAAL,GAAoBe,SAApB;AACA,SAAKd,eAAL,GAAuBc,SAAvB;AACD;;AA/DkB;;AAmErB,IAAIC,QAAQ,GAAGrB,cAAf;AACAL,OAAO,CAACE,OAAR,GAAkBwB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n\n/**\n * Open DisplayOptions Format Parser\n * @class\n * @param {document} displayOptionsDocument XML\n */\nclass DisplayOptions {\n  constructor(displayOptionsDocument) {\n    this.interactive = \"\";\n    this.fixedLayout = \"\";\n    this.openToSpread = \"\";\n    this.orientationLock = \"\";\n\n    if (displayOptionsDocument) {\n      this.parse(displayOptionsDocument);\n    }\n  }\n  /**\n   * Parse XML\n   * @param  {document} displayOptionsDocument XML\n   * @return {DisplayOptions} self\n   */\n\n\n  parse(displayOptionsDocument) {\n    if (!displayOptionsDocument) {\n      return this;\n    }\n\n    const displayOptionsNode = (0, _core.qs)(displayOptionsDocument, \"display_options\");\n\n    if (!displayOptionsNode) {\n      return this;\n    }\n\n    const options = (0, _core.qsa)(displayOptionsNode, \"option\");\n    options.forEach(el => {\n      let value = \"\";\n\n      if (el.childNodes.length) {\n        value = el.childNodes[0].nodeValue;\n      }\n\n      switch (el.attributes.name.value) {\n        case \"interactive\":\n          this.interactive = value;\n          break;\n\n        case \"fixed-layout\":\n          this.fixedLayout = value;\n          break;\n\n        case \"open-to-spread\":\n          this.openToSpread = value;\n          break;\n\n        case \"orientation-lock\":\n          this.orientationLock = value;\n          break;\n      }\n    });\n    return this;\n  }\n\n  destroy() {\n    this.interactive = undefined;\n    this.fixedLayout = undefined;\n    this.openToSpread = undefined;\n    this.orientationLock = undefined;\n  }\n\n}\n\nvar _default = DisplayOptions;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
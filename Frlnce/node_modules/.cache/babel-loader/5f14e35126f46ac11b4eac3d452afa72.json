{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport Utils from \"./_helpers/utils\";\nimport ApiService from \"./_services/ApiService\";\nexport const initializeFirebase = () => {\n  //console.log(\"In push-notification.js; initializeFirebase()...\");\n  const config = {\n    apiKey: \"AIzaSyBPJztL4oJRKJhOa6ibGXWEvtzXD1rsC7M\",\n    projectId: \"fresh-yen-802\",\n    messagingSenderId: \"999041119542\",\n    appId: \"1:999041119542:web:ff82d43596b1393583af97\"\n  };\n  firebase.initializeApp(config);\n};\nexport const askForPermissionToReceiveNotifications = async () => {\n  //alert(\"IN askForPermissionToReceiveNotifications...\");\n  //console.log(\"In push-notification.js; askForPermissionToReceiveNotifications()...\");\n  try {\n    const messaging = firebase.messaging();\n    await messaging.requestPermission();\n    const token = await messaging.getToken(); //console.log(\"token : \", token);\n\n    localStorage.setItem(\"notification-token\", token); //alert(\"IN askForPermissionToReceiveNotifications >> Token :\"+token);\n    //console.log(\"In push-notification.js; askForPermissionToReceiveNotifications() >> Token :\"+token);\n\n    return token;\n  } catch (error) {\n    //alert(\"IN askForPermissionToReceiveNotifications >> Error :\"+error);\n    console.log(\"In push-notification.js; askForPermissionToReceiveNotifications() >> Error :\" + error);\n    console.error(error);\n  }\n};\nexport const saveNotification = notificationData => {\n  //console.log(\"In push-notification.js; savePushNotification()...\"+JSON.stringify(notificationData));\n  let notificationDate = Utils.formatStringDateWithTime(new Date());\n  notificationData.receivedDate = notificationDate;\n  notificationData.status = 0; //0: UnRead ; 1: Read\n\n  let notificationMsgs = localStorage.getItem('ilearn-notifications');\n  let notificationJSONArray = [];\n\n  if (notificationMsgs) {\n    notificationJSONArray = JSON.parse(notificationMsgs);\n  }\n\n  notificationJSONArray.push(notificationData);\n  localStorage.setItem('ilearn-notifications', JSON.stringify(notificationJSONArray));\n};\nexport const getUnReadNotificationCount = () => {\n  //console.log(\"In push-notification.js; getUnReadNotificationCount()...\");\n  let notificationCount = 0;\n  let notificationMsgs = localStorage.getItem('ilearn-notifications');\n  let notificationJSONArray = [];\n\n  if (notificationMsgs) {\n    notificationJSONArray = JSON.parse(notificationMsgs);\n  }\n\n  notificationJSONArray.forEach(notification => {\n    if (notification.status == 0) {\n      notificationCount++;\n    }\n  });\n  return notificationCount;\n};\nexport const markNotificationsAsRead = () => {\n  //console.log(\"In push-notification.js; markNotificationsAsRead()... \");\n  let notificationMsgs = localStorage.getItem('ilearn-notifications');\n  let notificationJSONArray = [];\n  let readNotificationJSONArray = [];\n\n  if (notificationMsgs) {\n    notificationJSONArray = JSON.parse(notificationMsgs);\n  }\n\n  notificationJSONArray.forEach(notification => {\n    notification.status = 1;\n    readNotificationJSONArray.push(notification);\n  });\n  localStorage.setItem('ilearn-notifications', JSON.stringify(readNotificationJSONArray));\n};\nexport const checkNewNotificationsOnServer = async () => {\n  //console.log(\"In push-notification.js; checkNewNotificationsOnServer()... \");\n  ApiService.getNotificationMessages().then(res => {\n    let newNotifications = res.data.data; //console.log(\"In push-notification.js; checkNewNotificationsOnServer(); res : \"+JSON.stringify(newNotifications));\n\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\n    let notifications = notificationMsgs ? JSON.parse(notificationMsgs) : [];\n    let _notifications = notifications;\n    newNotifications.forEach(newNotification => {\n      let isAlreadyExists = false;\n      notifications = _notifications; //console.log(\"New NotificationId : \"+newNotification.messageId);\n\n      notifications.forEach(existingNotification => {\n        //console.log(\"Existing NotificationId : \"+existingNotification.messageId+\"===\"+newNotification.messageId+\"<<>>\"+existingNotification.messageId===newNotification.messageId);\n        if (existingNotification.message === newNotification.message) {\n          isAlreadyExists = true;\n        }\n      });\n\n      if (!isAlreadyExists) {\n        newNotification.status = 0;\n        newNotification.receivedDate = newNotification.sendDate;\n\n        _notifications.push(newNotification);\n      }\n    });\n    localStorage.setItem('ilearn-notifications', JSON.stringify(_notifications));\n  }, error => {//ErrorCB\n    //console.log(\"In push-notification.js; Connection Error...\");\n  });\n};","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/push-notification.js"],"names":["firebase","Utils","ApiService","initializeFirebase","config","apiKey","projectId","messagingSenderId","appId","initializeApp","askForPermissionToReceiveNotifications","messaging","requestPermission","token","getToken","localStorage","setItem","error","console","log","saveNotification","notificationData","notificationDate","formatStringDateWithTime","Date","receivedDate","status","notificationMsgs","getItem","notificationJSONArray","JSON","parse","push","stringify","getUnReadNotificationCount","notificationCount","forEach","notification","markNotificationsAsRead","readNotificationJSONArray","checkNewNotificationsOnServer","getNotificationMessages","then","res","newNotifications","data","notifications","_notifications","newNotification","isAlreadyExists","existingNotification","message","sendDate"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/messaging\";\r\nimport Utils from \"./_helpers/utils\";\r\nimport ApiService from \"./_services/ApiService\";\r\n\r\nexport const initializeFirebase = () => {\r\n    //console.log(\"In push-notification.js; initializeFirebase()...\");\r\n    const config = {\r\n            apiKey: \"AIzaSyBPJztL4oJRKJhOa6ibGXWEvtzXD1rsC7M\",\r\n            projectId: \"fresh-yen-802\",\r\n            messagingSenderId: \"999041119542\",\r\n            appId: \"1:999041119542:web:ff82d43596b1393583af97\"\r\n    };\r\n\r\n    firebase.initializeApp(config);\r\n}\r\n\r\nexport const askForPermissionToReceiveNotifications = async () => {\r\n    //alert(\"IN askForPermissionToReceiveNotifications...\");\r\n    //console.log(\"In push-notification.js; askForPermissionToReceiveNotifications()...\");\r\n    try {\r\n        const messaging = firebase.messaging();\r\n        await messaging.requestPermission();\r\n        const token = await messaging.getToken();\r\n        //console.log(\"token : \", token);\r\n        localStorage.setItem(\"notification-token\", token);\r\n        //alert(\"IN askForPermissionToReceiveNotifications >> Token :\"+token);\r\n        //console.log(\"In push-notification.js; askForPermissionToReceiveNotifications() >> Token :\"+token);\r\n        return token\r\n        \r\n    } catch (error) {\r\n        //alert(\"IN askForPermissionToReceiveNotifications >> Error :\"+error);\r\n        console.log(\"In push-notification.js; askForPermissionToReceiveNotifications() >> Error :\"+error);\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport const saveNotification = (notificationData) =>{\r\n    //console.log(\"In push-notification.js; savePushNotification()...\"+JSON.stringify(notificationData));\r\n    let notificationDate = Utils.formatStringDateWithTime(new Date());\r\n    notificationData.receivedDate = notificationDate;\r\n    notificationData.status = 0; //0: UnRead ; 1: Read\r\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\r\n    let notificationJSONArray = [];\r\n    if(notificationMsgs) {\r\n        notificationJSONArray = JSON.parse(notificationMsgs);    \r\n    }\r\n    notificationJSONArray.push(notificationData)\r\n    localStorage.setItem('ilearn-notifications', JSON.stringify(notificationJSONArray));\r\n}\r\n\r\nexport const getUnReadNotificationCount = () =>{\r\n    //console.log(\"In push-notification.js; getUnReadNotificationCount()...\");\r\n    let notificationCount = 0;\r\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\r\n    let notificationJSONArray = [];\r\n    if(notificationMsgs) {\r\n        notificationJSONArray = JSON.parse(notificationMsgs);    \r\n    }\r\n    notificationJSONArray.forEach((notification) => {\r\n        if(notification.status == 0) {\r\n            notificationCount++;\r\n        }\r\n    });\r\n    return notificationCount;\r\n}\r\n\r\nexport const markNotificationsAsRead = () =>{\r\n    //console.log(\"In push-notification.js; markNotificationsAsRead()... \");\r\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\r\n    let notificationJSONArray = [];\r\n    let readNotificationJSONArray = [];\r\n    if(notificationMsgs) {\r\n        notificationJSONArray = JSON.parse(notificationMsgs);    \r\n    }\r\n    notificationJSONArray.forEach((notification) => {\r\n      notification.status = 1;\r\n      readNotificationJSONArray.push(notification);\r\n    });\r\n    localStorage.setItem('ilearn-notifications', JSON.stringify(readNotificationJSONArray));\r\n}\r\n\r\nexport const checkNewNotificationsOnServer = async () =>{\r\n    //console.log(\"In push-notification.js; checkNewNotificationsOnServer()... \");\r\n    ApiService.getNotificationMessages()\r\n    .then((res) => {\r\n      let newNotifications = res.data.data;\r\n      //console.log(\"In push-notification.js; checkNewNotificationsOnServer(); res : \"+JSON.stringify(newNotifications));\r\n      let notificationMsgs = localStorage.getItem('ilearn-notifications');\r\n      let notifications =  notificationMsgs?JSON.parse(notificationMsgs):[];\r\n      let _notifications = notifications;\r\n      newNotifications.forEach(newNotification => {\r\n        let isAlreadyExists = false;\r\n        notifications = _notifications;\r\n        //console.log(\"New NotificationId : \"+newNotification.messageId);\r\n        notifications.forEach(existingNotification => {\r\n            //console.log(\"Existing NotificationId : \"+existingNotification.messageId+\"===\"+newNotification.messageId+\"<<>>\"+existingNotification.messageId===newNotification.messageId);\r\n            if(existingNotification.message===newNotification.message) {\r\n                isAlreadyExists = true;\r\n            }  \r\n        }); \r\n        if(!isAlreadyExists) {\r\n            newNotification.status = 0;\r\n            newNotification.receivedDate = newNotification.sendDate;\r\n            _notifications.push(newNotification);\r\n        }\r\n      });\r\n      localStorage.setItem('ilearn-notifications', JSON.stringify(_notifications));\r\n    },\r\n    error => { //ErrorCB\r\n      //console.log(\"In push-notification.js; Connection Error...\");\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\test\\\\TestUploadDetails.js\";\nimport React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport ApiService from \"../../_services/ApiService\";\nimport Loader from './../../_components/loader/loader';\nimport Parser from 'html-react-parser';\nimport dateFormat from 'dateformat';\n\nclass TestUploadDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileChange = event => {\n      // Update the state \n      var File = event.target.files[0];\n      this.setState({\n        selectedFile: File\n      });\n\n      if (!File) {\n        this.setState({\n          invalidImage: 'Please Upload your handwritten PDF File.'\n        });\n        return false;\n      }\n\n      if (!File.name.match(/\\.(pdf|PDF)$/)) {\n        this.setState({\n          invalidImage: 'Please select PDF File.'\n        });\n        return false;\n      } else {\n        this.setState({\n          invalidImage: ''\n        });\n      }\n    };\n\n    this.onFileUpload = () => {\n      // Create an object of formData \n      const formData = new FormData(); // Update the formData object \n\n      if (this.state.selectedFile) {\n        let portlet = JSON.parse(localStorage.getItem('portlet')) || []; //var compltedDate = this.props.location.state.testEndTime;\n\n        var compltedDate = \"\";\n        var now = new Date();\n        var submitDateBefore = dateFormat(now, \"yyyy-mm-dd 23:59:59\");\n        ;\n\n        if (compltedDate) {\n          var d = new Date(compltedDate);\n          var minutes = portlet.params.secondsActiveAfterExamSubmit / 60;\n          var newtime = d.setMinutes(d.getMinutes() + minutes);\n          submitDateBefore = dateFormat(newtime, \"yyyy-mm-dd HH:MM:ss\"); //submitDateBefore = \"2020-09-30 23:00:00\";\n        }\n\n        formData.append('dateBefore', submitDateBefore);\n        formData.append(\"answersheetFile\", this.state.selectedFile, this.state.selectedFile.name);\n        var testId = this.props.match.params.id;\n        this.setState({\n          loading: true\n        }, () => {\n          ApiService.uploadFile(formData, testId).then(res => {\n            this.setState({\n              loading: false\n            });\n\n            if (res.data.type == \"error\") {\n              this.setState({\n                invalidImage: res.data.message\n              });\n            } else if (res.data.type == \"timeout\") {\n              this.setState({\n                invalidImage: portlet.params.TimeoutMessage\n              });\n            } else {\n              this.props.history.push({\n                pathname: '/test/pdfview/' + testId,\n                state: {\n                  pdfpreview: res.data.url,\n                  testEndTime: compltedDate\n                }\n              });\n\n              if (res.data.url) {\n                this.props.history.push({\n                  pathname: '/test/pdfview/' + testId,\n                  state: {\n                    pdfpreview: res.data.url,\n                    testEndTime: compltedDate\n                  }\n                });\n              } else {//this.props.history.push({ pathname: '/test/pdfview/'+testId, state: { pdfpreview: \"https://tuningfork-live.s3.amazonaws.com/triangles/uploads/study_resource/25-11-19/12/Algebra.pdf\", testEndTime: compltedDate} });\n              }\n            }\n          }).catch(err => {\n            console.log(err);\n            this.setState({\n              invalidImage: err\n            });\n          });\n        }); // Details of the uploaded file \n\n        console.log(this.state.selectedFile);\n      } else {\n        this.setState({\n          invalidImage: 'Please Upload your handwritten PDF File.'\n        });\n      }\n    };\n\n    this.state = {\n      message: null,\n      loading: false,\n      result: 0,\n      selectedFile: null,\n      invalidImage: \"\",\n      submitDateBefore: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  routeChange(path) {\n    this.props.history.push(path);\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    let portlet = JSON.parse(localStorage.getItem('portlet')) || [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"learn-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `module-header-step2 AnalysisReport ${portlet.class ? portlet.class : 'orange-card'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }\n    }, \"Test Uploads\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testResult testFileupload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \"Upload PDF\"), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"help-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"Please Scan your handwritten notes into a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 81\n      }\n    }, \"single\"), \" PDF and upload it here.\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"custom-file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      class: \"custom-file-input\",\n      id: \"customFile\",\n      name: \"answersheetFile\",\n      onChange: this.onFileChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      class: \"custom-file-label\",\n      for: \"customFile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }\n    }, this.state.selectedFile ? this.state.selectedFile.name : 'Choose file', \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, this.state.invalidImage), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      class: \"btn btn-primary full-width\",\n      onClick: this.onFileUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, \"Upload File\"))), loading ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }) : \"\"));\n  }\n\n}\n\nexport default TestUploadDetails;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/test/TestUploadDetails.js"],"names":["React","Component","Container","FontAwesomeIcon","faArrowLeft","ApiService","Loader","Parser","dateFormat","TestUploadDetails","constructor","props","onFileChange","event","File","target","files","setState","selectedFile","invalidImage","name","match","onFileUpload","formData","FormData","state","portlet","JSON","parse","localStorage","getItem","compltedDate","now","Date","submitDateBefore","d","minutes","params","secondsActiveAfterExamSubmit","newtime","setMinutes","getMinutes","append","testId","id","loading","uploadFile","then","res","data","type","message","TimeoutMessage","history","push","pathname","pdfpreview","url","testEndTime","catch","err","console","log","result","componentDidMount","routeChange","path","render","class"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport ApiService from \"../../_services/ApiService\";\r\nimport Loader from './../../_components/loader/loader';\r\nimport Parser from 'html-react-parser';\r\nimport dateFormat from 'dateformat';\r\n\r\nclass TestUploadDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: null,\r\n      loading: false,\r\n      result: 0,\r\n      selectedFile: null,\r\n      invalidImage:\"\",\r\n      submitDateBefore:\"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  onFileChange = event => {  \r\n    // Update the state \r\n    var File = event.target.files[0];\r\n    this.setState({ selectedFile: File });\r\n    if (!File) {\r\n      this.setState({ invalidImage: 'Please Upload your handwritten PDF File.' });\r\n      return false;\r\n    }\r\n   \r\n    if (!File.name.match(/\\.(pdf|PDF)$/)) {\r\n      this.setState({ invalidImage: 'Please select PDF File.' });\r\n      return false;\r\n    }else{\r\n      this.setState({ invalidImage: '' });\r\n    }\r\n\r\n  };\r\n\r\n  onFileUpload = () => { \r\n    // Create an object of formData \r\n    const formData = new FormData(); \r\n    // Update the formData object \r\n    if(this.state.selectedFile){\r\n      let portlet = JSON.parse(localStorage.getItem('portlet')) || [];\r\n      //var compltedDate = this.props.location.state.testEndTime;\r\n      var compltedDate = \"\";\r\n      var now = new Date();\r\n      var submitDateBefore =dateFormat(now, \"yyyy-mm-dd 23:59:59\");;\r\n      if(compltedDate){\r\n        var d = new Date(compltedDate);\r\n        var minutes = portlet.params.secondsActiveAfterExamSubmit/60;\r\n        var newtime = d.setMinutes ( d.getMinutes() + minutes );\r\n        submitDateBefore = dateFormat(newtime, \"yyyy-mm-dd HH:MM:ss\");\r\n        //submitDateBefore = \"2020-09-30 23:00:00\";\r\n      }\r\n      formData.append('dateBefore', submitDateBefore);\r\n      formData.append( \r\n        \"answersheetFile\", \r\n        this.state.selectedFile, \r\n        this.state.selectedFile.name,    \r\n      );\r\n      var testId = this.props.match.params.id;\r\n      this.setState({ loading: true }, () => {\r\n        ApiService.uploadFile(formData,testId)\r\n        .then((res) => {\r\n            this.setState({\r\n              loading: false,\r\n            });\r\n            if(res.data.type==\"error\"){\r\n              this.setState({ invalidImage: res.data.message });\r\n            }else if(res.data.type==\"timeout\"){\r\n              this.setState({ invalidImage: portlet.params.TimeoutMessage });\r\n            }else{\r\n              this.props.history.push({ pathname: '/test/pdfview/'+testId, state: { pdfpreview: res.data.url, testEndTime: compltedDate} });\r\n              if(res.data.url){\r\n                this.props.history.push({ pathname: '/test/pdfview/'+testId, state: { pdfpreview: res.data.url, testEndTime: compltedDate} });\r\n              }else{\r\n                //this.props.history.push({ pathname: '/test/pdfview/'+testId, state: { pdfpreview: \"https://tuningfork-live.s3.amazonaws.com/triangles/uploads/study_resource/25-11-19/12/Algebra.pdf\", testEndTime: compltedDate} });\r\n              }\r\n              \r\n            }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({ invalidImage: err });\r\n        });\r\n      });\r\n\r\n       // Details of the uploaded file \r\n       console.log(this.state.selectedFile);        \r\n  \r\n    }else{\r\n      this.setState({ invalidImage: 'Please Upload your handwritten PDF File.' });\r\n    }\r\n    \r\n  }; \r\n\r\n  routeChange(path) {\r\n    this.props.history.push(path);\r\n  }\r\n\r\n  render() {\r\n    const { loading } = this.state;\r\n    let portlet = JSON.parse(localStorage.getItem('portlet')) || [];\r\n    return (\r\n      <div className=\"testlist\">\r\n        {\r\n          <Container fluid>\r\n          <div className=\"learn-header\">\r\n          <div className={`module-header-step2 AnalysisReport ${portlet.class ? portlet.class : 'orange-card'}`}>\r\n\t\t\t\t\t<div className=\"back\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h4>Test Uploads</h4>\r\n          </div>\r\n          </div>\r\n          <div className=\"testResult testFileupload\">\r\n              <div className=\"\">\r\n                <h4>Upload PDF</h4>\r\n                <p class=\"help-block\">Please Scan your handwritten notes into a <b>single</b> PDF and upload it here.</p>\r\n                <div class=\"custom-file\">\r\n                  <input type=\"file\" class=\"custom-file-input\" id=\"customFile\" name=\"answersheetFile\" onChange={this.onFileChange}/>\r\n                  <label class=\"custom-file-label\" for=\"customFile\">{this.state.selectedFile ? this.state.selectedFile.name : 'Choose file'} </label>\r\n                </div>\r\n                <p class=\"error\">{this.state.invalidImage}</p>\r\n                <button type=\"submit\" class=\"btn btn-primary full-width\" onClick={this.onFileUpload}>Upload File</button>\r\n              </div>\r\n          </div>\r\n          {loading ?  <Loader /> : \"\"}\r\n          </Container>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TestUploadDetails;\r\n"]},"metadata":{},"sourceType":"module"}
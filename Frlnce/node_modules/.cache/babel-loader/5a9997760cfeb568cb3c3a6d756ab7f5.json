{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _replacements = require(\"./utils/replacements\");\n\nvar _core = require(\"./utils/core\");\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nvar _mime = _interopRequireDefault(require(\"./utils/mime\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _pathWebpack = _interopRequireDefault(require(\"path-webpack\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\n\n\nclass Resources {\n  constructor(manifest, options) {\n    this.settings = {\n      replacements: options && options.replacements || \"base64\",\n      archive: options && options.archive,\n      resolver: options && options.resolver,\n      request: options && options.request\n    };\n    this.process(manifest);\n  }\n  /**\n   * Process resources\n   * @param {Manifest} manifest\n   */\n\n\n  process(manifest) {\n    this.manifest = manifest;\n    this.resources = Object.keys(manifest).map(function (key) {\n      return manifest[key];\n    });\n    this.replacementUrls = [];\n    this.html = [];\n    this.assets = [];\n    this.css = [];\n    this.urls = [];\n    this.cssUrls = [];\n    this.split();\n    this.splitUrls();\n  }\n  /**\n   * Split resources by type\n   * @private\n   */\n\n\n  split() {\n    // HTML\n    this.html = this.resources.filter(function (item) {\n      if (item.type === \"application/xhtml+xml\" || item.type === \"text/html\") {\n        return true;\n      }\n    }); // Exclude HTML\n\n    this.assets = this.resources.filter(function (item) {\n      if (item.type !== \"application/xhtml+xml\" && item.type !== \"text/html\") {\n        return true;\n      }\n    }); // Only CSS\n\n    this.css = this.resources.filter(function (item) {\n      if (item.type === \"text/css\") {\n        return true;\n      }\n    });\n  }\n  /**\n   * Convert split resources into Urls\n   * @private\n   */\n\n\n  splitUrls() {\n    // All Assets Urls\n    this.urls = this.assets.map(function (item) {\n      return item.href;\n    }.bind(this)); // Css Urls\n\n    this.cssUrls = this.css.map(function (item) {\n      return item.href;\n    });\n  }\n  /**\n   * Create a url to a resource\n   * @param {string} url\n   * @return {Promise<string>} Promise resolves with url string\n   */\n\n\n  createUrl(url) {\n    var parsedUrl = new _url.default(url);\n\n    var mimeType = _mime.default.lookup(parsedUrl.filename);\n\n    if (this.settings.archive) {\n      return this.settings.archive.createUrl(url, {\n        \"base64\": this.settings.replacements === \"base64\"\n      });\n    } else {\n      if (this.settings.replacements === \"base64\") {\n        return this.settings.request(url, 'blob').then(blob => {\n          return (0, _core.blob2base64)(blob);\n        }).then(blob => {\n          return (0, _core.createBase64Url)(blob, mimeType);\n        });\n      } else {\n        return this.settings.request(url, 'blob').then(blob => {\n          return (0, _core.createBlobUrl)(blob, mimeType);\n        });\n      }\n    }\n  }\n  /**\n   * Create blob urls for all the assets\n   * @return {Promise}         returns replacement urls\n   */\n\n\n  replacements() {\n    if (this.settings.replacements === \"none\") {\n      return new Promise(function (resolve) {\n        resolve(this.urls);\n      }.bind(this));\n    }\n\n    var replacements = this.urls.map(url => {\n      var absolute = this.settings.resolver(url);\n      return this.createUrl(absolute).catch(err => {\n        console.error(err);\n        return null;\n      });\n    });\n    return Promise.all(replacements).then(replacementUrls => {\n      this.replacementUrls = replacementUrls.filter(url => {\n        return typeof url === \"string\";\n      });\n      return replacementUrls;\n    });\n  }\n  /**\n   * Replace URLs in CSS resources\n   * @private\n   * @param  {Archive} [archive]\n   * @param  {method} [resolver]\n   * @return {Promise}\n   */\n\n\n  replaceCss(archive, resolver) {\n    var replaced = [];\n    archive = archive || this.settings.archive;\n    resolver = resolver || this.settings.resolver;\n    this.cssUrls.forEach(function (href) {\n      var replacement = this.createCssFile(href, archive, resolver).then(function (replacementUrl) {\n        // switch the url in the replacementUrls\n        var indexInUrls = this.urls.indexOf(href);\n\n        if (indexInUrls > -1) {\n          this.replacementUrls[indexInUrls] = replacementUrl;\n        }\n      }.bind(this));\n      replaced.push(replacement);\n    }.bind(this));\n    return Promise.all(replaced);\n  }\n  /**\n   * Create a new CSS file with the replaced URLs\n   * @private\n   * @param  {string} href the original css file\n   * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n   */\n\n\n  createCssFile(href) {\n    var newUrl;\n\n    if (_pathWebpack.default.isAbsolute(href)) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n\n    var absolute = this.settings.resolver(href); // Get the text of the css file from the archive\n\n    var textResponse;\n\n    if (this.settings.archive) {\n      textResponse = this.settings.archive.getText(absolute);\n    } else {\n      textResponse = this.settings.request(absolute, \"text\");\n    } // Get asset links relative to css file\n\n\n    var relUrls = this.urls.map(assetHref => {\n      var resolved = this.settings.resolver(assetHref);\n      var relative = new _path.default(absolute).relative(resolved);\n      return relative;\n    });\n\n    if (!textResponse) {\n      // file not found, don't replace\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n\n    return textResponse.then(text => {\n      // Replacements in the css text\n      text = (0, _replacements.substitute)(text, relUrls, this.replacementUrls); // Get the new url\n\n      if (this.settings.replacements === \"base64\") {\n        newUrl = (0, _core.createBase64Url)(text, \"text/css\");\n      } else {\n        newUrl = (0, _core.createBlobUrl)(text, \"text/css\");\n      }\n\n      return newUrl;\n    }, err => {\n      // handle response errors\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    });\n  }\n  /**\n   * Resolve all resources URLs relative to an absolute URL\n   * @param  {string} absolute to be resolved to\n   * @param  {resolver} [resolver]\n   * @return {string[]} array with relative Urls\n   */\n\n\n  relativeTo(absolute, resolver) {\n    resolver = resolver || this.settings.resolver; // Get Urls relative to current sections\n\n    return this.urls.map(function (href) {\n      var resolved = resolver(href);\n      var relative = new _path.default(absolute).relative(resolved);\n      return relative;\n    }.bind(this));\n  }\n  /**\n   * Get a URL for a resource\n   * @param  {string} path\n   * @return {string} url\n   */\n\n\n  get(path) {\n    var indexInUrls = this.urls.indexOf(path);\n\n    if (indexInUrls === -1) {\n      return;\n    }\n\n    if (this.replacementUrls.length) {\n      return new Promise(function (resolve, reject) {\n        resolve(this.replacementUrls[indexInUrls]);\n      }.bind(this));\n    } else {\n      return this.createUrl(path);\n    }\n  }\n  /**\n   * Substitute urls in content, with replacements,\n   * relative to a url if provided\n   * @param  {string} content\n   * @param  {string} [url]   url to resolve to\n   * @return {string}         content with urls substituted\n   */\n\n\n  substitute(content, url) {\n    var relUrls;\n\n    if (url) {\n      relUrls = this.relativeTo(url);\n    } else {\n      relUrls = this.urls;\n    }\n\n    return (0, _replacements.substitute)(content, relUrls, this.replacementUrls);\n  }\n\n  destroy() {\n    this.settings = undefined;\n    this.manifest = undefined;\n    this.resources = undefined;\n    this.replacementUrls = undefined;\n    this.html = undefined;\n    this.assets = undefined;\n    this.css = undefined;\n    this.urls = undefined;\n    this.cssUrls = undefined;\n  }\n\n}\n\nvar _default = Resources;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/resources.js"],"names":["Object","defineProperty","exports","value","default","_replacements","require","_core","_url","_interopRequireDefault","_mime","_path","_pathWebpack","obj","__esModule","Resources","constructor","manifest","options","settings","replacements","archive","resolver","request","process","resources","keys","map","key","replacementUrls","html","assets","css","urls","cssUrls","split","splitUrls","filter","item","type","href","bind","createUrl","url","parsedUrl","mimeType","lookup","filename","then","blob","blob2base64","createBase64Url","createBlobUrl","Promise","resolve","absolute","catch","err","console","error","all","replaceCss","replaced","forEach","replacement","createCssFile","replacementUrl","indexInUrls","indexOf","push","newUrl","isAbsolute","textResponse","getText","relUrls","assetHref","resolved","relative","text","substitute","relativeTo","get","path","length","reject","content","destroy","undefined","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAIE,IAAI,GAAGC,sBAAsB,CAACH,OAAO,CAAC,aAAD,CAAR,CAAjC;;AAEA,IAAII,KAAK,GAAGD,sBAAsB,CAACH,OAAO,CAAC,cAAD,CAAR,CAAlC;;AAEA,IAAIK,KAAK,GAAGF,sBAAsB,CAACH,OAAO,CAAC,cAAD,CAAR,CAAlC;;AAEA,IAAIM,YAAY,GAAGH,sBAAsB,CAACH,OAAO,CAAC,cAAD,CAAR,CAAzC;;AAEA,SAASG,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAET,IAAAA,OAAO,EAAES;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAC7B,SAAKC,QAAL,GAAgB;AACdC,MAAAA,YAAY,EAAEF,OAAO,IAAIA,OAAO,CAACE,YAAnB,IAAmC,QADnC;AAEdC,MAAAA,OAAO,EAAEH,OAAO,IAAIA,OAAO,CAACG,OAFd;AAGdC,MAAAA,QAAQ,EAAEJ,OAAO,IAAIA,OAAO,CAACI,QAHf;AAIdC,MAAAA,OAAO,EAAEL,OAAO,IAAIA,OAAO,CAACK;AAJd,KAAhB;AAMA,SAAKC,OAAL,CAAaP,QAAb;AACD;AACD;AACF;AACA;AACA;;;AAGEO,EAAAA,OAAO,CAACP,QAAD,EAAW;AAChB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKQ,SAAL,GAAiBzB,MAAM,CAAC0B,IAAP,CAAYT,QAAZ,EAAsBU,GAAtB,CAA0B,UAAUC,GAAV,EAAe;AACxD,aAAOX,QAAQ,CAACW,GAAD,CAAf;AACD,KAFgB,CAAjB;AAGA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,GAAL,GAAW,EAAX;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,KAAL;AACA,SAAKC,SAAL;AACD;AACD;AACF;AACA;AACA;;;AAGED,EAAAA,KAAK,GAAG;AACN;AACA,SAAKL,IAAL,GAAY,KAAKL,SAAL,CAAeY,MAAf,CAAsB,UAAUC,IAAV,EAAgB;AAChD,UAAIA,IAAI,CAACC,IAAL,KAAc,uBAAd,IAAyCD,IAAI,CAACC,IAAL,KAAc,WAA3D,EAAwE;AACtE,eAAO,IAAP;AACD;AACF,KAJW,CAAZ,CAFM,CAMF;;AAEJ,SAAKR,MAAL,GAAc,KAAKN,SAAL,CAAeY,MAAf,CAAsB,UAAUC,IAAV,EAAgB;AAClD,UAAIA,IAAI,CAACC,IAAL,KAAc,uBAAd,IAAyCD,IAAI,CAACC,IAAL,KAAc,WAA3D,EAAwE;AACtE,eAAO,IAAP;AACD;AACF,KAJa,CAAd,CARM,CAYF;;AAEJ,SAAKP,GAAL,GAAW,KAAKP,SAAL,CAAeY,MAAf,CAAsB,UAAUC,IAAV,EAAgB;AAC/C,UAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC5B,eAAO,IAAP;AACD;AACF,KAJU,CAAX;AAKD;AACD;AACF;AACA;AACA;;;AAGEH,EAAAA,SAAS,GAAG;AACV;AACA,SAAKH,IAAL,GAAY,KAAKF,MAAL,CAAYJ,GAAZ,CAAgB,UAAUW,IAAV,EAAgB;AAC1C,aAAOA,IAAI,CAACE,IAAZ;AACD,KAF2B,CAE1BC,IAF0B,CAErB,IAFqB,CAAhB,CAAZ,CAFU,CAIK;;AAEf,SAAKP,OAAL,GAAe,KAAKF,GAAL,CAASL,GAAT,CAAa,UAAUW,IAAV,EAAgB;AAC1C,aAAOA,IAAI,CAACE,IAAZ;AACD,KAFc,CAAf;AAGD;AACD;AACF;AACA;AACA;AACA;;;AAGEE,EAAAA,SAAS,CAACC,GAAD,EAAM;AACb,QAAIC,SAAS,GAAG,IAAIpC,IAAI,CAACJ,OAAT,CAAiBuC,GAAjB,CAAhB;;AAEA,QAAIE,QAAQ,GAAGnC,KAAK,CAACN,OAAN,CAAc0C,MAAd,CAAqBF,SAAS,CAACG,QAA/B,CAAf;;AAEA,QAAI,KAAK5B,QAAL,CAAcE,OAAlB,EAA2B;AACzB,aAAO,KAAKF,QAAL,CAAcE,OAAd,CAAsBqB,SAAtB,CAAgCC,GAAhC,EAAqC;AAC1C,kBAAU,KAAKxB,QAAL,CAAcC,YAAd,KAA+B;AADC,OAArC,CAAP;AAGD,KAJD,MAIO;AACL,UAAI,KAAKD,QAAL,CAAcC,YAAd,KAA+B,QAAnC,EAA6C;AAC3C,eAAO,KAAKD,QAAL,CAAcI,OAAd,CAAsBoB,GAAtB,EAA2B,MAA3B,EAAmCK,IAAnC,CAAwCC,IAAI,IAAI;AACrD,iBAAO,CAAC,GAAG1C,KAAK,CAAC2C,WAAV,EAAuBD,IAAvB,CAAP;AACD,SAFM,EAEJD,IAFI,CAECC,IAAI,IAAI;AACd,iBAAO,CAAC,GAAG1C,KAAK,CAAC4C,eAAV,EAA2BF,IAA3B,EAAiCJ,QAAjC,CAAP;AACD,SAJM,CAAP;AAKD,OAND,MAMO;AACL,eAAO,KAAK1B,QAAL,CAAcI,OAAd,CAAsBoB,GAAtB,EAA2B,MAA3B,EAAmCK,IAAnC,CAAwCC,IAAI,IAAI;AACrD,iBAAO,CAAC,GAAG1C,KAAK,CAAC6C,aAAV,EAAyBH,IAAzB,EAA+BJ,QAA/B,CAAP;AACD,SAFM,CAAP;AAGD;AACF;AACF;AACD;AACF;AACA;AACA;;;AAGEzB,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKD,QAAL,CAAcC,YAAd,KAA+B,MAAnC,EAA2C;AACzC,aAAO,IAAIiC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCA,QAAAA,OAAO,CAAC,KAAKrB,IAAN,CAAP;AACD,OAFkB,CAEjBQ,IAFiB,CAEZ,IAFY,CAAZ,CAAP;AAGD;;AAED,QAAIrB,YAAY,GAAG,KAAKa,IAAL,CAAUN,GAAV,CAAcgB,GAAG,IAAI;AACtC,UAAIY,QAAQ,GAAG,KAAKpC,QAAL,CAAcG,QAAd,CAAuBqB,GAAvB,CAAf;AACA,aAAO,KAAKD,SAAL,CAAea,QAAf,EAAyBC,KAAzB,CAA+BC,GAAG,IAAI;AAC3CC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,eAAO,IAAP;AACD,OAHM,CAAP;AAID,KANkB,CAAnB;AAOA,WAAOJ,OAAO,CAACO,GAAR,CAAYxC,YAAZ,EAA0B4B,IAA1B,CAA+BnB,eAAe,IAAI;AACvD,WAAKA,eAAL,GAAuBA,eAAe,CAACQ,MAAhB,CAAuBM,GAAG,IAAI;AACnD,eAAO,OAAOA,GAAP,KAAe,QAAtB;AACD,OAFsB,CAAvB;AAGA,aAAOd,eAAP;AACD,KALM,CAAP;AAMD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEgC,EAAAA,UAAU,CAACxC,OAAD,EAAUC,QAAV,EAAoB;AAC5B,QAAIwC,QAAQ,GAAG,EAAf;AACAzC,IAAAA,OAAO,GAAGA,OAAO,IAAI,KAAKF,QAAL,CAAcE,OAAnC;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKH,QAAL,CAAcG,QAArC;AACA,SAAKY,OAAL,CAAa6B,OAAb,CAAqB,UAAUvB,IAAV,EAAgB;AACnC,UAAIwB,WAAW,GAAG,KAAKC,aAAL,CAAmBzB,IAAnB,EAAyBnB,OAAzB,EAAkCC,QAAlC,EAA4C0B,IAA5C,CAAiD,UAAUkB,cAAV,EAA0B;AAC3F;AACA,YAAIC,WAAW,GAAG,KAAKlC,IAAL,CAAUmC,OAAV,CAAkB5B,IAAlB,CAAlB;;AAEA,YAAI2B,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpB,eAAKtC,eAAL,CAAqBsC,WAArB,IAAoCD,cAApC;AACD;AACF,OAPkE,CAOjEzB,IAPiE,CAO5D,IAP4D,CAAjD,CAAlB;AAQAqB,MAAAA,QAAQ,CAACO,IAAT,CAAcL,WAAd;AACD,KAVoB,CAUnBvB,IAVmB,CAUd,IAVc,CAArB;AAWA,WAAOY,OAAO,CAACO,GAAR,CAAYE,QAAZ,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEG,EAAAA,aAAa,CAACzB,IAAD,EAAO;AAClB,QAAI8B,MAAJ;;AAEA,QAAI1D,YAAY,CAACR,OAAb,CAAqBmE,UAArB,CAAgC/B,IAAhC,CAAJ,EAA2C;AACzC,aAAO,IAAIa,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCA,QAAAA,OAAO;AACR,OAFM,CAAP;AAGD;;AAED,QAAIC,QAAQ,GAAG,KAAKpC,QAAL,CAAcG,QAAd,CAAuBkB,IAAvB,CAAf,CATkB,CAS2B;;AAE7C,QAAIgC,YAAJ;;AAEA,QAAI,KAAKrD,QAAL,CAAcE,OAAlB,EAA2B;AACzBmD,MAAAA,YAAY,GAAG,KAAKrD,QAAL,CAAcE,OAAd,CAAsBoD,OAAtB,CAA8BlB,QAA9B,CAAf;AACD,KAFD,MAEO;AACLiB,MAAAA,YAAY,GAAG,KAAKrD,QAAL,CAAcI,OAAd,CAAsBgC,QAAtB,EAAgC,MAAhC,CAAf;AACD,KAjBiB,CAiBhB;;;AAGF,QAAImB,OAAO,GAAG,KAAKzC,IAAL,CAAUN,GAAV,CAAcgD,SAAS,IAAI;AACvC,UAAIC,QAAQ,GAAG,KAAKzD,QAAL,CAAcG,QAAd,CAAuBqD,SAAvB,CAAf;AACA,UAAIE,QAAQ,GAAG,IAAIlE,KAAK,CAACP,OAAV,CAAkBmD,QAAlB,EAA4BsB,QAA5B,CAAqCD,QAArC,CAAf;AACA,aAAOC,QAAP;AACD,KAJa,CAAd;;AAMA,QAAI,CAACL,YAAL,EAAmB;AACjB;AACA,aAAO,IAAInB,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCA,QAAAA,OAAO;AACR,OAFM,CAAP;AAGD;;AAED,WAAOkB,YAAY,CAACxB,IAAb,CAAkB8B,IAAI,IAAI;AAC/B;AACAA,MAAAA,IAAI,GAAG,CAAC,GAAGzE,aAAa,CAAC0E,UAAlB,EAA8BD,IAA9B,EAAoCJ,OAApC,EAA6C,KAAK7C,eAAlD,CAAP,CAF+B,CAE4C;;AAE3E,UAAI,KAAKV,QAAL,CAAcC,YAAd,KAA+B,QAAnC,EAA6C;AAC3CkD,QAAAA,MAAM,GAAG,CAAC,GAAG/D,KAAK,CAAC4C,eAAV,EAA2B2B,IAA3B,EAAiC,UAAjC,CAAT;AACD,OAFD,MAEO;AACLR,QAAAA,MAAM,GAAG,CAAC,GAAG/D,KAAK,CAAC6C,aAAV,EAAyB0B,IAAzB,EAA+B,UAA/B,CAAT;AACD;;AAED,aAAOR,MAAP;AACD,KAXM,EAWJb,GAAG,IAAI;AACR;AACA,aAAO,IAAIJ,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCA,QAAAA,OAAO;AACR,OAFM,CAAP;AAGD,KAhBM,CAAP;AAiBD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE0B,EAAAA,UAAU,CAACzB,QAAD,EAAWjC,QAAX,EAAqB;AAC7BA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKH,QAAL,CAAcG,QAArC,CAD6B,CACkB;;AAE/C,WAAO,KAAKW,IAAL,CAAUN,GAAV,CAAc,UAAUa,IAAV,EAAgB;AACnC,UAAIoC,QAAQ,GAAGtD,QAAQ,CAACkB,IAAD,CAAvB;AACA,UAAIqC,QAAQ,GAAG,IAAIlE,KAAK,CAACP,OAAV,CAAkBmD,QAAlB,EAA4BsB,QAA5B,CAAqCD,QAArC,CAAf;AACA,aAAOC,QAAP;AACD,KAJoB,CAInBpC,IAJmB,CAId,IAJc,CAAd,CAAP;AAKD;AACD;AACF;AACA;AACA;AACA;;;AAGEwC,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,QAAIf,WAAW,GAAG,KAAKlC,IAAL,CAAUmC,OAAV,CAAkBc,IAAlB,CAAlB;;AAEA,QAAIf,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtB;AACD;;AAED,QAAI,KAAKtC,eAAL,CAAqBsD,MAAzB,EAAiC;AAC/B,aAAO,IAAI9B,OAAJ,CAAY,UAAUC,OAAV,EAAmB8B,MAAnB,EAA2B;AAC5C9B,QAAAA,OAAO,CAAC,KAAKzB,eAAL,CAAqBsC,WAArB,CAAD,CAAP;AACD,OAFkB,CAEjB1B,IAFiB,CAEZ,IAFY,CAAZ,CAAP;AAGD,KAJD,MAIO;AACL,aAAO,KAAKC,SAAL,CAAewC,IAAf,CAAP;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEH,EAAAA,UAAU,CAACM,OAAD,EAAU1C,GAAV,EAAe;AACvB,QAAI+B,OAAJ;;AAEA,QAAI/B,GAAJ,EAAS;AACP+B,MAAAA,OAAO,GAAG,KAAKM,UAAL,CAAgBrC,GAAhB,CAAV;AACD,KAFD,MAEO;AACL+B,MAAAA,OAAO,GAAG,KAAKzC,IAAf;AACD;;AAED,WAAO,CAAC,GAAG5B,aAAa,CAAC0E,UAAlB,EAA8BM,OAA9B,EAAuCX,OAAvC,EAAgD,KAAK7C,eAArD,CAAP;AACD;;AAEDyD,EAAAA,OAAO,GAAG;AACR,SAAKnE,QAAL,GAAgBoE,SAAhB;AACA,SAAKtE,QAAL,GAAgBsE,SAAhB;AACA,SAAK9D,SAAL,GAAiB8D,SAAjB;AACA,SAAK1D,eAAL,GAAuB0D,SAAvB;AACA,SAAKzD,IAAL,GAAYyD,SAAZ;AACA,SAAKxD,MAAL,GAAcwD,SAAd;AACA,SAAKvD,GAAL,GAAWuD,SAAX;AACA,SAAKtD,IAAL,GAAYsD,SAAZ;AACA,SAAKrD,OAAL,GAAeqD,SAAf;AACD;;AA5Ra;;AAgShB,IAAIC,QAAQ,GAAGzE,SAAf;AACAb,OAAO,CAACE,OAAR,GAAkBoF,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _replacements = require(\"./utils/replacements\");\n\nvar _core = require(\"./utils/core\");\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nvar _mime = _interopRequireDefault(require(\"./utils/mime\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _pathWebpack = _interopRequireDefault(require(\"path-webpack\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\nclass Resources {\n  constructor(manifest, options) {\n    this.settings = {\n      replacements: options && options.replacements || \"base64\",\n      archive: options && options.archive,\n      resolver: options && options.resolver,\n      request: options && options.request\n    };\n    this.process(manifest);\n  }\n  /**\n   * Process resources\n   * @param {Manifest} manifest\n   */\n\n\n  process(manifest) {\n    this.manifest = manifest;\n    this.resources = Object.keys(manifest).map(function (key) {\n      return manifest[key];\n    });\n    this.replacementUrls = [];\n    this.html = [];\n    this.assets = [];\n    this.css = [];\n    this.urls = [];\n    this.cssUrls = [];\n    this.split();\n    this.splitUrls();\n  }\n  /**\n   * Split resources by type\n   * @private\n   */\n\n\n  split() {\n    // HTML\n    this.html = this.resources.filter(function (item) {\n      if (item.type === \"application/xhtml+xml\" || item.type === \"text/html\") {\n        return true;\n      }\n    }); // Exclude HTML\n\n    this.assets = this.resources.filter(function (item) {\n      if (item.type !== \"application/xhtml+xml\" && item.type !== \"text/html\") {\n        return true;\n      }\n    }); // Only CSS\n\n    this.css = this.resources.filter(function (item) {\n      if (item.type === \"text/css\") {\n        return true;\n      }\n    });\n  }\n  /**\n   * Convert split resources into Urls\n   * @private\n   */\n\n\n  splitUrls() {\n    // All Assets Urls\n    this.urls = this.assets.map(function (item) {\n      return item.href;\n    }.bind(this)); // Css Urls\n\n    this.cssUrls = this.css.map(function (item) {\n      return item.href;\n    });\n  }\n  /**\n   * Create a url to a resource\n   * @param {string} url\n   * @return {Promise<string>} Promise resolves with url string\n   */\n\n\n  createUrl(url) {\n    var parsedUrl = new _url.default(url);\n\n    var mimeType = _mime.default.lookup(parsedUrl.filename);\n\n    if (this.settings.archive) {\n      return this.settings.archive.createUrl(url, {\n        \"base64\": this.settings.replacements === \"base64\"\n      });\n    } else {\n      if (this.settings.replacements === \"base64\") {\n        return this.settings.request(url, 'blob').then(blob => {\n          return (0, _core.blob2base64)(blob);\n        }).then(blob => {\n          return (0, _core.createBase64Url)(blob, mimeType);\n        });\n      } else {\n        return this.settings.request(url, 'blob').then(blob => {\n          return (0, _core.createBlobUrl)(blob, mimeType);\n        });\n      }\n    }\n  }\n  /**\n   * Create blob urls for all the assets\n   * @return {Promise}         returns replacement urls\n   */\n\n\n  replacements() {\n    if (this.settings.replacements === \"none\") {\n      return new Promise(function (resolve) {\n        resolve(this.urls);\n      }.bind(this));\n    }\n\n    var replacements = this.urls.map(url => {\n      var absolute = this.settings.resolver(url);\n      return this.createUrl(absolute).catch(err => {\n        console.error(err);\n        return null;\n      });\n    });\n    return Promise.all(replacements).then(replacementUrls => {\n      this.replacementUrls = replacementUrls.filter(url => {\n        return typeof url === \"string\";\n      });\n      return replacementUrls;\n    });\n  }\n  /**\n   * Replace URLs in CSS resources\n   * @private\n   * @param  {Archive} [archive]\n   * @param  {method} [resolver]\n   * @return {Promise}\n   */\n\n\n  replaceCss(archive, resolver) {\n    var replaced = [];\n    archive = archive || this.settings.archive;\n    resolver = resolver || this.settings.resolver;\n    this.cssUrls.forEach(function (href) {\n      var replacement = this.createCssFile(href, archive, resolver).then(function (replacementUrl) {\n        // switch the url in the replacementUrls\n        var indexInUrls = this.urls.indexOf(href);\n\n        if (indexInUrls > -1) {\n          this.replacementUrls[indexInUrls] = replacementUrl;\n        }\n      }.bind(this));\n      replaced.push(replacement);\n    }.bind(this));\n    return Promise.all(replaced);\n  }\n  /**\n   * Create a new CSS file with the replaced URLs\n   * @private\n   * @param  {string} href the original css file\n   * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n   */\n\n\n  createCssFile(href) {\n    var newUrl;\n\n    if (_pathWebpack.default.isAbsolute(href)) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n\n    var absolute = this.settings.resolver(href); // Get the text of the css file from the archive\n\n    var textResponse;\n\n    if (this.settings.archive) {\n      textResponse = this.settings.archive.getText(absolute);\n    } else {\n      textResponse = this.settings.request(absolute, \"text\");\n    } // Get asset links relative to css file\n\n\n    var relUrls = this.urls.map(assetHref => {\n      var resolved = this.settings.resolver(assetHref);\n      var relative = new _path.default(absolute).relative(resolved);\n      return relative;\n    });\n\n    if (!textResponse) {\n      // file not found, don't replace\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n\n    return textResponse.then(text => {\n      // Replacements in the css text\n      text = (0, _replacements.substitute)(text, relUrls, this.replacementUrls); // Get the new url\n\n      if (this.settings.replacements === \"base64\") {\n        newUrl = (0, _core.createBase64Url)(text, \"text/css\");\n      } else {\n        newUrl = (0, _core.createBlobUrl)(text, \"text/css\");\n      }\n\n      return newUrl;\n    }, err => {\n      // handle response errors\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    });\n  }\n  /**\n   * Resolve all resources URLs relative to an absolute URL\n   * @param  {string} absolute to be resolved to\n   * @param  {resolver} [resolver]\n   * @return {string[]} array with relative Urls\n   */\n\n\n  relativeTo(absolute, resolver) {\n    resolver = resolver || this.settings.resolver; // Get Urls relative to current sections\n\n    return this.urls.map(function (href) {\n      var resolved = resolver(href);\n      var relative = new _path.default(absolute).relative(resolved);\n      return relative;\n    }.bind(this));\n  }\n  /**\n   * Get a URL for a resource\n   * @param  {string} path\n   * @return {string} url\n   */\n\n\n  get(path) {\n    var indexInUrls = this.urls.indexOf(path);\n\n    if (indexInUrls === -1) {\n      return;\n    }\n\n    if (this.replacementUrls.length) {\n      return new Promise(function (resolve, reject) {\n        resolve(this.replacementUrls[indexInUrls]);\n      }.bind(this));\n    } else {\n      return this.createUrl(path);\n    }\n  }\n  /**\n   * Substitute urls in content, with replacements,\n   * relative to a url if provided\n   * @param  {string} content\n   * @param  {string} [url]   url to resolve to\n   * @return {string}         content with urls substituted\n   */\n\n\n  substitute(content, url) {\n    var relUrls;\n\n    if (url) {\n      relUrls = this.relativeTo(url);\n    } else {\n      relUrls = this.urls;\n    }\n\n    return (0, _replacements.substitute)(content, relUrls, this.replacementUrls);\n  }\n\n  destroy() {\n    this.settings = undefined;\n    this.manifest = undefined;\n    this.resources = undefined;\n    this.replacementUrls = undefined;\n    this.html = undefined;\n    this.assets = undefined;\n    this.css = undefined;\n    this.urls = undefined;\n    this.cssUrls = undefined;\n  }\n\n}\n\nvar _default = Resources;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\_components\\\\OTPValidator.jsx\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { ILoader } from \"./iloader/iloader\";\nimport ApiService from \"../_services/ApiService\";\nexport default class OTPValidator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateInput = e => {\n      let v = e.target.value;\n      let k = e.target.name;\n      let otpInput = { ...this.state.otpInput\n      };\n      otpInput = v;\n      this.setState({\n        otpInput: otpInput\n      });\n    };\n\n    this.handleClose = value => {\n      //console.log(\"OTPValidator --> handleClose()...\"+this.state.otpInput);\n      if (value === true && (this.state.otpInput === null || this.state.otpInput.length !== this.state.data.otpLength)) {\n        this.setState({\n          showError: true\n        });\n      } else if (value === true && !this.props.masterControl) {\n        this.setState({\n          showLoading: true,\n          showError: false\n        }, () => {\n          ApiService.verifyOTP(this.state.data.userId, this.state.otpInput).then(res => {\n            //console.log(\"OTPValidator -> handleClose(); res : \"+JSON.stringify(res));\n            if (res.data.status === 1) {\n              this.setState({\n                showLoading: false\n              }, () => {\n                const {\n                  onOTPValidatorClose = f => f\n                } = this.props;\n                onOTPValidatorClose(value);\n              });\n            } else {\n              this.setState({\n                showLoading: false,\n                showError: true,\n                errorMessage: res.data.message\n              });\n            }\n          });\n        });\n      } else {\n        var _this$props;\n\n        const {\n          onOTPValidatorClose = f => f\n        } = this.props;\n        (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.masterControl ? onOTPValidatorClose(this.state.otpInput, value) : onOTPValidatorClose(value);\n      }\n    };\n\n    this.state = {\n      data: this.props.data,\n      otpInput: null,\n      showError: false,\n      errorMessage: \"The OTP you entered is invalid. Please enter the correct OTP.\",\n      showLoading: false\n    };\n  }\n  /*componentDidMount() {\r\n        console.log(\"OTPValidator --> componentDidMount...\");\r\n    }*/\n\n  /*shouldComponentUpdate(newProps, newState) {\r\n        console.log(\"OTPValidator --> shouldComponentUpdate()...);\r\n        return newState.data.show != this.state.data.show\r\n    }*/\n\n\n  componentWillReceiveProps(newProps) {\n    //console.log(\"OTPValidator --> componentWillReceiveProps()...\");\n    if (newProps.data.show !== this.props.data.show) {\n      this.setState({\n        data: newProps.data\n      });\n    }\n  }\n\n  render() {\n    //console.log(\"OTPValidator --> render()...\");\n    const {\n      enableResendOtp,\n      showTimer,\n      resendOtp,\n      callForOtp,\n      timeLeft,\n      handleResendMessage,\n      handleCallForOtp\n    } = this.props;\n    let otpData = this.state.data;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      show: otpData.show,\n      style: {\n        fontFamily: \"Work Sans, sans-serif\"\n      },\n      backdrop: \"static\",\n      onHide: () => this.handleClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      className: `ilearn-plain-header ilearn-blue-light-btn`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      className: \"text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \" Verify OTP \")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: e => {\n        e.preventDefault();\n        this.handleClose(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"otp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      dangerouslySetInnerHTML: {\n        __html: otpData.message\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control, {\n      size: \"lg\",\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      name: \"otp\",\n      onChange: this.updateInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    })), this.state.showError && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, this.state.errorMessage)), enableResendOtp ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Did not Receive OTP? \"), showTimer && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 31\n      }\n    }, \"Wait \", timeLeft, \" seconds\"), resendOtp && /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"var(--primary)\",\n        cursor: \"pointer\"\n      },\n      onClick: handleResendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, \"Resend OTP\"), callForOtp && /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"var(--primary)\",\n        cursor: \"pointer\"\n      },\n      onClick: handleCallForOtp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, \"Get OTP on Call\")) : null, this.renderLoader()), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      className: \"text-uppercase\",\n      onClick: () => this.handleClose(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Verify\"))));\n  }\n\n  renderLoader() {\n    //console.log(\"OTPValidator -> renderLoader()... \");\n    const _loadingText = \"Please wait...\";\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n/*\r\n    References:\r\n    Modal -> https://react-bootstrap.github.io/components/modal/\r\n\r\n*/","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/_components/OTPValidator.jsx"],"names":["React","Component","Modal","Form","Button","ILoader","ApiService","OTPValidator","constructor","props","updateInput","e","v","target","value","k","name","otpInput","state","setState","handleClose","length","data","otpLength","showError","masterControl","showLoading","verifyOTP","userId","then","res","status","onOTPValidatorClose","f","errorMessage","message","componentWillReceiveProps","newProps","show","render","enableResendOtp","showTimer","resendOtp","callForOtp","timeLeft","handleResendMessage","handleCallForOtp","otpData","fontFamily","preventDefault","__html","color","cursor","renderLoader","_loadingText"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { ILoader } from \"./iloader/iloader\";\r\nimport ApiService from \"../_services/ApiService\";\r\n\r\nexport default class OTPValidator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: this.props.data,\r\n      otpInput: null,\r\n      showError: false,\r\n      errorMessage:\r\n        \"The OTP you entered is invalid. Please enter the correct OTP.\",\r\n      showLoading: false,\r\n    };\r\n  }\r\n\r\n  /*componentDidMount() {\r\n        console.log(\"OTPValidator --> componentDidMount...\");\r\n    }*/\r\n\r\n  /*shouldComponentUpdate(newProps, newState) {\r\n        console.log(\"OTPValidator --> shouldComponentUpdate()...);\r\n        return newState.data.show != this.state.data.show\r\n    }*/\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    //console.log(\"OTPValidator --> componentWillReceiveProps()...\");\r\n    if (newProps.data.show !== this.props.data.show) {\r\n      this.setState({\r\n        data: newProps.data,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //console.log(\"OTPValidator --> render()...\");\r\n    const {\r\n      enableResendOtp,\r\n      showTimer,\r\n      resendOtp,\r\n      callForOtp,\r\n      timeLeft,\r\n      handleResendMessage,\r\n      handleCallForOtp,\r\n    } = this.props;\r\n    let otpData = this.state.data;\r\n    return (\r\n      <>\r\n        <Modal\r\n          show={otpData.show}\r\n          style={{ fontFamily: \"Work Sans, sans-serif\" }}\r\n          backdrop=\"static\"\r\n          onHide={() => this.handleClose(false)}\r\n        >\r\n          <Modal.Header\r\n            closeButton\r\n            className={`ilearn-plain-header ilearn-blue-light-btn`}\r\n          >\r\n            <Modal.Title className=\"text-white\"> Verify OTP </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                this.handleClose(true);\r\n              }}\r\n            >\r\n              <Form.Group controlId=\"otp\">\r\n                <Form.Label\r\n                  dangerouslySetInnerHTML={{ __html: otpData.message }}\r\n                ></Form.Label>\r\n                <Form.Control\r\n                  size=\"lg\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter OTP\"\r\n                  name=\"otp\"\r\n                  onChange={this.updateInput}\r\n                />\r\n              </Form.Group>\r\n              {this.state.showError && (\r\n                <div className=\"error-message\">{this.state.errorMessage}</div>\r\n              )}\r\n            </Form>\r\n            {enableResendOtp ? (\r\n              <>\r\n                <span>Did not Receive OTP? </span>\r\n                {showTimer && <span>Wait {timeLeft} seconds</span>}\r\n                {resendOtp && (\r\n                  <span\r\n                    style={{ color: \"var(--primary)\", cursor: \"pointer\" }}\r\n                    onClick={handleResendMessage}\r\n                  >\r\n                    Resend OTP\r\n                  </span>\r\n                )}\r\n                {callForOtp && (\r\n                  <span\r\n                    style={{ color: \"var(--primary)\", cursor: \"pointer\" }}\r\n                    onClick={handleCallForOtp}\r\n                  >\r\n                    Get OTP on Call\r\n                  </span>\r\n                )}\r\n              </>\r\n            ) : null}\r\n            {this.renderLoader()}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"success\"\r\n              className=\"text-uppercase\"\r\n              onClick={() => this.handleClose(true)}\r\n            >\r\n              Verify\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderLoader() {\r\n    //console.log(\"OTPValidator -> renderLoader()... \");\r\n    const _loadingText = \"Please wait...\";\r\n    return (\r\n      <ILoader\r\n        loadingText={_loadingText}\r\n        isShow={this.state.showLoading}\r\n      ></ILoader>\r\n    );\r\n  }\r\n\r\n  updateInput = (e) => {\r\n    let v = e.target.value;\r\n    let k = e.target.name;\r\n    let otpInput = { ...this.state.otpInput };\r\n    otpInput = v;\r\n    this.setState({ otpInput: otpInput });\r\n  };\r\n\r\n  handleClose = (value) => {\r\n    //console.log(\"OTPValidator --> handleClose()...\"+this.state.otpInput);\r\n    if (\r\n      value === true &&\r\n      (this.state.otpInput === null ||\r\n        this.state.otpInput.length !== this.state.data.otpLength)\r\n    ) {\r\n      this.setState({ showError: true });\r\n    } else if (value === true && !this.props.masterControl) {\r\n      this.setState({ showLoading: true, showError: false }, () => {\r\n        ApiService.verifyOTP(this.state.data.userId, this.state.otpInput).then(\r\n          (res) => {\r\n            //console.log(\"OTPValidator -> handleClose(); res : \"+JSON.stringify(res));\r\n            if (res.data.status === 1) {\r\n              this.setState({ showLoading: false }, () => {\r\n                const { onOTPValidatorClose = (f) => f } = this.props;\r\n                onOTPValidatorClose(value);\r\n              });\r\n            } else {\r\n              this.setState({\r\n                showLoading: false,\r\n                showError: true,\r\n                errorMessage: res.data.message,\r\n              });\r\n            }\r\n          }\r\n        );\r\n      });\r\n    } else {\r\n      const { onOTPValidatorClose = (f) => f } = this.props;\r\n      this.props?.masterControl\r\n        ? onOTPValidatorClose(this.state.otpInput, value)\r\n        : onOTPValidatorClose(value);\r\n    }\r\n  };\r\n}\r\n\r\n/*\r\n    References:\r\n    Modal -> https://react-bootstrap.github.io/components/modal/\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\quiz\\\\QuizPlayer.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Quiz.css\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faClock } from '@fortawesome/free-solid-svg-icons';\nimport ApiService from \"../../_services/ApiService\";\nimport { ILoader } from './../../_components/iloader/iloader';\nimport swal from 'sweetalert';\nimport Config from './../../_config/config';\nimport Confetti from 'react-dom-confetti';\n\nclass QuizPlayer extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"QuizPlayer -> constructor()... \");\n    console.log(\"QuizPlayer -> constructor(); Portlet : \" + JSON.stringify(Config.CURRENT_PORTLET));\n    console.log(\"QuizPlayer -> constructor(); testBean : \" + JSON.stringify(this.props.location.state.testBean));\n\n    if (!Config.CURRENT_PORTLET) {\n      Config.CURRENT_PORTLET = JSON.parse(localStorage.getItem('portlet'));\n    }\n\n    this.state = {\n      testBean: this.props.location.state.testBean,\n      enquiryId: localStorage.getItem('enquiryId'),\n      enrollmentId: 0,\n      message: null,\n      errorMessage: null,\n      showLoading: false,\n      testdata: null,\n      showConfettii: false,\n      testRemainingTimeInSeconds: 0,\n      time: {} // Timer\n\n    };\n    /* Timer Properties */\n\n    this.timer = 0;\n    this.done = false;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.sync = this.sync.bind(this);\n    this.autoSyncTimer = 0;\n    /* Timer Properties*/\n  }\n\n  componentDidMount() {\n    console.log(\"QuizPlayer -> componentDidMount()... \");\n    this.init();\n  }\n\n  componentWillUnmount() {}\n\n  init() {\n    console.log(\"QuizPlayer -> init()... \" + JSON.stringify(this.state.testBean));\n    this.setState({\n      showLoading: true\n    }, () => {\n      ApiService.getOnlineTestData(this.state.testBean.id).then(res => {\n        console.log(\"QuizPlayer -> init(); res : \" + JSON.stringify(res));\n        let testData = res.data;\n\n        if (!testData) {\n          console.log(\"QuizPlayer -> init() -> No test data found!\");\n          this.setState({\n            showLoading: false,\n            errorMessage: \"No test data found!\"\n          });\n        } else {\n          this.setUp(testData);\n        }\n      }, error => {\n        //ErrorCB\n        console.log(\"QuizPlayer -> init() -> Connection Error : \" + Config.CONNECTION_ERROR);\n        this.setState({\n          showLoading: false\n        });\n      });\n    });\n  }\n\n  setUp(data) {\n    console.log(\"QuizPlayer -> setUp()...\" + JSON.stringify(data)); //this.showLoading(\"Initializing...\");\n\n    /*periodically update test remaining time  every autosyncperiod configured in the resource*/\n\n    if (data.test.autosyncperiod != undefined) {\n      this.autoSyncTimer = setInterval(this.sync, data.test.autosyncperiod);\n    }\n\n    let autoTerminateTest = \"0\";\n    let sectionaldistribution = data.test.sectionaldistribution;\n    let prematureTermination = data.test.prematuretermination;\n\n    if (prematureTermination == 0 && sectionaldistribution == 1) {\n      // disable Finish button\n      autoTerminateTest = \"1\";\n    }\n\n    let sections = [];\n\n    for (let secIndex = 0; secIndex < data.test.sections.section.length - 1; secIndex++) {\n      let section = data.test.sections.section[secIndex];\n      /*Creating JSON Array(question) when there is single JSON Object(question)*/\n\n      if (!Array.isArray(section.questions.question)) {\n        let questionJsonArray = [];\n        questionJsonArray.push(section.questions.question);\n        section.questions.question = questionJsonArray;\n      }\n\n      sections.push(section);\n    }\n\n    console.log(\"sections : \" + JSON.stringify(sections));\n    let currentIndex = 0;\n    let currentSectionIndex = 0;\n    let question = sections[0].questions.question[currentIndex];\n    console.log(\"QuizPlayer -> setUp(); question <<1>> \" + JSON.stringify(question));\n\n    if (!this.isNumber(question.textanswer) && question.textanswer == false) {\n      question.textanswer = \"\";\n    }\n\n    let sectionDataStore = {\n      data: []\n    };\n    let _sectionDataStore = {\n      data: []\n    };\n\n    for (let section in sections) {\n      _sectionDataStore.data[section] = {\n        \"sectionIndex\": section,\n        \"sectionId\": sections[section].id,\n        \"sectionQuestionIndex\": 0\n      };\n      sectionDataStore = _sectionDataStore;\n    }\n\n    let lastAttemptedSectionId = data.test.lastattemptedsectionid;\n    let resumeFromSection;\n    let totalQuestions = 0;\n    let questionDataStore = {\n      data: []\n    };\n    console.log(\"QuizPlayer -> setUp(); Iterating section START...\");\n    console.log(\"QuizPlayer -> setUp(); lastAttemptedSectionId : \" + lastAttemptedSectionId);\n\n    for (let si in data.test.sections.section) {\n      let section = data.test.sections.section[si];\n\n      if (lastAttemptedSectionId > 0 && lastAttemptedSectionId == section.sectionid) {\n        console.log(\"QuizPlayer -> setUp(); resumeFromSection : \" + JSON.stringify(resumeFromSection));\n        resumeFromSection = section;\n        currentSectionIndex = parseInt(si);\n      }\n\n      if (!section.sectionid) // Checking blank Section\n        continue;\n\n      for (let qi in section.questions.question) {\n        let _question = section.questions.question[qi];\n        let attemptedChoices = [];\n\n        if (_question.questioncategory == \"1\" || _question.questioncategory == \"26\") {\n          for (let choiceIndex in _question.choices.choice) {\n            if (_question.choices.choice[choiceIndex].attempted == \"1\") {\n              attemptedChoices.push(_question.choices.choice[choiceIndex].id);\n            }\n          }\n        }\n        /*if(_question.questioncategory==\"2\"){ // mtf\r\n          let choices=_question.choices;\r\n          for(let index in choices.choice){\r\n            let matches=choices.choice[index].matches;\r\n            let selectedMatches=\"\";\r\n            for(let matchIndex in matches.match){\r\n              if(matches.match[matchIndex].attempted==\"1\"){\r\n                if(selectedMatches.length>0){\r\n                  selectedMatches+=\";\";\r\n                }\r\n                selectedMatches+=matches.match[matchIndex].id;\r\n              }\r\n            }\r\n            if(selectedMatches.length>0){\r\n              attemptedChoices.push(choices.choice[index].id+\":\"+selectedMatches);\r\n            }\r\n          }\r\n        }*/\n\n\n        let textualAnswer = \"\";\n        /*if(_question.questioncategory==\"0\" || _question.questioncategory==\"4\" ||  _question.questioncategory==\"5\") {\r\n            if(isNumber(_question.textanswer) || _question.textanswer != false) {\r\n              textualAnswer=_question.textanswer;\r\n            }\r\n        }*/\n\n        let _question1 = {\n          questionIndex: qi,\n          questionNumber: _question.questionnumber,\n          testid: this.state.testBean.id,\n          sectionid: _question.questionsectionid,\n          enquiryid: this.state.enquiryId,\n          enrollmentid: this.state.enrollmentId,\n          questionnumber: _question.questionnumber,\n          questionid: _question.id,\n          questioncategory: _question.questioncategory,\n          attemptid: _question.attemptid,\n          attempted: _question.attempted,\n          timetaken: _question.timespent,\n          currenttimetaken: \"\",\n          attemptedchoices: attemptedChoices,\n          textualanswer: textualAnswer,\n          state: \"\",\n          stateid: _question.markforlater,\n          markstatus: \"\",\n          runningquestionnumber: _question.runningquestionnumber\n        }; //questionDataStore.data.push(_question1);\n\n        questionDataStore.data[_question.questionnumber] = _question1;\n      }\n    }\n\n    console.log(\"QuizPlayer -> setUp(); questionDataStore : \" + JSON.stringify(questionDataStore));\n    console.log(\"QuizPlayer -> setUp(); Iterating section END...\");\n    console.log(\"QuizPlayer -> setUp(); currentSectionIndex : \" + currentSectionIndex);\n\n    if (!questionDataStore.data[0]) {\n      console.log(\"QuizPlayer -> setUp(); Removing Empty question\");\n      totalQuestions = questionDataStore.data.length - 1;\n    } else {\n      totalQuestions = questionDataStore.data.length;\n    } //console.log(questionDataStore);\n\n\n    questionDataStore.data[question.questionnumber].attempted = 1; // first question always in READY TO ATTEMPT mode i.e. 1\n    //sections[0].questions.question[0].visited=\"1\";\n\n    question.visited = \"1\"; //question.marked=questionDataStore.data[question.questionnumber].stateid;\n    //console.log(\"currentSectionIndex = \"+currentSectionIndex);\n\n    let currentSection = null;\n    let testtime = 0;\n    let currentTab = 0;\n\n    if (typeof resumeFromSection !== 'undefined') {\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection : \" + resumeFromSection);\n      currentSection = resumeFromSection; //this.selectTab(currentSectionIndex);\n      //console.log(currentSection);\n\n      currentIndex = data.test.resumefrom - 1;\n      testtime = data.test.resumetime;\n      question = sections[currentSectionIndex].questions.question[currentIndex];\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection >> currentIndex: \" + currentIndex);\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection >> testtime: \" + testtime);\n    } else {\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection else....\");\n      /*start of [ to resume from in case of non-sectional time] */\n\n      let resumeFrom = data.test.resumefrom - 1; // rF = 7 ,1s = 6,2s = 6 (12-7 = 5)\n\n      let questionCount = 0;\n\n      for (let si in sections) {\n        let section = sections[si];\n        questionCount += section.questions.question.length;\n\n        if (questionCount > resumeFrom) {\n          currentIndex = resumeFrom - (questionCount - section.questions.question.length);\n          currentSection = section;\n          question = currentSection.questions.question[currentIndex];\n          currentSectionIndex = parseInt(si);\n          currentTab = currentSectionIndex;\n          break;\n        }\n      }\n      /* end of [to resume from in case of non-sectional time]*/\n      //currentSection=sections[0]; // uncomment this line if [to resume from in case of non-sectional time] has any issue\n\n\n      if (sectionaldistribution == 1) {\n        testtime = currentSection.testtime;\n      } else {\n        testtime = data.test.testtime;\n      }\n    }\n\n    let testJSONObj = {\n      \"syncCounter\": 0,\n      \"testName\": data.test.name,\n      \"studentName\": data.test.studentname,\n      \"studentCode\": data.test.studentcode,\n      \"studentPhotoPath\": data.test.studentphotopath,\n      \"usefulData\": data.test.showusefuldata,\n      \"isTodayEndDate\": data.test.isTodayEndDate,\n      \"testAutoQuitMessage\": data.test.testAutoQuitMessage,\n      \"importantConstants\": data.test.importantConstants,\n      \"sectionaldistribution\": sectionaldistribution,\n      \"prematureTermination\": prematureTermination,\n      \"autosyncperiod\": data.test.autosyncperiod,\n      \"instructions\": data.test.instructions,\n      \"autoTerminateTest\": autoTerminateTest,\n      \"sections\": sections,\n      \"currentIndex\": currentIndex,\n      \"currentSectionIndex\": currentSectionIndex,\n      \"question\": question,\n      \"sectionDataStore\": sectionDataStore,\n      \"lastAttemptedSectionId\": lastAttemptedSectionId,\n      \"resumeFromSection\": resumeFromSection,\n      \"totalQuestions\": totalQuestions,\n      \"questionDataStore\": questionDataStore,\n      \"currentSection\": currentSection,\n      \"testtime\": testtime,\n      \"currentTab\": currentTab,\n      \"choicetype\": currentSection.choicetype,\n      \"calculatorMode\": currentSection.calculatortype,\n      \"startTime\": new Date().getTime(),\n      \"display\": 1\n    };\n    console.log(\"QuizPlayer -> setUp();  Question : \" + JSON.stringify(testJSONObj.question));\n    console.log(\"QuizPlayer -> setUp(); Test time : \" + testtime);\n    let testRemainingTimeInSeconds = testtime / 1000;\n    console.log(\"QuizPlayer -> setUp(); testRemainingTimeInSeconds \" + testRemainingTimeInSeconds);\n    let timeLeftVar = this.secondsToTime(testRemainingTimeInSeconds);\n    this.setState({\n      showLoading: false,\n      testdata: testJSONObj,\n      testRemainingTimeInSeconds: testRemainingTimeInSeconds,\n      time: timeLeftVar\n    });\n    console.log(\"QuizPlayer -> setUp(); Test Data : \" + JSON.stringify(testJSONObj));\n    this.startTimer(); //this.loadMathJax();\n  }\n  /* -----Timer Methods Start----- */\n\n\n  startTimer() {\n    console.log(\"QuizPlayer -> startTimer()... \");\n\n    if (this.timer == 0 && this.state.testRemainingTimeInSeconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    //console.log(\"QuizPlayer -> countDown()... \"+this.done);\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.testRemainingTimeInSeconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      testRemainingTimeInSeconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0 || this.done == true) {\n      //clearInterval(this.timer);\n      //alert(\"Timer stop!...\");\n      this.stopCountdown();\n    }\n  }\n\n  stopCountdown() {\n    console.log(\"QuizPlayer -> stopCountdown();\");\n\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = undefined;\n    }\n\n    if (this.autoSyncTimer) {\n      clearInterval(this.autoSyncTimer);\n    }\n\n    if (!this.done) {\n      this.timeOut();\n    }\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours < 10 ? \"0\" + hours : hours,\n      \"m\": minutes < 10 ? \"0\" + minutes : minutes,\n      \"s\": seconds < 10 ? \"0\" + seconds : seconds\n    };\n    return obj;\n  }\n  /* -----Timer Methods END----- */\n\n\n  render() {\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }\n    }, this.renderHeader(), this.state.errorMessage && this.renderError(), !this.state.errorMessage && this.renderBody(), this.renderLoader()));\n  }\n\n  renderHeader() {\n    //console.log(\"QuizPlayer -> renderHeader()... \");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `ilearn-plain-header ${Config.CURRENT_PORTLET.class}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-item-block \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }\n    }, this.state.testdata && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-player-back\",\n      onClick: () => this.forceDismiss(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"quiz-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 13\n      }\n    }, this.state.testBean.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-player-timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    }, this.renderTimer())), !this.state.testdata && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-player-back\",\n      onClick: () => this.props.history.goBack(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n  renderBody() {\n    //console.log(\"QuizPlayer -> renderBody()... \");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.testdata && this.state.testdata.question && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-padding-both-sides ilearn-padding-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      as: \"h5\",\n      className: \"question-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }\n    }, \"Q :\", this.state.testdata.question.runningquestionnumber, \"/\", this.state.testdata.totalQuestions), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-item-block \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ilearn-item-inner card-text\",\n      dangerouslySetInnerHTML: {\n        __html: this.state.testdata.question.statement\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 21\n      }\n    })), this.state.testdata.question.choices.choice.map((choice, index) => {\n      return this.renderChoice(choice);\n    })))));\n  }\n\n  renderChoice(choice) {\n    //console.log(\"QuizPlayer -> renderChoice()... \");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-padding-both-sides ilearn-padding-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      onClick: () => this.onClickOption(this.state.testdata.question, choice.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: `question-choice  ${choice.flag == true ? 'correct' : choice.flag == false ? 'wrong' : 'normal'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-item-block \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ilearn-item-inner card-text question-choice-item-inner\",\n      dangerouslySetInnerHTML: {\n        __html: choice.choice\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(Confetti, {\n      active: choice.flag && this.state.showConfettii,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 15\n      }\n    })));\n  }\n\n  renderLoader() {\n    //console.log(\"QuizPlayer -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }\n    });\n  }\n\n  renderTimer() {\n    //console.log(\"QuizPlayer -> renderTimer()... \");\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faClock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 13\n      }\n    }), \" \", this.state.time.h, \":\", this.state.time.m, \":\", this.state.time.s);\n  }\n\n  renderError() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"alert-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 15\n      }\n    }, \"Error!\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 15\n      }\n    }, this.state.errorMessage)));\n  }\n\n  toggleConfetti() {\n    console.log(\"QuizPlayer -> toggleConfetti()... \");\n    this.setState(state => ({\n      showConfettii: !state.showConfettii\n    }));\n  }\n\n  onClickOption(question, selectedChoiceId) {\n    console.log(\"QuizPlayer -> onClickOption(); selectedChoiceId: \" + selectedChoiceId);\n\n    if (!this.state.showLoading) {\n      //For Blocking multiple clicks on option buttons.      \n      this.setState({\n        showLoading: true\n      });\n      let _showConfetti = false;\n      let correctChoiceIndex = null;\n      let selectedChoiceIndex = null;\n      let correctChoice = null;\n      let selectedChoice = null;\n\n      for (let choiceIndex in question.choices.choice) {\n        if (question.choices.choice[choiceIndex].correctFlag == 1) {\n          correctChoiceIndex = choiceIndex;\n          correctChoice = question.choices.choice[choiceIndex];\n          console.log(\"QuizPlayer -> onClickOption(); Correct Flag :\" + JSON.stringify(correctChoice));\n        }\n\n        if (question.choices.choice[choiceIndex].id == selectedChoiceId) {\n          selectedChoiceIndex = choiceIndex;\n          selectedChoice = question.choices.choice[choiceIndex].id;\n          console.log(\"QuizPlayer -> onClickOption(); Selected Flag :\" + JSON.stringify(selectedChoice));\n        }\n      }\n\n      question.choices.choice[selectedChoiceIndex].attempted = \"1\";\n\n      if (question.choices.choice[correctChoiceIndex].id == question.choices.choice[selectedChoiceIndex].id) {\n        question.choices.choice[selectedChoiceIndex].flag = true;\n        _showConfetti = true;\n      } else {\n        question.choices.choice[selectedChoiceIndex].flag = false;\n        question.choices.choice[correctChoiceIndex].flag = true;\n      }\n\n      this.setState({\n        showLoading: false,\n        showConfettii: _showConfetti\n      }); //setInterval(this.next(question.questionnumber), 2000);\n\n      setTimeout(() => {\n        this.next(question.questionnumber);\n      }, 1000);\n      /*setInterval(function() {        \r\n        console.log(\"QuizPlayer -> onClickOption(); nextQuestion... \");\r\n        this.next(question.questionnumber);\r\n      },2000);*/\n    }\n  }\n\n  next(questionNumber) {\n    console.log(\"QuizPlayer -> next()... \");\n\n    if (this.state.testdata.question.runningquestionnumber >= this.state.testdata.totalQuestions) {\n      console.log(\"QuizPlayer -> next(); FINISH... \");\n      this.finish();\n    } else {\n      this.goNext(questionNumber, 0);\n    }\n  }\n\n  goNext(questionNumber, stateId) {\n    console.log(\"QuizPlayer -> goNext()... \");\n    let stateName = stateId == 0 ? \"next\" : stateId == 1 ? \"mark\" : \"\";\n    let currentSectionIndex = this.state.testdata.currentSectionIndex;\n    let sectionData = this.state.testdata.sectionDataStore.data[currentSectionIndex]; //let questionIndex=sectionData.sectionQuestionIndex;\n\n    let questionIndex = this.state.testdata.questionDataStore.data[questionNumber].questionIndex; //this.sections[currentSectionIndex].questions.question[questionIndex].marked=\"0\";\n\n    if (this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].stateid == \"1\") {\n      this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].markstatus = \"reset\";\n    }\n\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].stateid = stateId; //console.log(this.question)\n\n    if (!this.isNumber(this.state.testdata.question.textanswer) && this.state.testdata.question.textanswer == false) {\n      this.state.testdata.question.textanswer = \"\";\n    }\n    /*if(this.question.questioncategory==\"0\" || this.question.questioncategory==\"4\" || this.question.questioncategory==\"5\"){\r\n        let value=document.getElementById(\"answer\").value;\r\n        this.question.textanswer=value;\r\n        this.questionDataStore.data[this.question.questionnumber].textualanswer=value;\r\n    }*/\n\n\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].state = stateName;\n    this.processAttemptedQuestions(stateName);\n    questionIndex++;\n    let sectionCount = this.state.testdata.sections.length;\n\n    if (questionIndex >= this.state.testdata.sections[currentSectionIndex].questions.question.length) {\n      if (this.state.testdata.sectionaldistribution == 0) {\n        if (currentSectionIndex < sectionCount - 1) {\n          currentSectionIndex++;\n          this.state.testdata.currentSectionIndex = currentSectionIndex;\n          questionIndex = 0;\n          this.state.testdata.currentTab = currentSectionIndex;\n        } else {\n          currentSectionIndex = 0;\n          this.state.testdata.currentSectionIndex = currentSectionIndex;\n          questionIndex = 0;\n          this.state.testdata.currentTab = currentSectionIndex;\n        }\n      }\n\n      if (this.state.testdata.sectionaldistribution == 1) {\n        this.state.testdata.currentSectionIndex = currentSectionIndex;\n        questionIndex = 0;\n        this.state.testdata.currentTab = currentSectionIndex;\n      }\n    }\n\n    this.state.testdata.sectionDataStore.data[currentSectionIndex].sectionQuestionIndex = questionIndex;\n    this.state.testdata.question = this.state.testdata.sections[currentSectionIndex].questions.question[questionIndex];\n    this.state.testdata.question.visited = \"1\";\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].attempted = 1; // first question always in READY TO ATTEMPT mode i.e. 1\n\n    if (!this.isNumber(this.state.testdata.question.textanswer) && this.state.testdata.question.textanswer == false) {\n      this.state.testdata.question.textanswer = \"\";\n    }\n\n    if (this.state.testdata.question.questioncategory == \"0\" || this.state.testdata.question.questioncategory == \"4\" || this.state.testdata.question.questioncategory == \"5\") {\n      /*if(this.questionDataStore.data[this.question.questionnumber].textualanswer==\"false\"){\r\n        document.getElementById(\"answer\").value=\"\";\r\n        }\r\n        else{\r\n        document.getElementById(\"answer\").value=this.questionDataStore.data[this.question.questionnumber].textualanswer;\r\n        }*/\n\n      /*if(document.getElementById(\"answer\")!=undefined) {\r\n        (<HTMLInputElement>document.getElementById(\"answer\")).value=this.question.textanswer;\r\n      }*/\n    }\n\n    this.state.testdata.currentSection = this.state.testdata.sections[currentSectionIndex];\n    this.state.testdata.calculatorMode = this.state.testdata.currentSection.calculatortype;\n    this.state.testdata.choicetype = this.state.testdata.currentSection.choicetype; //this.isLoading=false;\n    //this.loadMathJax();\n  }\n\n  processAttemptedQuestions(state) {\n    console.log(\"QuizPlayer -> processAttemptedQuestions()... \");\n    let presentTime = new Date().getTime(); // Calculate the difference in milliseconds\n\n    let timeDifference = presentTime - this.state.testdata.startTime;\n    let seconds = Math.round(parseInt(timeDifference) / 1000);\n    this.state.testdata.startTime = presentTime;\n    let currentQuestion = this.state.testdata.question;\n\n    if (currentQuestion == undefined) {\n      return;\n    }\n\n    let attemptedChoices = [];\n\n    if (this.state.testdata.question.questioncategory == \"1\" || this.state.testdata.question.questioncategory == \"26\") {\n      // mcq\n      let choices = currentQuestion.choices;\n\n      for (let index in choices.choice) {\n        if (choices.choice[index].attempted == \"1\") {\n          attemptedChoices.push(choices.choice[index].id);\n        }\n      }\n    }\n    /*if(this.state.testdata.question.questioncategory==\"2\"){ // mtf\r\n        //console.log(\"mtf\")\r\n        let choices=currentQuestion.choices;\r\n        for(let index in choices.choice){\r\n          let matches=choices.choice[index].matches;\r\n          let selectedMatches=\"\";\r\n          for(let matchIndex in matches.match){\r\n            //console.log(matchIndex+\"=\"+matches.match[matchIndex].attempted)\r\n            if(matches.match[matchIndex].attempted==true){\r\n              //console.log(\"yes\")\r\n              if(selectedMatches.length>0){\r\n                selectedMatches+=\";\";\r\n              }\r\n              selectedMatches+=matches.match[matchIndex].id;\r\n            }\r\n          }\r\n          if(selectedMatches.length>0){\r\n            attemptedChoices.push(choices.choice[index].id+\":\"+selectedMatches);\r\n          }\r\n        }\r\n        //console.log(attemptedChoices)\r\n    }*/\n    //this.choicetype;\n    //console.log(attemptedChoices)\n\n\n    let summedTimeSpent = parseInt(this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken) + seconds;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].sectionid = currentQuestion.questionsectionid;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptid = currentQuestion.attemptid;\n\n    if (this.state.testdata.question.questioncategory == \"1\" || this.state.testdata.question.questioncategory == \"26\") {\n      this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptedchoices = attemptedChoices;\n    }\n    /*if(this.state.testdata.question.questioncategory==\"2\"){\r\n      this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptedchoices=attemptedChoices;\r\n    }*/\n\n\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken = summedTimeSpent;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].currenttimetaken = seconds;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].state = state;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attempted = 1;\n    /*if(this.state.testdata.question.questioncategory==\"0\" || this.question.questioncategory==\"4\" || this.question.questioncategory==\"5\"){\r\n        this.state.testdata.questionDataStore.data[this.question.questionnumber].textualanswer=currentQuestion.textanswer;\r\n    }*/\n\n    let currentAttempted = [];\n    let toBeSubmittedIndex = 0;\n\n    for (let failedIndex in this.state.testdata.questionDataStore.data) {\n      if (this.state.testdata.questionDataStore.data[failedIndex].attempted == 1) {\n        currentAttempted[toBeSubmittedIndex] = this.state.testdata.questionDataStore.data[failedIndex];\n        toBeSubmittedIndex++;\n      }\n    }\n\n    if (currentAttempted.length >= 5) {\n      this.connectionError();\n    } //console.log(currentAttempted);\n\n\n    console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> currentAttempted :  \" + JSON.stringify(currentAttempted));\n    ApiService.submitTestData(currentAttempted).then(res => {\n      //SuccessCB\n      //console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Response :  \"+JSON.stringify(res));\n      let respData = res.data;\n      console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Response :  \" + JSON.stringify(respData));\n      /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\n\n      this.state.testdata.syncCounter = 0;\n\n      if (respData.status == 1 || respData.status == 2) {\n        // server responded with NO ERRORS\n        for (let updateIndex in currentAttempted) {\n          // if server responded i.e. submitted data saved successfully , change currentAttempts status to ATTEMPTED STATUS as 2\n          this.state.testdata.questionDataStore.data[currentAttempted[updateIndex].questionnumber].attempted = 2;\n        }\n\n        if (respData.status == 2) {\n          this.state.testdata.publishResultLater = 2;\n          this.state.testdata.publishResultLaterMessage = \"<br/>We will publish the result soon.\";\n        } else {\n          this.state.testdata.publishResultLater = 0;\n          this.state.testdata.publishResultLaterMessage = \"\";\n        }\n      }\n\n      if (respData.status == 0) {\n        // server responded with SOME ERRORS\n        for (let updateIndex in currentAttempted) {\n          // if server responded i.e. submitted data saved successfully , change currentAttempts status to ATTEMPTED STATUS as 1\n          this.state.testdata.questionDataStore.data[currentAttempted[updateIndex].questionnumber].attempted = 1;\n        }\n      }\n    }, error => {\n      //ErrorCB\n      console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Connection Error : \" + Config.CONNECTION_ERROR);\n      this.state.testdata.syncCounter++;\n    });\n  }\n\n  finish() {\n    console.log(\"QuizPlayer -> finish(); Finish Quiz...\");\n    ApiService.checkServer(this.state.enquiryId).then(res => {\n      //SuccessCB\n      //this.isLoading=false;    \n      let respData = res.data;\n      console.log(\"QuizPlayer -> finish(); Response :  \" + JSON.stringify(respData));\n      /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\n\n      if (respData.status == 1) {\n        let finishMode = \"finish\";\n\n        if (this.state.testdata.timeover == \"1\") {\n          finishMode = \"autofinish\";\n        }\n\n        this.done = true; //this.stopCountdown();\n\n        this.processAttemptedQuestions(finishMode);\n        this.state.testdata.showcancel = \"0\";\n\n        if (this.state.testdata.timeover == \"1\") {\n          this.timeOverConfirm();\n        } else {\n          this.confirm();\n        }\n      }\n    }, error => {\n      //ErrorCB\n      console.log(\"QuizPlayer -> finish();Connection Error : \" + Config.CONNECTION_ERROR);\n      this.state.testdata.syncCounter++;\n\n      if (this.state.testdata.syncCounter >= 1) {\n        this.connectionError();\n      }\n    });\n  }\n  /*update test remaining time periodically*/\n\n\n  sync() {\n    console.log(\"QuizPlayer -> sync();\");\n    let presentTime = new Date().getTime(); // Calculate the difference in milliseconds\n\n    let timeDifference = presentTime - this.state.testdata.startTime;\n    let seconds = Math.round(parseInt(timeDifference) / 1000);\n    this.state.testdata.startTime = presentTime;\n    let currentQuestion = this.state.testdata.question;\n\n    if (currentQuestion == undefined) {\n      return;\n    }\n\n    let summedTimeSpent = parseInt(this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken) + seconds;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].sectionid = currentQuestion.questionsectionid;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptid = currentQuestion.attemptid;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken = summedTimeSpent;\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].currenttimetaken = seconds;\n    let currentAttempted = [];\n    let toBeSubmittedIndex = 0;\n    currentAttempted[toBeSubmittedIndex] = this.state.testdata.questionDataStore.data[currentQuestion.questionnumber];\n    ApiService.syncTime(currentAttempted).then(res => {\n      //SuccessCB\n      let respData = res.data;\n      console.log(\"QuizPlayer -> syncTime(); Response :  \" + JSON.stringify(respData));\n      /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\n\n      this.state.testdata.syncCounter = 0;\n\n      if (respData.status == 2) {\n        this.timeOut();\n      }\n    }, error => {\n      //ErrorCB\n      console.log(\"QuizPlayer -> finish();Connection Error : \" + Config.CONNECTION_ERROR);\n      this.state.testdata.syncCounter++;\n\n      if (this.state.testdata.syncCounter >= 1) {\n        this.connectionError();\n      }\n    });\n  }\n  /*time over and finish the Test*/\n\n\n  timeOut() {\n    this.state.testdata.timeover = \"1\";\n    this.submitTest();\n  }\n\n  submitTest() {\n    console.log(\"QuizPlayer -> submitTest();\");\n    let currentSectionIndex = this.state.testdata.currentSectionIndex;\n\n    if (!this.isLastSection() && this.state.testdata.sectionaldistribution == 1) {\n      this.processAttemptedQuestions(\"endsection\");\n      ApiService.checkServer(this.state.enquiryId).then(res => {\n        //SuccessCB   \n        let respData = res.data;\n        console.log(\"QuizPlayer -> submitTest(); Response :  \" + JSON.stringify(respData));\n        /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\n\n        if (respData.status == 1) {\n          currentSectionIndex++;\n          this.state.testdata.currentSectionIndex = currentSectionIndex;\n          this.state.testdata.testtime = this.sections[this.state.testdata.currentSectionIndex].sectiontesttime; //this.startCountdown(this.state.testdata.testtime);\n\n          this.performancePage = \"performancePage\";\n          this.display = \"1\";\n        }\n      }, error => {\n        //ErrorCB\n        console.log(\"QuizPlayer -> submitTest();Connection Error : \" + Config.CONNECTION_ERROR);\n        this.state.testdata.syncCounter++;\n\n        if (this.state.testdata.syncCounter >= 1) {\n          this.connectionError();\n        }\n      });\n    } else {\n      this.performancePage = \"\";\n      this.finish();\n    }\n  }\n\n  confirm() {\n    console.log(\"QuizPlayer -> confirm();\");\n    swal({\n      title: \"Good job!\",\n      text: \"Your answers have been saved and the Quiz has been submitted successfully.\",\n      //icon: \"success\",\n      button: \"OK\"\n    }).then(value => {\n      console.log(\"Redirect Test Analysis/home...\");\n\n      this._dismiss(1);\n    });\n  }\n  /*time over confirm*/\n\n\n  timeOverConfirm() {\n    console.log(\"QuizPlayer -> timeOverConfirm();\");\n    swal({\n      title: \"Time Out!\",\n      text: \"<span style='color: #e94c42;font-weight: bold;'>The Quiz End Time is over.<span><div style='color: #000;font-weight: normal;'>Your answers have been saved and the quiz has been submitted successfully.</div>\",\n      buttons: \"OK\"\n    }).then(resp => {\n      console.log(\"Redirect Test Analysis/home...\");\n\n      this._dismiss(1);\n    });\n  }\n\n  connectionError() {\n    console.log(\"QuizPlayer -> connectionError();\");\n    swal({\n      title: \"Netwok/Connection Error!\",\n      text: Config.CONNECTION_ERROR,\n      button: \"OK\"\n    }).then(resp => {\n      console.log(\"Connection Error OK Clicked!..\");\n    });\n  }\n\n  forceDismiss() {\n    swal({\n      title: \"Are you sure?\",\n      text: \"You want to quit the quiz?\",\n      //icon: \"info\",\n      buttons: true,\n      dangerMode: true\n    }).then(willQuit => {\n      if (willQuit) {\n        // Yes else No\n        this.done = true; //stops the timer.\n\n        this.sync();\n\n        this._dismiss(0);\n      }\n    });\n  }\n\n  _dismiss(status) {\n    this.done = true; //stops the timer.\n\n    this.props.history.goBack();\n  }\n\n  isLastSection() {\n    return this.sections.length - 1 == this.currentSectionIndex;\n  }\n\n  startQuiz(testBean) {\n    console.log(\"QuizPlayer -> startQuiz()... \" + JSON.stringify(testBean));\n  }\n\n  isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  isEmpty(str) {\n    return !this.isNumber(str) && str.length == 0;\n  }\n\n}\n\nexport { QuizPlayer };","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/quiz/QuizPlayer.jsx"],"names":["React","Component","Container","Row","Col","Card","FontAwesomeIcon","faArrowLeft","faClock","ApiService","ILoader","swal","Config","Confetti","QuizPlayer","constructor","props","console","log","JSON","stringify","CURRENT_PORTLET","location","state","testBean","parse","localStorage","getItem","enquiryId","enrollmentId","message","errorMessage","showLoading","testdata","showConfettii","testRemainingTimeInSeconds","time","timer","done","startTimer","bind","countDown","sync","autoSyncTimer","componentDidMount","init","componentWillUnmount","setState","getOnlineTestData","id","then","res","testData","data","setUp","error","CONNECTION_ERROR","test","autosyncperiod","undefined","setInterval","autoTerminateTest","sectionaldistribution","prematureTermination","prematuretermination","sections","secIndex","section","length","Array","isArray","questions","question","questionJsonArray","push","currentIndex","currentSectionIndex","isNumber","textanswer","sectionDataStore","_sectionDataStore","lastAttemptedSectionId","lastattemptedsectionid","resumeFromSection","totalQuestions","questionDataStore","si","sectionid","parseInt","qi","_question","attemptedChoices","questioncategory","choiceIndex","choices","choice","attempted","textualAnswer","_question1","questionIndex","questionNumber","questionnumber","testid","questionsectionid","enquiryid","enrollmentid","questionid","attemptid","timetaken","timespent","currenttimetaken","attemptedchoices","textualanswer","stateid","markforlater","markstatus","runningquestionnumber","visited","currentSection","testtime","currentTab","resumefrom","resumetime","resumeFrom","questionCount","testJSONObj","name","studentname","studentcode","studentphotopath","showusefuldata","isTodayEndDate","testAutoQuitMessage","importantConstants","instructions","choicetype","calculatortype","Date","getTime","timeLeftVar","secondsToTime","seconds","stopCountdown","clearInterval","timeOut","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","render","_loadingText","renderHeader","renderError","renderBody","renderLoader","class","forceDismiss","renderTimer","history","goBack","__html","statement","map","index","renderChoice","onClickOption","flag","h","m","s","toggleConfetti","selectedChoiceId","_showConfetti","correctChoiceIndex","selectedChoiceIndex","correctChoice","selectedChoice","correctFlag","setTimeout","next","finish","goNext","stateId","stateName","sectionData","processAttemptedQuestions","sectionCount","sectionQuestionIndex","calculatorMode","presentTime","timeDifference","startTime","round","currentQuestion","summedTimeSpent","currentAttempted","toBeSubmittedIndex","failedIndex","connectionError","submitTestData","respData","syncCounter","status","updateIndex","publishResultLater","publishResultLaterMessage","checkServer","finishMode","timeover","showcancel","timeOverConfirm","confirm","syncTime","submitTest","isLastSection","sectiontesttime","performancePage","display","title","text","button","value","_dismiss","buttons","resp","dangerMode","willQuit","startQuiz","n","isNaN","parseFloat","isFinite","isEmpty","str"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Quiz.css\";\r\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft , faClock} from '@fortawesome/free-solid-svg-icons';\r\nimport ApiService from \"../../_services/ApiService\";\r\nimport {ILoader} from './../../_components/iloader/iloader';\r\nimport swal from 'sweetalert';\r\nimport Config from './../../_config/config'\r\nimport Confetti from 'react-dom-confetti';\r\n\r\nclass QuizPlayer extends Component {\r\n  constructor(props) {    \r\n    super(props);\r\n    console.log(\"QuizPlayer -> constructor()... \");\r\n    console.log(\"QuizPlayer -> constructor(); Portlet : \"+JSON.stringify(Config.CURRENT_PORTLET));\r\n    console.log(\"QuizPlayer -> constructor(); testBean : \"+JSON.stringify(this.props.location.state.testBean));\r\n    if(!Config.CURRENT_PORTLET) {\r\n      Config.CURRENT_PORTLET = JSON.parse(localStorage.getItem('portlet'));\r\n    }\r\n    this.state = {\r\n      testBean : this.props.location.state.testBean,\r\n      enquiryId : localStorage.getItem('enquiryId'),\r\n      enrollmentId : 0,\r\n      message: null,\r\n      errorMessage: null,\r\n      showLoading: false,\r\n      testdata: null,\r\n      showConfettii: false,\r\n      testRemainingTimeInSeconds: 0,\r\n      time: {} // Timer\r\n    };\r\n    /* Timer Properties */\r\n    this.timer = 0;\r\n    this.done = false;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n    this.sync = this.sync.bind(this);\r\n    this.autoSyncTimer = 0;\r\n    /* Timer Properties*/\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"QuizPlayer -> componentDidMount()... \");\r\n    this.init();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    \r\n  }\r\n\r\n  init() {\r\n    console.log(\"QuizPlayer -> init()... \"+JSON.stringify(this.state.testBean));\r\n    this.setState({ showLoading: true }, () => {\r\n        ApiService.getOnlineTestData(this.state.testBean.id)\r\n        .then((res) => {\r\n          console.log(\"QuizPlayer -> init(); res : \"+JSON.stringify(res));\r\n          let testData = res.data;\r\n          if(!testData) {\r\n            console.log(\"QuizPlayer -> init() -> No test data found!\");\r\n            this.setState({\r\n              showLoading: false,\r\n              errorMessage: \"No test data found!\"\r\n            });\r\n          }\r\n          else {\r\n            this.setUp(testData);\r\n          }     \r\n          \r\n        },\r\n        error => { //ErrorCB\r\n          console.log(\"QuizPlayer -> init() -> Connection Error : \"+Config.CONNECTION_ERROR);\r\n          this.setState({\r\n            showLoading: false\r\n          });\r\n        });\r\n    });    \r\n  }\r\n\r\n  setUp(data) {\r\n    console.log(\"QuizPlayer -> setUp()...\"+JSON.stringify(data));\r\n    //this.showLoading(\"Initializing...\");\r\n    \r\n\r\n    /*periodically update test remaining time  every autosyncperiod configured in the resource*/\r\n    if(data.test.autosyncperiod!=undefined) {\r\n      this.autoSyncTimer = setInterval(this.sync, data.test.autosyncperiod);\r\n    }\r\n    let autoTerminateTest=\"0\";\r\n    let sectionaldistribution=data.test.sectionaldistribution;\r\n    let prematureTermination=data.test.prematuretermination;\r\n    if(prematureTermination == 0 && sectionaldistribution == 1) { // disable Finish button\r\n      autoTerminateTest=\"1\";\r\n    }\r\n    let sections=[];\r\n    for(let secIndex=0; secIndex<data.test.sections.section.length-1; secIndex++) {\r\n      let section= data.test.sections.section[secIndex];\r\n      /*Creating JSON Array(question) when there is single JSON Object(question)*/\r\n      if(!(Array.isArray(section.questions.question))) {\r\n        let questionJsonArray = [];\r\n        questionJsonArray.push(section.questions.question);\r\n        section.questions.question = questionJsonArray;\r\n      }\r\n      sections.push(section);\r\n    }\r\n\r\n    console.log(\"sections : \"+JSON.stringify(sections));\r\n    let currentIndex=0;\r\n    let currentSectionIndex=0;\r\n    let question=sections[0].questions.question[currentIndex];\r\n    console.log(\"QuizPlayer -> setUp(); question <<1>> \"+JSON.stringify(question));\r\n    if( ! this.isNumber(question.textanswer) && question.textanswer==false) {\r\n      question.textanswer=\"\";\r\n    }\r\n    let sectionDataStore={data: []};\r\n    let _sectionDataStore={data: []};\r\n    for(let section in sections) {\r\n      _sectionDataStore.data[section]= {\r\n          \"sectionIndex\":section,\r\n          \"sectionId\":sections[section].id,\r\n          \"sectionQuestionIndex\":0\r\n      }\r\n      sectionDataStore=_sectionDataStore;\r\n    }\r\n    let lastAttemptedSectionId=data.test.lastattemptedsectionid;\r\n    let resumeFromSection;\r\n    let totalQuestions = 0;\r\n    let questionDataStore={data:[]};\r\n    console.log(\"QuizPlayer -> setUp(); Iterating section START...\");\r\n    console.log(\"QuizPlayer -> setUp(); lastAttemptedSectionId : \"+lastAttemptedSectionId);\r\n    for(let si in data.test.sections.section) {\r\n      let section= data.test.sections.section[si];\r\n      if(lastAttemptedSectionId > 0 && lastAttemptedSectionId == section.sectionid){\r\n        console.log(\"QuizPlayer -> setUp(); resumeFromSection : \"+JSON.stringify(resumeFromSection));\r\n        resumeFromSection = section;\r\n        currentSectionIndex = parseInt(si);\r\n      }\r\n      if(!section.sectionid)  // Checking blank Section\r\n          continue;\r\n      for(let qi in section.questions.question) {\r\n        let _question = section.questions.question[qi];\r\n        let attemptedChoices = [];\r\n        if(_question.questioncategory==\"1\" || _question.questioncategory==\"26\") {\r\n          for(let choiceIndex in _question.choices.choice) {\r\n            if(_question.choices.choice[choiceIndex].attempted==\"1\") {\r\n                attemptedChoices.push(_question.choices.choice[choiceIndex].id);\r\n            }\r\n          }\r\n        }\r\n        /*if(_question.questioncategory==\"2\"){ // mtf\r\n          let choices=_question.choices;\r\n          for(let index in choices.choice){\r\n            let matches=choices.choice[index].matches;\r\n            let selectedMatches=\"\";\r\n            for(let matchIndex in matches.match){\r\n              if(matches.match[matchIndex].attempted==\"1\"){\r\n                if(selectedMatches.length>0){\r\n                  selectedMatches+=\";\";\r\n                }\r\n                selectedMatches+=matches.match[matchIndex].id;\r\n              }\r\n            }\r\n            if(selectedMatches.length>0){\r\n              attemptedChoices.push(choices.choice[index].id+\":\"+selectedMatches);\r\n            }\r\n          }\r\n        }*/\r\n        let textualAnswer = \"\";\r\n        /*if(_question.questioncategory==\"0\" || _question.questioncategory==\"4\" ||  _question.questioncategory==\"5\") {\r\n            if(isNumber(_question.textanswer) || _question.textanswer != false) {\r\n              textualAnswer=_question.textanswer;\r\n            }\r\n        }*/\r\n        let _question1 = {\r\n            questionIndex       : qi,\r\n            questionNumber      : _question.questionnumber,\r\n            testid              : this.state.testBean.id,\r\n            sectionid           : _question.questionsectionid,\r\n            enquiryid           : this.state.enquiryId,\r\n            enrollmentid        : this.state.enrollmentId,\r\n            questionnumber      : _question.questionnumber,\r\n            questionid          : _question.id,\r\n            questioncategory    : _question.questioncategory,\r\n            attemptid           : _question.attemptid,\r\n            attempted           : _question.attempted,\r\n            timetaken           : _question.timespent ,\r\n            currenttimetaken    : \"\",\r\n            attemptedchoices    : attemptedChoices,\r\n            textualanswer       : textualAnswer,\r\n            state               : \"\",\r\n            stateid             : _question.markforlater,\r\n            markstatus          : \"\",\r\n            runningquestionnumber: _question.runningquestionnumber\r\n        };\r\n        //questionDataStore.data.push(_question1);\r\n        questionDataStore.data[_question.questionnumber] = _question1;\r\n      }\r\n    }\r\n    console.log(\"QuizPlayer -> setUp(); questionDataStore : \"+JSON.stringify(questionDataStore));\r\n    console.log(\"QuizPlayer -> setUp(); Iterating section END...\");\r\n    console.log(\"QuizPlayer -> setUp(); currentSectionIndex : \"+currentSectionIndex);\r\n    if(!questionDataStore.data[0]){\r\n      console.log(\"QuizPlayer -> setUp(); Removing Empty question\");\r\n      totalQuestions = questionDataStore.data.length-1;\r\n    }\r\n    else {\r\n      totalQuestions = questionDataStore.data.length;\r\n    }\r\n    \r\n    //console.log(questionDataStore);\r\n    questionDataStore.data[question.questionnumber].attempted=1; // first question always in READY TO ATTEMPT mode i.e. 1\r\n    //sections[0].questions.question[0].visited=\"1\";\r\n    question.visited=\"1\";\r\n    //question.marked=questionDataStore.data[question.questionnumber].stateid;\r\n    //console.log(\"currentSectionIndex = \"+currentSectionIndex);\r\n    let currentSection = null;\r\n    let testtime = 0;\r\n    let currentTab = 0;\r\n    if(typeof resumeFromSection !== 'undefined' ) {\r\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection : \"+resumeFromSection);\r\n      currentSection = resumeFromSection;      \r\n      //this.selectTab(currentSectionIndex);\r\n      //console.log(currentSection);\r\n      currentIndex=data.test.resumefrom-1;\r\n      testtime = data.test.resumetime;\r\n      question = sections[currentSectionIndex].questions.question[currentIndex];\r\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection >> currentIndex: \"+currentIndex);\r\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection >> testtime: \"+testtime);\r\n    }\r\n    else {\r\n      console.log(\"QuizPlayer -> setUp(); resumeFromSection else....\"); \r\n      /*start of [ to resume from in case of non-sectional time] */\r\n      let resumeFrom = data.test.resumefrom-1; // rF = 7 ,1s = 6,2s = 6 (12-7 = 5)\r\n      let questionCount = 0;\r\n      for(let si in sections) {\r\n        let section = sections[si];\r\n        questionCount+= section.questions.question.length;\r\n        if(questionCount > resumeFrom ) {\r\n          currentIndex = resumeFrom - ( questionCount - section.questions.question.length);\r\n          currentSection = section;\r\n          question = currentSection.questions.question[currentIndex ];\r\n          currentSectionIndex = parseInt(si);\r\n          currentTab = currentSectionIndex;\r\n          break;\r\n        }\r\n      }\r\n      /* end of [to resume from in case of non-sectional time]*/\r\n      //currentSection=sections[0]; // uncomment this line if [to resume from in case of non-sectional time] has any issue\r\n\r\n      if(sectionaldistribution==1){\r\n        testtime = currentSection.testtime;\r\n      }\r\n      else{\r\n        testtime = data.test.testtime;\r\n      }\r\n    }\r\n\r\n    let testJSONObj = {\r\n      \"syncCounter\":0,\r\n      \"testName\":data.test.name,\r\n      \"studentName\":data.test.studentname,\r\n      \"studentCode\":data.test.studentcode,\r\n      \"studentPhotoPath\":data.test.studentphotopath,\r\n      \"usefulData\":data.test.showusefuldata,\r\n      \"isTodayEndDate\":data.test.isTodayEndDate,\r\n      \"testAutoQuitMessage\":data.test.testAutoQuitMessage,\r\n      \"importantConstants\":data.test.importantConstants,\r\n      \"sectionaldistribution\":sectionaldistribution,\r\n      \"prematureTermination\":prematureTermination,\r\n      \"autosyncperiod\":data.test.autosyncperiod,\r\n      \"instructions\": data.test.instructions,\r\n      \"autoTerminateTest\":autoTerminateTest,\r\n      \"sections\":sections,\r\n      \"currentIndex\":currentIndex,\r\n      \"currentSectionIndex\":currentSectionIndex,\r\n      \"question\":question,\r\n      \"sectionDataStore\":sectionDataStore,\r\n      \"lastAttemptedSectionId\":lastAttemptedSectionId,\r\n      \"resumeFromSection\":resumeFromSection,\r\n      \"totalQuestions\":totalQuestions,\r\n      \"questionDataStore\":questionDataStore,\r\n      \"currentSection\":currentSection,\r\n      \"testtime\":testtime,\r\n      \"currentTab\":currentTab,\r\n      \"choicetype\":currentSection.choicetype,\r\n      \"calculatorMode\":currentSection.calculatortype,\r\n      \"startTime\":new Date().getTime(),\r\n      \"display\":1\r\n    }\r\n\r\n    console.log(\"QuizPlayer -> setUp();  Question : \"+JSON.stringify(testJSONObj.question));\r\n    console.log(\"QuizPlayer -> setUp(); Test time : \"+testtime);\r\n    let testRemainingTimeInSeconds = testtime/1000;\r\n    console.log(\"QuizPlayer -> setUp(); testRemainingTimeInSeconds \"+ testRemainingTimeInSeconds);\r\n    let timeLeftVar = this.secondsToTime(testRemainingTimeInSeconds);\r\n    this.setState({\r\n      showLoading: false,\r\n      testdata : testJSONObj,\r\n      testRemainingTimeInSeconds : testRemainingTimeInSeconds,\r\n      time: timeLeftVar\r\n    });\r\n\r\n    console.log(\"QuizPlayer -> setUp(); Test Data : \"+JSON.stringify(testJSONObj));\r\n    \r\n    this.startTimer();\r\n    \r\n    //this.loadMathJax();\r\n  }\r\n\r\n\r\n  /* -----Timer Methods Start----- */\r\n  startTimer() {\r\n    console.log(\"QuizPlayer -> startTimer()... \");\r\n    if (this.timer == 0 && this.state.testRemainingTimeInSeconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    //console.log(\"QuizPlayer -> countDown()... \"+this.done);\r\n    // Remove one second, set state so a re-render happens.\r\n    let seconds = this.state.testRemainingTimeInSeconds - 1;\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      testRemainingTimeInSeconds: seconds,\r\n    });\r\n    \r\n    // Check if we're at zero.\r\n    if (seconds == 0  || this.done == true) { \r\n      //clearInterval(this.timer);\r\n      //alert(\"Timer stop!...\");\r\n      this.stopCountdown();       \r\n    }\r\n  }\r\n\r\n  stopCountdown() {\r\n    console.log(\"QuizPlayer -> stopCountdown();\");\r\n    if(this.timer) {\r\n      clearInterval(this.timer);\r\n      this.timer= undefined;\r\n    }\r\n    if(this.autoSyncTimer) {\r\n      clearInterval(this.autoSyncTimer);\r\n    }\r\n    \r\n    if(!this.done) {\r\n      this.timeOut();\r\n    }\r\n  };\r\n\r\n  secondsToTime(secs ){\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      \"h\": hours<10?\"0\"+hours:hours,\r\n      \"m\": minutes<10?\"0\"+minutes:minutes,\r\n      \"s\": seconds<10?\"0\"+seconds:seconds\r\n    };\r\n    return obj;\r\n  }\r\n\r\n\r\n  /* -----Timer Methods END----- */\r\n\r\n  \r\n  render() {\r\n    const _loadingText = 'Please wait...';\r\n    return (\r\n      <>\r\n        <Container fluid>\r\n          {this.renderHeader()}\r\n          {this.state.errorMessage && this.renderError()}\r\n          {!this.state.errorMessage && this.renderBody()}\r\n          {this.renderLoader()}          \r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderHeader() {\r\n    //console.log(\"QuizPlayer -> renderHeader()... \");\r\n    return (\r\n      <div className={`ilearn-plain-header ${Config.CURRENT_PORTLET.class}`}>\r\n        <div className=\"ilearn-item-block \">\r\n          { this.state.testdata && \r\n            <>\r\n            <div className=\"quiz-player-back\" onClick={() => this.forceDismiss()}>\r\n              <FontAwesomeIcon icon={ faArrowLeft } />\r\n            </div>\r\n            <h4 className=\"quiz-header\">{this.state.testBean.name}</h4>\r\n            <div className=\"quiz-player-timer\">{this.renderTimer()}</div>\r\n            </>\r\n          }\r\n          {\r\n            !this.state.testdata && \r\n            <div className=\"quiz-player-back\" onClick={() => this.props.history.goBack()}>\r\n              <FontAwesomeIcon icon={ faArrowLeft } />\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderBody() {\r\n    //console.log(\"QuizPlayer -> renderBody()... \");\r\n    return (      \r\n      <>\r\n      {\r\n        this.state.testdata && this.state.testdata.question && \r\n        <div className=\"ilearn-padding-both-sides ilearn-padding-top\">\r\n          <Card>\r\n          <Card.Header as=\"h5\" className=\"question-number\">Q :{this.state.testdata.question.runningquestionnumber}/{this.state.testdata.totalQuestions}               \r\n          </Card.Header>\r\n            <Card.Body>\r\n                <div className=\"ilearn-item-block \">\r\n                    <p className=\"ilearn-item-inner card-text\" dangerouslySetInnerHTML={{__html: this.state.testdata.question.statement}}>\r\n                    </p>\r\n                </div>\r\n                {\r\n                    this.state.testdata.question.choices.choice.map((choice, index) => {\r\n                        return ( \r\n                          this.renderChoice(choice)\r\n                        );\r\n                    })\r\n                }\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      }\r\n      </>\r\n    );\r\n    \r\n  }\r\n\r\n  renderChoice(choice) {\r\n    //console.log(\"QuizPlayer -> renderChoice()... \");\r\n    return (\r\n      <>\r\n        <div className=\"ilearn-padding-both-sides ilearn-padding-top\">\r\n          <Card onClick={() => this.onClickOption(this.state.testdata.question, choice.id)}>\r\n            <Card.Body className={`question-choice  ${choice.flag==true? 'correct' : choice.flag==false?'wrong':'normal'}`}>\r\n                <div className=\"ilearn-item-block \">\r\n                    <p className=\"ilearn-item-inner card-text question-choice-item-inner\" dangerouslySetInnerHTML={{__html: choice.choice}}>\r\n                    </p>\r\n                </div>                \r\n            </Card.Body>\r\n          </Card>          \r\n              <Confetti active={ choice.flag && this.state.showConfettii } />\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderLoader() {\r\n    //console.log(\"QuizPlayer -> renderLoader()... \");\r\n    const _loadingText = 'Please wait...';\r\n    return (\r\n        <ILoader\r\n          loadingText={_loadingText}\r\n          isShow={this.state.showLoading}\r\n        >\r\n        </ILoader>\r\n    )\r\n  }\r\n\r\n  renderTimer() {\r\n    //console.log(\"QuizPlayer -> renderTimer()... \");\r\n    return ( \r\n        <span className=\"float-right\">\r\n            <FontAwesomeIcon icon={ faClock }/> {this.state.time.h}:{this.state.time.m}:{this.state.time.s}\r\n        </span>\r\n    );\r\n  }\r\n\r\n  renderError() {\r\n    return (\r\n        <> \r\n          <br/>        \r\n          <div className=\"alert alert-danger text-center\">\r\n              <h4 className=\"alert-heading\">Error!</h4>\r\n              <p>{this.state.errorMessage}</p>\r\n          </div>\r\n        </>\r\n    )    \r\n  }\r\n\r\n  toggleConfetti() {\r\n    console.log(\"QuizPlayer -> toggleConfetti()... \");\r\n    this.setState(state => ({ showConfettii: !state.showConfettii }));\r\n  }\r\n  \r\n  onClickOption(question, selectedChoiceId) {\r\n    console.log(\"QuizPlayer -> onClickOption(); selectedChoiceId: \"+selectedChoiceId);\r\n    if(!this.state.showLoading) { //For Blocking multiple clicks on option buttons.      \r\n      this.setState({\r\n        showLoading: true\r\n      });\r\n      let _showConfetti = false;\r\n      let correctChoiceIndex = null;\r\n      let selectedChoiceIndex = null;\r\n      let correctChoice = null;\r\n      let selectedChoice = null;\r\n      for(let choiceIndex in question.choices.choice) {\r\n        if(question.choices.choice[choiceIndex].correctFlag==1) {\r\n          correctChoiceIndex = choiceIndex;\r\n          correctChoice = question.choices.choice[choiceIndex];\r\n          console.log(\"QuizPlayer -> onClickOption(); Correct Flag :\"+JSON.stringify(correctChoice))\r\n        }\r\n        if(question.choices.choice[choiceIndex].id==selectedChoiceId) {\r\n          selectedChoiceIndex = choiceIndex;\r\n          selectedChoice = question.choices.choice[choiceIndex].id;\r\n          console.log(\"QuizPlayer -> onClickOption(); Selected Flag :\"+JSON.stringify(selectedChoice))\r\n        }\r\n      }\r\n      question.choices.choice[selectedChoiceIndex].attempted=\"1\";\r\n      if(question.choices.choice[correctChoiceIndex].id == question.choices.choice[selectedChoiceIndex].id) {\r\n          question.choices.choice[selectedChoiceIndex].flag= true; \r\n          _showConfetti = true;         \r\n      }\r\n      else {\r\n        question.choices.choice[selectedChoiceIndex].flag= false;        \r\n        question.choices.choice[correctChoiceIndex].flag = true;\r\n      }\r\n      this.setState({\r\n        showLoading: false,\r\n        showConfettii: _showConfetti\r\n      });\r\n      \r\n      //setInterval(this.next(question.questionnumber), 2000);\r\n      setTimeout(() => {\r\n        this.next(question.questionnumber);\r\n      }, 1000);\r\n      /*setInterval(function() {        \r\n        console.log(\"QuizPlayer -> onClickOption(); nextQuestion... \");\r\n        this.next(question.questionnumber);\r\n      },2000);*/\r\n      \r\n    }\r\n  }\r\n\r\n  next(questionNumber) {\r\n    console.log(\"QuizPlayer -> next()... \");\r\n    if(this.state.testdata.question.runningquestionnumber >= this.state.testdata.totalQuestions) {\r\n      console.log(\"QuizPlayer -> next(); FINISH... \");\r\n      this.finish();\r\n    }\r\n    else {\r\n      this.goNext(questionNumber,0);\r\n    }\r\n  }\r\n\r\n  goNext(questionNumber,stateId) {\r\n    console.log(\"QuizPlayer -> goNext()... \");\r\n    let stateName=stateId==0 ? \"next\" : stateId==1 ? \"mark\" : \"\";\r\n    let currentSectionIndex=this.state.testdata.currentSectionIndex ;\r\n    let sectionData=this.state.testdata.sectionDataStore.data[currentSectionIndex];\r\n    //let questionIndex=sectionData.sectionQuestionIndex;\r\n    let questionIndex=this.state.testdata.questionDataStore.data[questionNumber].questionIndex;\r\n    //this.sections[currentSectionIndex].questions.question[questionIndex].marked=\"0\";\r\n    if(this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].stateid==\"1\"){\r\n      this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].markstatus=\"reset\";\r\n    }\r\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].stateid=stateId;\r\n    //console.log(this.question)\r\n    if( ! this.isNumber(this.state.testdata.question.textanswer) && this.state.testdata.question.textanswer==false){\r\n      this.state.testdata.question.textanswer=\"\";\r\n    }\r\n    /*if(this.question.questioncategory==\"0\" || this.question.questioncategory==\"4\" || this.question.questioncategory==\"5\"){\r\n        let value=document.getElementById(\"answer\").value;\r\n        this.question.textanswer=value;\r\n        this.questionDataStore.data[this.question.questionnumber].textualanswer=value;\r\n    }*/\r\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].state=stateName;\r\n    this.processAttemptedQuestions(stateName);\r\n    questionIndex++;\r\n    let sectionCount=this.state.testdata.sections.length;\r\n    if(questionIndex >= this.state.testdata.sections[currentSectionIndex].questions.question.length) {\r\n      if(this.state.testdata.sectionaldistribution==0){\r\n        if(currentSectionIndex<sectionCount-1){\r\n          currentSectionIndex++;\r\n          this.state.testdata.currentSectionIndex=currentSectionIndex;\r\n          questionIndex=0;\r\n          this.state.testdata.currentTab = currentSectionIndex;\r\n        }\r\n        else {\r\n          currentSectionIndex=0;\r\n          this.state.testdata.currentSectionIndex=currentSectionIndex;\r\n          questionIndex=0;\r\n          this.state.testdata.currentTab = currentSectionIndex;\r\n        }\r\n      }\r\n      if(this.state.testdata.sectionaldistribution==1) {\r\n        this.state.testdata.currentSectionIndex=currentSectionIndex;\r\n        questionIndex=0;\r\n        this.state.testdata.currentTab = currentSectionIndex;\r\n      }\r\n    }\r\n    this.state.testdata.sectionDataStore.data[currentSectionIndex].sectionQuestionIndex=questionIndex;\r\n    this.state.testdata.question=this.state.testdata.sections[currentSectionIndex].questions.question[questionIndex];\r\n    this.state.testdata.question.visited=\"1\";\r\n    this.state.testdata.questionDataStore.data[this.state.testdata.question.questionnumber].attempted=1; // first question always in READY TO ATTEMPT mode i.e. 1\r\n    if( ! this.isNumber(this.state.testdata.question.textanswer) && this.state.testdata.question.textanswer==false) {\r\n      this.state.testdata.question.textanswer=\"\";\r\n    }\r\n    if(this.state.testdata.question.questioncategory==\"0\" || this.state.testdata.question.questioncategory==\"4\" || this.state.testdata.question.questioncategory==\"5\") {\r\n      /*if(this.questionDataStore.data[this.question.questionnumber].textualanswer==\"false\"){\r\n        document.getElementById(\"answer\").value=\"\";\r\n        }\r\n        else{\r\n        document.getElementById(\"answer\").value=this.questionDataStore.data[this.question.questionnumber].textualanswer;\r\n        }*/\r\n      /*if(document.getElementById(\"answer\")!=undefined) {\r\n        (<HTMLInputElement>document.getElementById(\"answer\")).value=this.question.textanswer;\r\n      }*/\r\n\r\n    }\r\n    this.state.testdata.currentSection=this.state.testdata.sections[currentSectionIndex];\r\n    this.state.testdata.calculatorMode=this.state.testdata.currentSection.calculatortype;\r\n    this.state.testdata.choicetype=this.state.testdata.currentSection.choicetype;\r\n    //this.isLoading=false;\r\n    //this.loadMathJax();\r\n  }\r\n\r\n  processAttemptedQuestions(state) {\r\n    console.log(\"QuizPlayer -> processAttemptedQuestions()... \");\r\n    let presentTime=  new Date().getTime();\r\n    // Calculate the difference in milliseconds\r\n    let timeDifference = presentTime - this.state.testdata.startTime;\r\n    let seconds = Math.round(parseInt(timeDifference)/1000);\r\n    this.state.testdata.startTime= presentTime;\r\n    let currentQuestion= this.state.testdata.question;\r\n    if(currentQuestion==undefined){\r\n      return;\r\n    }\r\n    let attemptedChoices=[];\r\n    if(this.state.testdata.question.questioncategory==\"1\" || this.state.testdata.question.questioncategory==\"26\") { // mcq\r\n      let choices=currentQuestion.choices;\r\n      for(let index in choices.choice) {\r\n        if(choices.choice[index].attempted==\"1\") {\r\n          attemptedChoices.push(choices.choice[index].id);\r\n        }\r\n      }\r\n    }\r\n    /*if(this.state.testdata.question.questioncategory==\"2\"){ // mtf\r\n        //console.log(\"mtf\")\r\n        let choices=currentQuestion.choices;\r\n        for(let index in choices.choice){\r\n          let matches=choices.choice[index].matches;\r\n          let selectedMatches=\"\";\r\n          for(let matchIndex in matches.match){\r\n            //console.log(matchIndex+\"=\"+matches.match[matchIndex].attempted)\r\n            if(matches.match[matchIndex].attempted==true){\r\n              //console.log(\"yes\")\r\n              if(selectedMatches.length>0){\r\n                selectedMatches+=\";\";\r\n              }\r\n              selectedMatches+=matches.match[matchIndex].id;\r\n            }\r\n          }\r\n          if(selectedMatches.length>0){\r\n            attemptedChoices.push(choices.choice[index].id+\":\"+selectedMatches);\r\n          }\r\n        }\r\n        //console.log(attemptedChoices)\r\n    }*/\r\n    //this.choicetype;\r\n    //console.log(attemptedChoices)\r\n    let summedTimeSpent=parseInt(this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken) + seconds;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].sectionid=currentQuestion.questionsectionid;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptid=currentQuestion.attemptid;\r\n    if(this.state.testdata.question.questioncategory==\"1\" || this.state.testdata.question.questioncategory==\"26\") {\r\n      this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptedchoices=attemptedChoices;\r\n    }\r\n    /*if(this.state.testdata.question.questioncategory==\"2\"){\r\n      this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptedchoices=attemptedChoices;\r\n    }*/\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken=summedTimeSpent;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].currenttimetaken=seconds;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].state=state;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attempted=1;\r\n    /*if(this.state.testdata.question.questioncategory==\"0\" || this.question.questioncategory==\"4\" || this.question.questioncategory==\"5\"){\r\n        this.state.testdata.questionDataStore.data[this.question.questionnumber].textualanswer=currentQuestion.textanswer;\r\n    }*/\r\n    let currentAttempted=[] ;\r\n    let toBeSubmittedIndex=0;\r\n    for( let failedIndex in this.state.testdata.questionDataStore.data){\r\n      if(this.state.testdata.questionDataStore.data[failedIndex].attempted==1){\r\n        currentAttempted[toBeSubmittedIndex]=this.state.testdata.questionDataStore.data[failedIndex];\r\n        toBeSubmittedIndex++;\r\n      }\r\n    }\r\n    if(currentAttempted.length>=5){\r\n       this.connectionError();\r\n    }\r\n    //console.log(currentAttempted);\r\n\r\n    console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> currentAttempted :  \"+JSON.stringify(currentAttempted));\r\n    ApiService.submitTestData(currentAttempted)\r\n      .then(res => { //SuccessCB\r\n        //console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Response :  \"+JSON.stringify(res));\r\n        let respData = res.data;\r\n        console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Response :  \"+JSON.stringify(respData));\r\n        /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\r\n        this.state.testdata.syncCounter=0;\r\n        if(respData.status==1 || respData.status==2 ) { // server responded with NO ERRORS\r\n          for(let updateIndex in currentAttempted) {   // if server responded i.e. submitted data saved successfully , change currentAttempts status to ATTEMPTED STATUS as 2\r\n            this.state.testdata.questionDataStore.data[currentAttempted[updateIndex].questionnumber].attempted=2;\r\n          }\r\n          if(respData.status==2){\r\n            this.state.testdata.publishResultLater=2;\r\n            this.state.testdata.publishResultLaterMessage=\"<br/>We will publish the result soon.\";\r\n          }\r\n          else{\r\n            this.state.testdata.publishResultLater=0;\r\n            this.state.testdata.publishResultLaterMessage=\"\";\r\n          }\r\n        }\r\n        if(respData.status==0){ // server responded with SOME ERRORS\r\n          for(let updateIndex in currentAttempted){   // if server responded i.e. submitted data saved successfully , change currentAttempts status to ATTEMPTED STATUS as 1\r\n            this.state.testdata.questionDataStore.data[currentAttempted[updateIndex].questionnumber].attempted=1;\r\n          }\r\n        }  \r\n      },\r\n      error => { //ErrorCB\r\n        console.log(\"QuizPlayer -> processAttemptedQuestions(); submitTestData()-> Connection Error : \"+Config.CONNECTION_ERROR);\r\n        this.state.testdata.syncCounter++;\r\n      }\r\n    );    \r\n  };\r\n\r\n  finish() {\r\n    console.log(\"QuizPlayer -> finish(); Finish Quiz...\");\r\n    ApiService.checkServer(this.state.enquiryId)\r\n      .then(res => { //SuccessCB\r\n        //this.isLoading=false;    \r\n        let respData = res.data;\r\n        console.log(\"QuizPlayer -> finish(); Response :  \"+JSON.stringify(respData));\r\n        /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\r\n        if(respData.status==1) {\r\n          let finishMode=\"finish\";\r\n          if(this.state.testdata.timeover==\"1\") {\r\n            finishMode=\"autofinish\";\r\n          }\r\n          this.done=true;//this.stopCountdown();\r\n          this.processAttemptedQuestions(finishMode);\r\n          this.state.testdata.showcancel=\"0\";\r\n          if(this.state.testdata.timeover==\"1\"){\r\n            this.timeOverConfirm();\r\n          }\r\n          else{\r\n            this.confirm();\r\n          }\r\n        } \r\n      },\r\n      error => { //ErrorCB\r\n        console.log(\"QuizPlayer -> finish();Connection Error : \"+Config.CONNECTION_ERROR);\r\n        this.state.testdata.syncCounter++;\r\n        if(this.state.testdata.syncCounter>=1) {\r\n          this.connectionError();\r\n        }\r\n      }\r\n    );    \r\n  }\r\n\r\n  /*update test remaining time periodically*/\r\n  sync() {\r\n    console.log(\"QuizPlayer -> sync();\");\r\n    let presentTime=  new Date().getTime();\r\n    // Calculate the difference in milliseconds\r\n    let timeDifference = presentTime - this.state.testdata.startTime;\r\n    let seconds = Math.round(parseInt(timeDifference)/1000);\r\n    this.state.testdata.startTime = presentTime;\r\n    let currentQuestion = this.state.testdata.question;\r\n    if(currentQuestion==undefined) {\r\n      return;\r\n    }\r\n    let summedTimeSpent = parseInt(this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken) + seconds;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].sectionid = currentQuestion.questionsectionid;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].attemptid = currentQuestion.attemptid;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].timetaken = summedTimeSpent;\r\n    this.state.testdata.questionDataStore.data[currentQuestion.questionnumber].currenttimetaken = seconds;\r\n    let currentAttempted = [];\r\n    let toBeSubmittedIndex = 0;\r\n    currentAttempted[toBeSubmittedIndex] = this.state.testdata.questionDataStore.data[currentQuestion.questionnumber];\r\n    ApiService.syncTime(currentAttempted)\r\n      .then(res => { //SuccessCB\r\n        let respData = res.data;\r\n        console.log(\"QuizPlayer -> syncTime(); Response :  \"+JSON.stringify(respData));\r\n        /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\r\n        this.state.testdata.syncCounter=0;\r\n        if(respData.status==2) {\r\n          this.timeOut();\r\n        }\r\n      },\r\n      error => { //ErrorCB\r\n        console.log(\"QuizPlayer -> finish();Connection Error : \"+Config.CONNECTION_ERROR);\r\n        this.state.testdata.syncCounter++;\r\n        if(this.state.testdata.syncCounter>=1) {\r\n          this.connectionError();\r\n        }\r\n      }\r\n    ); \r\n  }\r\n\r\n  /*time over and finish the Test*/\r\n  timeOut() {\r\n    this.state.testdata.timeover=\"1\";\r\n    this.submitTest();\r\n  }\r\n\r\n  submitTest() {\r\n    console.log(\"QuizPlayer -> submitTest();\");\r\n    let currentSectionIndex=this.state.testdata.currentSectionIndex;\r\n    if( ! this.isLastSection() && this.state.testdata.sectionaldistribution==1) {\r\n      this.processAttemptedQuestions(\"endsection\");\r\n      ApiService.checkServer(this.state.enquiryId)\r\n      .then(res => { //SuccessCB   \r\n        let respData = res.data;\r\n        console.log(\"QuizPlayer -> submitTest(); Response :  \"+JSON.stringify(respData));\r\n        /*{\"status\":1,\"message\":\"Test data successfully saved.\",\"data\":[]}*/\r\n        if(respData.status==1) {\r\n          currentSectionIndex++;\r\n          this.state.testdata.currentSectionIndex=currentSectionIndex;\r\n          this.state.testdata.testtime = this.sections[this.state.testdata.currentSectionIndex].sectiontesttime;\r\n          //this.startCountdown(this.state.testdata.testtime);\r\n          this.performancePage=\"performancePage\";\r\n          this.display=\"1\"\r\n        }\r\n      },\r\n      error => { //ErrorCB\r\n        console.log(\"QuizPlayer -> submitTest();Connection Error : \"+Config.CONNECTION_ERROR);\r\n        this.state.testdata.syncCounter++;\r\n        if(this.state.testdata.syncCounter>=1) {\r\n          this.connectionError();\r\n        }\r\n      });\r\n    }\r\n    else{\r\n        this.performancePage=\"\";\r\n        this.finish();\r\n    }\r\n  }\r\n\r\n  confirm() {\r\n    console.log(\"QuizPlayer -> confirm();\");    \r\n    swal({\r\n      title: \"Good job!\",\r\n      text: \"Your answers have been saved and the Quiz has been submitted successfully.\",\r\n      //icon: \"success\",\r\n      button: \"OK\",\r\n    })\r\n    .then((value) => {\r\n      console.log(\"Redirect Test Analysis/home...\");\r\n      this._dismiss(1);\r\n    });  \r\n  }\r\n\r\n  /*time over confirm*/\r\n  timeOverConfirm() {\r\n    console.log(\"QuizPlayer -> timeOverConfirm();\");\r\n    swal({\r\n\t\t\ttitle: \"Time Out!\",\r\n\t\t\ttext: \"<span style='color: #e94c42;font-weight: bold;'>The Quiz End Time is over.<span><div style='color: #000;font-weight: normal;'>Your answers have been saved and the quiz has been submitted successfully.</div>\" ,\r\n\t\t\tbuttons: \"OK\",\r\n\t\t\t})\r\n    .then(resp => { \r\n      console.log(\"Redirect Test Analysis/home...\");\r\n      this._dismiss(1);\r\n    });\r\n      \r\n  }\r\n\r\n  connectionError() {\r\n    console.log(\"QuizPlayer -> connectionError();\");\r\n    swal({\r\n\t\t\ttitle: \"Netwok/Connection Error!\",\r\n\t\t\ttext: Config.CONNECTION_ERROR ,\r\n\t\t\tbutton: \"OK\",\r\n\t\t\t})\r\n    .then(resp => { \r\n      console.log(\"Connection Error OK Clicked!..\");\r\n    });  \r\n  }\r\n\r\n  forceDismiss() {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to quit the quiz?\",\r\n      //icon: \"info\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    })\r\n    .then((willQuit) => {\r\n      if (willQuit) { // Yes else No\r\n        this.done=true;  //stops the timer.\r\n        this.sync();\r\n        this._dismiss(0);\r\n      }\r\n    });\r\n  }\r\n\r\n  _dismiss(status) {\r\n    this.done=true;  //stops the timer.\r\n    this.props.history.goBack();   \r\n  } \r\n\r\n  isLastSection() {\r\n    return this.sections.length-1==this.currentSectionIndex;\r\n  }\r\n\r\n  startQuiz(testBean) {\r\n    console.log(\"QuizPlayer -> startQuiz()... \"+JSON.stringify(testBean));\r\n  }\r\n\r\n  isNumber(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  isEmpty(str) {\r\n    return (! this.isNumber(str) && str.length == 0);\r\n  }\r\n\r\n}\r\n\r\nexport {QuizPlayer};\r\n"]},"metadata":{},"sourceType":"module"}
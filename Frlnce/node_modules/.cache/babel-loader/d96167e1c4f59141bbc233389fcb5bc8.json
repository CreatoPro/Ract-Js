{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\today-tests\\\\TodayTests.jsx\";\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { ILoader } from './../../_components/iloader/iloader';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Config from './../../_config/config';\nimport \"./todaytests.css\";\nimport upcoming_icon from \"../../_assets/imgs/edit.png\";\nimport completed_icon from \"../../_assets/imgs/verify.png\";\nimport ApiService from \"../../_services/ApiService\";\nimport swal from 'sweetalert';\n\nclass TodayTests extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openTest = testID => {\n      const portlet = this.state.portlet;\n      var url = '/TestInstructions/' + testID + '?cat=' + portlet.testCategoryIds;\n      window.open(url, 'Start Test', 'height=' + window.screen.height + ',width=' + window.screen.width);\n    };\n\n    console.log(\"TodayTests -> constructor()... \");\n    this.state = {\n      message: null,\n      showLoading: false,\n      portlet: this.props.location.state.portlet,\n      todayTests: null\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"TodayTests -> componentDidMount()... \");\n    this.init();\n  }\n\n  routeChange(path, endDate) {\n    const portlet = this.state.portlet;\n    this.props.history.push({\n      pathname: path,\n      state: {\n        testEndDate: endDate,\n        testCategory: portlet.testCategoryIds\n      }\n    });\n  }\n\n  showAlert(msg) {\n    swal({\n      title: \"Alert\",\n      text: msg,\n      dangerMode: true\n    });\n  }\n\n  init() {\n    //console.log(\"TodayTests -> init()... \");\n    const portlet = this.state.portlet;\n    Config.CURRENT_PORTLET = portlet;\n    let todayTestsConfig = {\n      \"testCategoryIds\": portlet.testCategoryIds,\n      \"numberOfPreviousDays\": portlet.numberOfPreviousDays,\n      \"numberOfFutureDays\": portlet.numberOfFutureDays,\n      \"referenceDate\": portlet.referenceDate,\n      \"testIds\": portlet.testIds\n    };\n    this.setState({\n      showLoading: true\n    }, () => {\n      ApiService.fetchTodayTests(todayTestsConfig).then(res => {\n        this.setState({\n          showLoading: false,\n          todayTests: res.data.data\n        });\n      }, error => {\n        this.setState({\n          showLoading: false\n        });\n        console.log(error);\n        alert(Config.CONNECTION_ERROR_MSG);\n      });\n    });\n  }\n\n  render() {\n    var _todayTests$upcomingT, _todayTests$completed;\n\n    //console.log(\"TodayTests -> render()... \");\n    const portlet = this.state.portlet;\n    const upcoming = /*#__PURE__*/React.createElement(\"img\", {\n      src: upcoming_icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 26\n      }\n    });\n    const completed = /*#__PURE__*/React.createElement(\"img\", {\n      src: completed_icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 27\n      }\n    });\n    const todayTests = JSON.parse(this.state.todayTests);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"today_tests\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: `module-header-step2 ${portlet.class ? portlet.class : 'orange-card'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      onClick: this.props.history.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, portlet.name)), this.state.showLoading ? this.renderLoader() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      defaultActiveKey: \"Upcoming\",\n      id: \"uncontrolled-tab-example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      eventKey: \"Upcoming\",\n      className: \"upcoming\",\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 86\n        }\n      }, upcoming, \" Upcoming\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, todayTests && ((_todayTests$upcomingT = todayTests.upcomingTests) === null || _todayTests$upcomingT === void 0 ? void 0 : _todayTests$upcomingT.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"list-group-item today-test-group ilearn-item-border\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ilearn-item-block \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ilearn-item-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 57\n        }\n      }, item.name), item.startDate && item.startDate != '--' ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 85\n        }\n      }, item.startDate, \" to \", item.endDate, \" \") : \"\"), item.status == \"Coming Soon\" ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.showAlert(\"The test is available between \" + item.startDate + \" - \" + item.endDate),\n        className: `ilearn-btn-right orange-card`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 57\n        }\n      }, \" \", item.status, \" \") : item.status == \"Time Out\" ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.showAlert(\"The test is closed at  \" + item.endDate),\n        className: `ilearn-btn-right orange-card`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 57\n        }\n      }, \" \", item.status, \" \") : /*#__PURE__*/React.createElement(\"button\", {\n        className: `ilearn-btn-right ilearn-blue-btn`,\n        onClick: () => this.openTest(item.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 57\n        }\n      }, item.status)));\n    })))), /*#__PURE__*/React.createElement(Tab, {\n      eventKey: \"Completed\",\n      className: \"completed\",\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 88\n        }\n      }, completed, \" Completed\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    }, todayTests && ((_todayTests$completed = todayTests.completedTests) === null || _todayTests$completed === void 0 ? void 0 : _todayTests$completed.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"list-group-item today-test-group ilearn-item-border\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ilearn-item-block \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ilearn-item-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 61\n        }\n      }, item.name), item.startDate && item.startDate != '--' ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 88\n        }\n      }, item.startDate, \" to \", item.endDate, \" \") : \"\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: `ilearn-btn-right ilearn-green-btn`,\n        onClick: () => this.routeChange('/test-result/' + portlet.testCategoryIds + '/' + item.id, item.endDate),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 61\n        }\n      }, item.status)));\n    })))))))));\n  }\n\n  renderLoader() {\n    console.log(\"TodayTests -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport { TodayTests };","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/today-tests/TodayTests.jsx"],"names":["React","Component","FontAwesomeIcon","faArrowLeft","ILoader","Tabs","Tab","Config","upcoming_icon","completed_icon","ApiService","swal","TodayTests","constructor","props","openTest","testID","portlet","state","url","testCategoryIds","window","open","screen","height","width","console","log","message","showLoading","location","todayTests","componentDidMount","init","routeChange","path","endDate","history","push","pathname","testEndDate","testCategory","showAlert","msg","title","text","dangerMode","CURRENT_PORTLET","todayTestsConfig","numberOfPreviousDays","numberOfFutureDays","referenceDate","testIds","setState","fetchTodayTests","then","res","data","error","alert","CONNECTION_ERROR_MSG","render","upcoming","completed","JSON","parse","class","goBack","name","renderLoader","upcomingTests","map","item","index","startDate","status","id","completedTests","_loadingText"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport {ILoader} from './../../_components/iloader/iloader';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Config from './../../_config/config'\r\nimport \"./todaytests.css\";\r\nimport upcoming_icon from \"../../_assets/imgs/edit.png\";\r\nimport completed_icon from \"../../_assets/imgs/verify.png\";\r\nimport ApiService from \"../../_services/ApiService\";\r\nimport swal from 'sweetalert';\r\n\r\nclass TodayTests extends Component { \r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        console.log(\"TodayTests -> constructor()... \");\r\n        this.state = {\r\n            message: null,\r\n            showLoading: false,\r\n            portlet: this.props.location.state.portlet,\r\n            todayTests: null\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        //console.log(\"TodayTests -> componentDidMount()... \");\r\n        this.init();\r\n    }\r\n\r\n    openTest = (testID) => {\r\n        const portlet = this.state.portlet;\r\n        var url = '/TestInstructions/'+testID+'?cat='+portlet.testCategoryIds;\r\n        window.open(url, 'Start Test', 'height=' + window.screen.height + ',width=' + window.screen.width);\r\n    }\r\n\r\n    routeChange(path,endDate) {\r\n        const portlet = this.state.portlet;\r\n        this.props.history.push( { pathname: path, state: {testEndDate: endDate, testCategory: portlet.testCategoryIds} } );\r\n    }\r\n\r\n    showAlert(msg) {\r\n        swal({\r\n              title: \"Alert\",\r\n              text: msg,\r\n              dangerMode: true,\r\n         });\r\n    }\r\n    \r\n    init() {\r\n        //console.log(\"TodayTests -> init()... \");\r\n        const portlet = this.state.portlet;\r\n        Config.CURRENT_PORTLET = portlet;\r\n        \r\n        let todayTestsConfig = {\r\n            \"testCategoryIds\": portlet.testCategoryIds,\r\n            \"numberOfPreviousDays\": portlet.numberOfPreviousDays,\r\n            \"numberOfFutureDays\": portlet.numberOfFutureDays,\r\n            \"referenceDate\": portlet.referenceDate,\r\n            \"testIds\": portlet.testIds\r\n        }\r\n        \r\n        this.setState({ showLoading: true }, () => {\r\n            ApiService.fetchTodayTests(todayTestsConfig)\r\n            .then((res) => {\r\n                this.setState({\r\n                    showLoading: false,\r\n                    todayTests: res.data.data\r\n                });\r\n            },error => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowLoading: false,\r\n\t\t\t\t});\r\n                console.log(error);\r\n\t\t\t\talert(Config.CONNECTION_ERROR_MSG);\r\n\t\t\t});\r\n          });\r\n    }\r\n    \r\n    render() {\r\n        //console.log(\"TodayTests -> render()... \");\r\n        const portlet = this.state.portlet;  \r\n        const upcoming = <img src={upcoming_icon} />  \r\n        const completed = <img src={completed_icon} />    \r\n        const todayTests = JSON.parse(this.state.todayTests);\r\n\r\n        return (  \r\n            <>\r\n                <div className=\"today_tests\">\r\n                    {                    \r\n                    <>\r\n                    <div className={`module-header-step2 ${portlet.class ? portlet.class : 'orange-card'}`}>\r\n                        <div className=\"back\">\r\n                            <FontAwesomeIcon icon={ faArrowLeft } onClick={this.props.history.goBack} />\r\n                        </div>\r\n                        <h4>{portlet.name}</h4>\r\n                    </div>\r\n                    {\r\n                        this.state.showLoading ? this.renderLoader() : \r\n                        <div className=\"mt50\">\r\n                            <Tabs defaultActiveKey=\"Upcoming\" id=\"uncontrolled-tab-example\">\r\n                                <Tab eventKey=\"Upcoming\" className=\"upcoming\" title={<span>{upcoming} Upcoming</span>}>\r\n                                <ul className=\"list-group\">\r\n                                   {\r\n                                    todayTests && \r\n                                    todayTests.upcomingTests?.map((item, index) => {\r\n                                            return ( \r\n                                                <li className=\"list-group-item today-test-group ilearn-item-border\">\r\n                                                    <div className=\"ilearn-item-block \">\r\n                                                        <div className=\"ilearn-item-inner\">\r\n                                                        <h4>{item.name}</h4>\r\n                                                        {item.startDate &&\r\n                                                            item.startDate !='--' ? <span >{item.startDate} to {item.endDate} </span> : \"\"\r\n                                                        }\r\n                                                        </div>\r\n                                                        {\r\n                                                        item.status==\"Coming Soon\" ?\r\n                                                        <button onClick={() => this.showAlert(\"The test is available between \"+item.startDate+\" - \"+item.endDate)} className={`ilearn-btn-right orange-card`} > {item.status} </button> \r\n                                                        : item.status==\"Time Out\" ? \r\n                                                        <button onClick={() => this.showAlert(\"The test is closed at  \"+item.endDate)} className={`ilearn-btn-right orange-card`} > {item.status} </button> :\r\n                                                        <button className={`ilearn-btn-right ilearn-blue-btn`} onClick={() => this.openTest(item.id)} >\r\n                                                            {item.status}\r\n                                                        </button>\r\n                                                        }\r\n                                                    </div>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                                </Tab>\r\n                                <Tab eventKey=\"Completed\" className=\"completed\" title={<span>{completed} Completed</span>}>\r\n                                    <ul className=\"list-group\">\r\n                                       {\r\n                                        todayTests && \r\n                                        todayTests.completedTests?.map((item, index) => {\r\n                                                return ( \r\n                                                    <li className=\"list-group-item today-test-group ilearn-item-border\">\r\n                                                        <div className=\"ilearn-item-block \">\r\n                                                            <div className=\"ilearn-item-inner\">\r\n                                                            <h4>{item.name}</h4>\r\n                                                            {item.startDate && \r\n                                                               item.startDate !='--' ? <span >{item.startDate} to {item.endDate} </span> : \"\"\r\n                                                            }\r\n                                                            </div>\r\n                                                            <button \r\n                                                            className={`ilearn-btn-right ilearn-green-btn`}\r\n                                                            onClick={() => this.routeChange('/test-result/'+portlet.testCategoryIds+'/'+item.id, item.endDate)}\r\n                                                            >\r\n                                                              {item.status}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </li>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </ul>\r\n                                </Tab>\r\n                            </Tabs>\r\n                        </div>\r\n                    }\r\n                    </>\r\n                    }\r\n                </div>\r\n            </>           \r\n              \r\n        );\r\n    }\r\n    \r\n    renderLoader() {\r\n        console.log(\"TodayTests -> renderLoader()... \");\r\n        const _loadingText = 'Please wait...';\r\n        return (\r\n            <ILoader\r\n                loadingText={_loadingText}\r\n                isShow={this.state.showLoading}\r\n                >\r\n            </ILoader>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n  \r\nexport {TodayTests};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\_components\\\\iframe\\\\iframe.js\";\nimport React, { Component } from 'react';\nimport { ILoader } from '../iloader/iloader';\n\nclass Iframe extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleLoading = () => {\n      //console.log(\"FeedbackForm -> toggleLoading()... \");\n      this.setState(state => ({\n        showLoading: !state.showLoading\n      }));\n    };\n\n    this.state = {\n      url: props.url,\n      showLoading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"iframe\", {\n      title: \"pdf\",\n      class: \"iframe100\",\n      width: \"100%\",\n      onLoad: this.toggleLoading,\n      src: this.state.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }), this.renderLoader());\n  }\n\n  renderLoader() {\n    //console.log(\"FeedbackForm -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default Iframe;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/_components/iframe/iframe.js"],"names":["React","Component","ILoader","Iframe","constructor","props","toggleLoading","setState","state","showLoading","url","render","renderLoader","_loadingText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACC,SAA3B,CAAqC;AACnCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqBnBC,aArBmB,GAqBH,MAAM;AACpB;AACA,WAAKC,QAAL,CAAcC,KAAK,KAAK;AAAEC,QAAAA,WAAW,EAAE,CAACD,KAAK,CAACC;AAAtB,OAAL,CAAnB;AACD,KAxBkB;;AAEjB,SAAKD,KAAL,GAAa;AACXE,MAAAA,GAAG,EAAEL,KAAK,CAACK,GADA;AAEXD,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,KAAK,EAAC,WAA1B;AAAsC,MAAA,KAAK,EAAC,MAA5C;AACE,MAAA,MAAM,EAAE,KAAKL,aADf;AAEE,MAAA,GAAG,EAAE,KAAKE,KAAL,CAAWE,GAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKM,KAAKE,YAAL,EALN,CADF;AAUD;;AAODA,EAAAA,YAAY,GAAG;AACb;AACA,UAAMC,YAAY,GAAG,gBAArB;AACA,wBACI,oBAAC,OAAD;AACE,MAAA,WAAW,EAAEA,YADf;AAEE,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWC,WAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AArCoC;;AAwCrC,eAAeN,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { ILoader } from '../iloader/iloader';\r\n\r\nclass Iframe extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      url: props.url,\r\n      showLoading: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <iframe title=\"pdf\" class=\"iframe100\" width=\"100%\" \r\n          onLoad={this.toggleLoading}\r\n          src={this.state.url}></iframe>\r\n          {\r\n            this.renderLoader()\r\n          }\r\n      </>\r\n    );\r\n  }\r\n\r\n  toggleLoading = () => {\r\n    //console.log(\"FeedbackForm -> toggleLoading()... \");\r\n    this.setState(state => ({ showLoading: !state.showLoading }));\r\n  };\r\n\r\n  renderLoader() {\r\n    //console.log(\"FeedbackForm -> renderLoader()... \");\r\n    const _loadingText = 'Please wait...';\r\n    return (\r\n        <ILoader\r\n          loadingText={_loadingText}\r\n          isShow={this.state.showLoading}\r\n        >\r\n        </ILoader>\r\n    )\r\n}\r\n}\r\n\r\nexport default Iframe"]},"metadata":{},"sourceType":"module"}
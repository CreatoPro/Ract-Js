{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./core\");\n\nvar _path = _interopRequireDefault(require(\"./path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction request(url, type, withCredentials, headers) {\n  var supportsURL = typeof window != \"undefined\" ? window.URL : false; // TODO: fallback for url if window isn't defined\n\n  var BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n  var deferred = new _core.defer();\n  var xhr = new XMLHttpRequest(); //-- Check from PDF.js:\n  //   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n\n  var xhrPrototype = XMLHttpRequest.prototype;\n  var header;\n\n  if (!(\"overrideMimeType\" in xhrPrototype)) {\n    // IE10 might have response, but not overrideMimeType\n    Object.defineProperty(xhrPrototype, \"overrideMimeType\", {\n      value: function xmlHttpRequestOverrideMimeType() {}\n    });\n  }\n\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  xhr.onreadystatechange = handler;\n  xhr.onerror = err;\n  xhr.open(\"GET\", url, true);\n\n  for (header in headers) {\n    xhr.setRequestHeader(header, headers[header]);\n  }\n\n  if (type == \"json\") {\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n  } // If type isn\"t set, determine it from the file extension\n\n\n  if (!type) {\n    type = new _path.default(url).extension;\n  }\n\n  if (type == \"blob\") {\n    xhr.responseType = BLOB_RESPONSE;\n  }\n\n  if ((0, _core.isXml)(type)) {\n    // xhr.responseType = \"document\";\n    xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n  }\n\n  if (type == \"xhtml\") {// xhr.responseType = \"document\";\n  }\n\n  if (type == \"html\" || type == \"htm\") {// xhr.responseType = \"document\";\n  }\n\n  if (type == \"binary\") {\n    xhr.responseType = \"arraybuffer\";\n  }\n\n  xhr.send();\n\n  function err(e) {\n    deferred.reject(e);\n  }\n\n  function handler() {\n    if (this.readyState === XMLHttpRequest.DONE) {\n      var responseXML = false;\n\n      if (this.responseType === \"\" || this.responseType === \"document\") {\n        responseXML = this.responseXML;\n      }\n\n      if (this.status === 200 || this.status === 0 || responseXML) {\n        //-- Firefox is reporting 0 for blob urls\n        var r;\n\n        if (!this.response && !responseXML) {\n          deferred.reject({\n            status: this.status,\n            message: \"Empty Response\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n\n        if (this.status === 403) {\n          deferred.reject({\n            status: this.status,\n            response: this.response,\n            message: \"Forbidden\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n\n        if (responseXML) {\n          r = this.responseXML;\n        } else if ((0, _core.isXml)(type)) {\n          // xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n          // If this.responseXML wasn't set, try to parse using a DOMParser from text\n          r = (0, _core.parse)(this.response, \"text/xml\");\n        } else if (type == \"xhtml\") {\n          r = (0, _core.parse)(this.response, \"application/xhtml+xml\");\n        } else if (type == \"html\" || type == \"htm\") {\n          r = (0, _core.parse)(this.response, \"text/html\");\n        } else if (type == \"json\") {\n          r = JSON.parse(this.response);\n        } else if (type == \"blob\") {\n          if (supportsURL) {\n            r = this.response;\n          } else {\n            //-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n            r = new Blob([this.response]);\n          }\n        } else {\n          r = this.response;\n        }\n\n        deferred.resolve(r);\n      } else {\n        deferred.reject({\n          status: this.status,\n          message: this.response,\n          stack: new Error().stack\n        });\n      }\n    }\n  }\n\n  return deferred.promise;\n}\n\nvar _default = request;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/utils/request.js"],"names":["Object","defineProperty","exports","value","default","_core","require","_path","_interopRequireDefault","obj","__esModule","request","url","type","withCredentials","headers","supportsURL","window","URL","BLOB_RESPONSE","deferred","defer","xhr","XMLHttpRequest","xhrPrototype","prototype","header","xmlHttpRequestOverrideMimeType","onreadystatechange","handler","onerror","err","open","setRequestHeader","extension","responseType","isXml","overrideMimeType","send","e","reject","readyState","DONE","responseXML","status","r","response","message","stack","Error","promise","parse","JSON","Blob","resolve","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./core\");\n\nvar _path = _interopRequireDefault(require(\"./path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction request(url, type, withCredentials, headers) {\n  var supportsURL = typeof window != \"undefined\" ? window.URL : false; // TODO: fallback for url if window isn't defined\n\n  var BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n  var deferred = new _core.defer();\n  var xhr = new XMLHttpRequest(); //-- Check from PDF.js:\n  //   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n\n  var xhrPrototype = XMLHttpRequest.prototype;\n  var header;\n\n  if (!(\"overrideMimeType\" in xhrPrototype)) {\n    // IE10 might have response, but not overrideMimeType\n    Object.defineProperty(xhrPrototype, \"overrideMimeType\", {\n      value: function xmlHttpRequestOverrideMimeType() {}\n    });\n  }\n\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  xhr.onreadystatechange = handler;\n  xhr.onerror = err;\n  xhr.open(\"GET\", url, true);\n\n  for (header in headers) {\n    xhr.setRequestHeader(header, headers[header]);\n  }\n\n  if (type == \"json\") {\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n  } // If type isn\"t set, determine it from the file extension\n\n\n  if (!type) {\n    type = new _path.default(url).extension;\n  }\n\n  if (type == \"blob\") {\n    xhr.responseType = BLOB_RESPONSE;\n  }\n\n  if ((0, _core.isXml)(type)) {\n    // xhr.responseType = \"document\";\n    xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n  }\n\n  if (type == \"xhtml\") {// xhr.responseType = \"document\";\n  }\n\n  if (type == \"html\" || type == \"htm\") {// xhr.responseType = \"document\";\n  }\n\n  if (type == \"binary\") {\n    xhr.responseType = \"arraybuffer\";\n  }\n\n  xhr.send();\n\n  function err(e) {\n    deferred.reject(e);\n  }\n\n  function handler() {\n    if (this.readyState === XMLHttpRequest.DONE) {\n      var responseXML = false;\n\n      if (this.responseType === \"\" || this.responseType === \"document\") {\n        responseXML = this.responseXML;\n      }\n\n      if (this.status === 200 || this.status === 0 || responseXML) {\n        //-- Firefox is reporting 0 for blob urls\n        var r;\n\n        if (!this.response && !responseXML) {\n          deferred.reject({\n            status: this.status,\n            message: \"Empty Response\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n\n        if (this.status === 403) {\n          deferred.reject({\n            status: this.status,\n            response: this.response,\n            message: \"Forbidden\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n\n        if (responseXML) {\n          r = this.responseXML;\n        } else if ((0, _core.isXml)(type)) {\n          // xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n          // If this.responseXML wasn't set, try to parse using a DOMParser from text\n          r = (0, _core.parse)(this.response, \"text/xml\");\n        } else if (type == \"xhtml\") {\n          r = (0, _core.parse)(this.response, \"application/xhtml+xml\");\n        } else if (type == \"html\" || type == \"htm\") {\n          r = (0, _core.parse)(this.response, \"text/html\");\n        } else if (type == \"json\") {\n          r = JSON.parse(this.response);\n        } else if (type == \"blob\") {\n          if (supportsURL) {\n            r = this.response;\n          } else {\n            //-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n            r = new Blob([this.response]);\n          }\n        } else {\n          r = this.response;\n        }\n\n        deferred.resolve(r);\n      } else {\n        deferred.reject({\n          status: this.status,\n          message: this.response,\n          stack: new Error().stack\n        });\n      }\n    }\n  }\n\n  return deferred.promise;\n}\n\nvar _default = request;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
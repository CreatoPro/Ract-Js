{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Hooks allow for injecting functions that must all complete in order before finishing\n * They will execute in parallel but all must finish before continuing\n * Functions may return a promise if they are async.\n * @param {any} context scope of this\n * @example this.content = new EPUBJS.Hook(this);\n */\n\nclass Hook {\n  constructor(context) {\n    this.context = context || this;\n    this.hooks = [];\n  }\n  /**\n   * Adds a function to be run before a hook completes\n   * @example this.content.register(function(){...});\n   */\n\n\n  register() {\n    for (var i = 0; i < arguments.length; ++i) {\n      if (typeof arguments[i] === \"function\") {\n        this.hooks.push(arguments[i]);\n      } else {\n        // unpack array\n        for (var j = 0; j < arguments[i].length; ++j) {\n          this.hooks.push(arguments[i][j]);\n        }\n      }\n    }\n  }\n  /**\n   * Removes a function\n   * @example this.content.deregister(function(){...});\n   */\n\n\n  deregister(func) {\n    let hook;\n\n    for (let i = 0; i < this.hooks.length; i++) {\n      hook = this.hooks[i];\n\n      if (hook === func) {\n        this.hooks.splice(i, 1);\n        break;\n      }\n    }\n  }\n  /**\n   * Triggers a hook to run all functions\n   * @example this.content.trigger(args).then(function(){...});\n   */\n\n\n  trigger() {\n    var args = arguments;\n    var context = this.context;\n    var promises = [];\n    this.hooks.forEach(function (task) {\n      try {\n        var executing = task.apply(context, args);\n      } catch (err) {\n        console.log(err);\n      }\n\n      if (executing && typeof executing[\"then\"] === \"function\") {\n        // Task is a function that returns a promise\n        promises.push(executing);\n      } // Otherwise Task resolves immediately, continue\n\n    });\n    return Promise.all(promises);\n  } // Adds a function to be run before a hook completes\n\n\n  list() {\n    return this.hooks;\n  }\n\n  clear() {\n    return this.hooks = [];\n  }\n\n}\n\nvar _default = Hook;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/utils/hook.js"],"names":["Object","defineProperty","exports","value","default","Hook","constructor","context","hooks","register","i","arguments","length","push","j","deregister","func","hook","splice","trigger","args","promises","forEach","task","executing","apply","err","console","log","Promise","all","list","clear","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,IAA1B;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsC,EAAEF,CAAxC,EAA2C;AACzC,UAAI,OAAOC,SAAS,CAACD,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;AACtC,aAAKF,KAAL,CAAWK,IAAX,CAAgBF,SAAS,CAACD,CAAD,CAAzB;AACD,OAFD,MAEO;AACL;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACD,CAAD,CAAT,CAAaE,MAAjC,EAAyC,EAAEE,CAA3C,EAA8C;AAC5C,eAAKN,KAAL,CAAWK,IAAX,CAAgBF,SAAS,CAACD,CAAD,CAAT,CAAaI,CAAb,CAAhB;AACD;AACF;AACF;AACF;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,QAAIC,IAAJ;;AAEA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAL,CAAWI,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1CO,MAAAA,IAAI,GAAG,KAAKT,KAAL,CAAWE,CAAX,CAAP;;AAEA,UAAIO,IAAI,KAAKD,IAAb,EAAmB;AACjB,aAAKR,KAAL,CAAWU,MAAX,CAAkBR,CAAlB,EAAqB,CAArB;AACA;AACD;AACF;AACF;AACD;AACF;AACA;AACA;;;AAGES,EAAAA,OAAO,GAAG;AACR,QAAIC,IAAI,GAAGT,SAAX;AACA,QAAIJ,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIc,QAAQ,GAAG,EAAf;AACA,SAAKb,KAAL,CAAWc,OAAX,CAAmB,UAAUC,IAAV,EAAgB;AACjC,UAAI;AACF,YAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAWlB,OAAX,EAAoBa,IAApB,CAAhB;AACD,OAFD,CAEE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,UAAIF,SAAS,IAAI,OAAOA,SAAS,CAAC,MAAD,CAAhB,KAA6B,UAA9C,EAA0D;AACxD;AACAH,QAAAA,QAAQ,CAACR,IAAT,CAAcW,SAAd;AACD,OAVgC,CAU/B;;AAEH,KAZD;AAaA,WAAOK,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAP;AACD,GAjEQ,CAiEP;;;AAGFU,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKvB,KAAZ;AACD;;AAEDwB,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKxB,KAAL,GAAa,EAApB;AACD;;AA1EQ;;AA8EX,IAAIyB,QAAQ,GAAG5B,IAAf;AACAH,OAAO,CAACE,OAAR,GAAkB6B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Hooks allow for injecting functions that must all complete in order before finishing\n * They will execute in parallel but all must finish before continuing\n * Functions may return a promise if they are async.\n * @param {any} context scope of this\n * @example this.content = new EPUBJS.Hook(this);\n */\nclass Hook {\n  constructor(context) {\n    this.context = context || this;\n    this.hooks = [];\n  }\n  /**\n   * Adds a function to be run before a hook completes\n   * @example this.content.register(function(){...});\n   */\n\n\n  register() {\n    for (var i = 0; i < arguments.length; ++i) {\n      if (typeof arguments[i] === \"function\") {\n        this.hooks.push(arguments[i]);\n      } else {\n        // unpack array\n        for (var j = 0; j < arguments[i].length; ++j) {\n          this.hooks.push(arguments[i][j]);\n        }\n      }\n    }\n  }\n  /**\n   * Removes a function\n   * @example this.content.deregister(function(){...});\n   */\n\n\n  deregister(func) {\n    let hook;\n\n    for (let i = 0; i < this.hooks.length; i++) {\n      hook = this.hooks[i];\n\n      if (hook === func) {\n        this.hooks.splice(i, 1);\n        break;\n      }\n    }\n  }\n  /**\n   * Triggers a hook to run all functions\n   * @example this.content.trigger(args).then(function(){...});\n   */\n\n\n  trigger() {\n    var args = arguments;\n    var context = this.context;\n    var promises = [];\n    this.hooks.forEach(function (task) {\n      try {\n        var executing = task.apply(context, args);\n      } catch (err) {\n        console.log(err);\n      }\n\n      if (executing && typeof executing[\"then\"] === \"function\") {\n        // Task is a function that returns a promise\n        promises.push(executing);\n      } // Otherwise Task resolves immediately, continue\n\n    });\n    return Promise.all(promises);\n  } // Adds a function to be run before a hook completes\n\n\n  list() {\n    return this.hooks;\n  }\n\n  clear() {\n    return this.hooks = [];\n  }\n\n}\n\nvar _default = Hook;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
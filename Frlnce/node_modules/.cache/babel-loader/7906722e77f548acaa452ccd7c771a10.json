{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Themes to apply to displayed content\n * @class\n * @param {Rendition} rendition\n */\n\n\nclass Themes {\n  constructor(rendition) {\n    this.rendition = rendition;\n    this._themes = {\n      \"default\": {\n        \"rules\": {},\n        \"url\": \"\",\n        \"serialized\": \"\"\n      }\n    };\n    this._overrides = {};\n    this._current = \"default\";\n    this._injected = [];\n    this.rendition.hooks.content.register(this.inject.bind(this));\n    this.rendition.hooks.content.register(this.overrides.bind(this));\n  }\n  /**\n   * Add themes to be used by a rendition\n   * @param {object | Array<object> | string}\n   * @example themes.register(\"light\", \"http://example.com/light.css\")\n   * @example themes.register(\"light\", { \"body\": { \"color\": \"purple\"}})\n   * @example themes.register({ \"light\" : {...}, \"dark\" : {...}})\n   */\n\n\n  register() {\n    if (arguments.length === 0) {\n      return;\n    }\n\n    if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n      return this.registerThemes(arguments[0]);\n    }\n\n    if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n      return this.default(arguments[0]);\n    }\n\n    if (arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return this.registerUrl(arguments[0], arguments[1]);\n    }\n\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n      return this.registerRules(arguments[0], arguments[1]);\n    }\n  }\n  /**\n   * Add a default theme to be used by a rendition\n   * @param {object | string} theme\n   * @example themes.register(\"http://example.com/default.css\")\n   * @example themes.register({ \"body\": { \"color\": \"purple\"}})\n   */\n\n\n  default(theme) {\n    if (!theme) {\n      return;\n    }\n\n    if (typeof theme === \"string\") {\n      return this.registerUrl(\"default\", theme);\n    }\n\n    if (typeof theme === \"object\") {\n      return this.registerRules(\"default\", theme);\n    }\n  }\n  /**\n   * Register themes object\n   * @param {object} themes\n   */\n\n\n  registerThemes(themes) {\n    for (var theme in themes) {\n      if (themes.hasOwnProperty(theme)) {\n        if (typeof themes[theme] === \"string\") {\n          this.registerUrl(theme, themes[theme]);\n        } else {\n          this.registerRules(theme, themes[theme]);\n        }\n      }\n    }\n  }\n  /**\n   * Register a theme by passing its css as string\n   * @param {string} name \n   * @param {string} css \n   */\n\n\n  registerCss(name, css) {\n    this._themes[name] = {\n      \"serialized\": css\n    };\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Register a url\n   * @param {string} name\n   * @param {string} input\n   */\n\n\n  registerUrl(name, input) {\n    var url = new _url.default(input);\n    this._themes[name] = {\n      \"url\": url.toString()\n    };\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Register rule\n   * @param {string} name\n   * @param {object} rules\n   */\n\n\n  registerRules(name, rules) {\n    this._themes[name] = {\n      \"rules\": rules\n    }; // TODO: serialize css rules\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Select a theme\n   * @param {string} name\n   */\n\n\n  select(name) {\n    var prev = this._current;\n    var contents;\n    this._current = name;\n    this.update(name);\n    contents = this.rendition.getContents();\n    contents.forEach(content => {\n      content.removeClass(prev);\n      content.addClass(name);\n    });\n  }\n  /**\n   * Update a theme\n   * @param {string} name\n   */\n\n\n  update(name) {\n    var contents = this.rendition.getContents();\n    contents.forEach(content => {\n      this.add(name, content);\n    });\n  }\n  /**\n   * Inject all themes into contents\n   * @param {Contents} contents\n   */\n\n\n  inject(contents) {\n    var links = [];\n    var themes = this._themes;\n    var theme;\n\n    for (var name in themes) {\n      if (themes.hasOwnProperty(name) && (name === this._current || name === \"default\")) {\n        theme = themes[name];\n\n        if (theme.rules && Object.keys(theme.rules).length > 0 || theme.url && links.indexOf(theme.url) === -1) {\n          this.add(name, contents);\n        }\n\n        this._injected.push(name);\n      }\n    }\n\n    if (this._current != \"default\") {\n      contents.addClass(this._current);\n    }\n  }\n  /**\n   * Add Theme to contents\n   * @param {string} name\n   * @param {Contents} contents\n   */\n\n\n  add(name, contents) {\n    var theme = this._themes[name];\n\n    if (!theme || !contents) {\n      return;\n    }\n\n    if (theme.url) {\n      contents.addStylesheet(theme.url);\n    } else if (theme.serialized) {\n      contents.addStylesheetCss(theme.serialized, name);\n      theme.injected = true;\n    } else if (theme.rules) {\n      contents.addStylesheetRules(theme.rules, name);\n      theme.injected = true;\n    }\n  }\n  /**\n   * Add override\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} priority\n   */\n\n\n  override(name, value, priority) {\n    var contents = this.rendition.getContents();\n    this._overrides[name] = {\n      value: value,\n      priority: priority === true\n    };\n    contents.forEach(content => {\n      content.css(name, this._overrides[name].value, this._overrides[name].priority);\n    });\n  }\n\n  removeOverride(name) {\n    var contents = this.rendition.getContents();\n    delete this._overrides[name];\n    contents.forEach(content => {\n      content.css(name);\n    });\n  }\n  /**\n   * Add all overrides\n   * @param {Content} content\n   */\n\n\n  overrides(contents) {\n    var overrides = this._overrides;\n\n    for (var rule in overrides) {\n      if (overrides.hasOwnProperty(rule)) {\n        contents.css(rule, overrides[rule].value, overrides[rule].priority);\n      }\n    }\n  }\n  /**\n   * Adjust the font size of a rendition\n   * @param {number} size\n   */\n\n\n  fontSize(size) {\n    this.override(\"font-size\", size);\n  }\n  /**\n   * Adjust the font-family of a rendition\n   * @param {string} f\n   */\n\n\n  font(f) {\n    this.override(\"font-family\", f, true);\n  }\n\n  destroy() {\n    this.rendition = undefined;\n    this._themes = undefined;\n    this._overrides = undefined;\n    this._current = undefined;\n    this._injected = undefined;\n  }\n\n}\n\nvar _default = Themes;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/themes.js"],"names":["Object","defineProperty","exports","value","default","_url","_interopRequireDefault","require","obj","__esModule","Themes","constructor","rendition","_themes","_overrides","_current","_injected","hooks","content","register","inject","bind","overrides","arguments","length","registerThemes","registerUrl","registerRules","theme","themes","hasOwnProperty","registerCss","name","css","update","input","url","toString","rules","select","prev","contents","getContents","forEach","removeClass","addClass","add","links","keys","indexOf","push","addStylesheet","serialized","addStylesheetCss","injected","addStylesheetRules","override","priority","removeOverride","rule","fontSize","size","font","f","destroy","undefined","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Themes to apply to displayed content\n * @class\n * @param {Rendition} rendition\n */\nclass Themes {\n  constructor(rendition) {\n    this.rendition = rendition;\n    this._themes = {\n      \"default\": {\n        \"rules\": {},\n        \"url\": \"\",\n        \"serialized\": \"\"\n      }\n    };\n    this._overrides = {};\n    this._current = \"default\";\n    this._injected = [];\n    this.rendition.hooks.content.register(this.inject.bind(this));\n    this.rendition.hooks.content.register(this.overrides.bind(this));\n  }\n  /**\n   * Add themes to be used by a rendition\n   * @param {object | Array<object> | string}\n   * @example themes.register(\"light\", \"http://example.com/light.css\")\n   * @example themes.register(\"light\", { \"body\": { \"color\": \"purple\"}})\n   * @example themes.register({ \"light\" : {...}, \"dark\" : {...}})\n   */\n\n\n  register() {\n    if (arguments.length === 0) {\n      return;\n    }\n\n    if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n      return this.registerThemes(arguments[0]);\n    }\n\n    if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n      return this.default(arguments[0]);\n    }\n\n    if (arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return this.registerUrl(arguments[0], arguments[1]);\n    }\n\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n      return this.registerRules(arguments[0], arguments[1]);\n    }\n  }\n  /**\n   * Add a default theme to be used by a rendition\n   * @param {object | string} theme\n   * @example themes.register(\"http://example.com/default.css\")\n   * @example themes.register({ \"body\": { \"color\": \"purple\"}})\n   */\n\n\n  default(theme) {\n    if (!theme) {\n      return;\n    }\n\n    if (typeof theme === \"string\") {\n      return this.registerUrl(\"default\", theme);\n    }\n\n    if (typeof theme === \"object\") {\n      return this.registerRules(\"default\", theme);\n    }\n  }\n  /**\n   * Register themes object\n   * @param {object} themes\n   */\n\n\n  registerThemes(themes) {\n    for (var theme in themes) {\n      if (themes.hasOwnProperty(theme)) {\n        if (typeof themes[theme] === \"string\") {\n          this.registerUrl(theme, themes[theme]);\n        } else {\n          this.registerRules(theme, themes[theme]);\n        }\n      }\n    }\n  }\n  /**\n   * Register a theme by passing its css as string\n   * @param {string} name \n   * @param {string} css \n   */\n\n\n  registerCss(name, css) {\n    this._themes[name] = {\n      \"serialized\": css\n    };\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Register a url\n   * @param {string} name\n   * @param {string} input\n   */\n\n\n  registerUrl(name, input) {\n    var url = new _url.default(input);\n    this._themes[name] = {\n      \"url\": url.toString()\n    };\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Register rule\n   * @param {string} name\n   * @param {object} rules\n   */\n\n\n  registerRules(name, rules) {\n    this._themes[name] = {\n      \"rules\": rules\n    }; // TODO: serialize css rules\n\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n  /**\n   * Select a theme\n   * @param {string} name\n   */\n\n\n  select(name) {\n    var prev = this._current;\n    var contents;\n    this._current = name;\n    this.update(name);\n    contents = this.rendition.getContents();\n    contents.forEach(content => {\n      content.removeClass(prev);\n      content.addClass(name);\n    });\n  }\n  /**\n   * Update a theme\n   * @param {string} name\n   */\n\n\n  update(name) {\n    var contents = this.rendition.getContents();\n    contents.forEach(content => {\n      this.add(name, content);\n    });\n  }\n  /**\n   * Inject all themes into contents\n   * @param {Contents} contents\n   */\n\n\n  inject(contents) {\n    var links = [];\n    var themes = this._themes;\n    var theme;\n\n    for (var name in themes) {\n      if (themes.hasOwnProperty(name) && (name === this._current || name === \"default\")) {\n        theme = themes[name];\n\n        if (theme.rules && Object.keys(theme.rules).length > 0 || theme.url && links.indexOf(theme.url) === -1) {\n          this.add(name, contents);\n        }\n\n        this._injected.push(name);\n      }\n    }\n\n    if (this._current != \"default\") {\n      contents.addClass(this._current);\n    }\n  }\n  /**\n   * Add Theme to contents\n   * @param {string} name\n   * @param {Contents} contents\n   */\n\n\n  add(name, contents) {\n    var theme = this._themes[name];\n\n    if (!theme || !contents) {\n      return;\n    }\n\n    if (theme.url) {\n      contents.addStylesheet(theme.url);\n    } else if (theme.serialized) {\n      contents.addStylesheetCss(theme.serialized, name);\n      theme.injected = true;\n    } else if (theme.rules) {\n      contents.addStylesheetRules(theme.rules, name);\n      theme.injected = true;\n    }\n  }\n  /**\n   * Add override\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} priority\n   */\n\n\n  override(name, value, priority) {\n    var contents = this.rendition.getContents();\n    this._overrides[name] = {\n      value: value,\n      priority: priority === true\n    };\n    contents.forEach(content => {\n      content.css(name, this._overrides[name].value, this._overrides[name].priority);\n    });\n  }\n\n  removeOverride(name) {\n    var contents = this.rendition.getContents();\n    delete this._overrides[name];\n    contents.forEach(content => {\n      content.css(name);\n    });\n  }\n  /**\n   * Add all overrides\n   * @param {Content} content\n   */\n\n\n  overrides(contents) {\n    var overrides = this._overrides;\n\n    for (var rule in overrides) {\n      if (overrides.hasOwnProperty(rule)) {\n        contents.css(rule, overrides[rule].value, overrides[rule].priority);\n      }\n    }\n  }\n  /**\n   * Adjust the font size of a rendition\n   * @param {number} size\n   */\n\n\n  fontSize(size) {\n    this.override(\"font-size\", size);\n  }\n  /**\n   * Adjust the font-family of a rendition\n   * @param {string} f\n   */\n\n\n  font(f) {\n    this.override(\"font-family\", f, true);\n  }\n\n  destroy() {\n    this.rendition = undefined;\n    this._themes = undefined;\n    this._overrides = undefined;\n    this._current = undefined;\n    this._injected = undefined;\n  }\n\n}\n\nvar _default = Themes;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
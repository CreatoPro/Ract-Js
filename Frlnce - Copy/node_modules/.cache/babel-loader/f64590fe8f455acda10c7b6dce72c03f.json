{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\shaka\\\\shaka.component.jsx\";\nimport React from \"react\";\nimport ShakaPlayer from \"shaka-player-react\";\nimport muxjs from \"mux.js\";\nimport \"shaka-player/dist/controls.css\";\nimport \"./shaka.styles.css\";\nimport { ReactComponent as Angle } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/angle-up-solid.svg\";\nimport { ReactComponent as DownloadButton } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/download-solid.svg\";\nimport { ReactComponent as DeleteIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/trash-solid.svg\";\n\nconst shaka = require(\"shaka-player/dist/shaka-player.ui.js\"); // console.log(shaka.offline); //<---use for offline purpose\n\n\nclass MyShakaPlayer extends React.Component {\n  constructor() {\n    super();\n\n    this.selectTracks = tracks => {\n      // This example stores the highest bandwidth variant.\n      //\n      // Note that this is just an example of an arbitrary algorithm, and not a best\n      // practice for storing content offline.  Decide what your app needs, or keep\n      // the default (user-pref-matching audio, best SD video, all text).\n      const found = tracks.filter(function (track) {\n        return track.type == \"variant\";\n      }).sort(function (a, b) {\n        return a.bandwidth - b.bandwidth;\n      }).pop();\n      console.log(\"Offline Track bandwidth: \" + found.bandwidth);\n      return [found];\n    };\n\n    this.initStorage = player => {\n      window.storage = new shaka.offline.Storage(player);\n      window.storage.configure({\n        offline: {\n          progressCallback: this.setDownloadProgress,\n          trackSelectionCallback: this.selectTracks\n        }\n      });\n    };\n\n    this.setDownloadProgress = (content, progress) => {\n      const progressBar = this.progressBar.current;\n      progressBar.value = progress * progressBar.max;\n    };\n\n    this.listContent = async () => {\n      let content = await window.storage.list();\n      console.log(content);\n      this.setState({\n        content: content\n      }, () => {\n        this.playContent();\n      });\n      return content;\n    };\n\n    this.playContent = () => {\n      let offlineSRC;\n      this.state.content.forEach(content => {\n        if (content.appMetadata.videoId === this.state.videoId) {\n          offlineSRC = content.offlineUri;\n        }\n      });\n\n      if (offlineSRC) {\n        this.setState({\n          src: offlineSRC,\n          offlineAvail: true\n        });\n      } // window.player.load(content.offlineUri);\n\n    };\n\n    this.removeContent = () => {\n      let offlineSRC;\n      this.state.content.forEach(content => {\n        if (content.appMetadata.videoId === this.state.videoId) {\n          offlineSRC = content.offlineUri;\n        }\n      });\n\n      if (offlineSRC) {\n        this.setState(prevState => ({\n          src: prevState.video.url,\n          offlineAvail: false\n        }), () => {\n          window.storage.remove(offlineSRC);\n        });\n      }\n    };\n\n    this.downloadContent = (manifestUri, title, videoId) => {\n      const metadata = {\n        title: title,\n        downloaded: Date(),\n        videoId: videoId\n      };\n      console.log(metadata);\n      console.log(manifestUri);\n      return window.storage.store(manifestUri, metadata);\n    };\n\n    this.onDownloadClick = () => {\n      let manifestUri = this.state.video.url;\n      let title = this.state.video.name;\n      let videoId = this.state.videoId;\n      this.setState({\n        isDownloading: true\n      }, () => {\n        console.log(\"1st\");\n        this.setDownloadProgress(null, 0);\n      });\n      this.downloadContent(manifestUri, title, videoId).then(() => {\n        console.log(\"downloaded\");\n        this.setDownloadProgress(null, 1);\n        return this.listContent();\n      }).then(content => {\n        console.log(\"2\");\n        console.log(content);\n        this.setState({\n          isDownloading: false\n        });\n      }).catch(error => {\n        // In the case of an error, re-enable the download button so\n        // that the user can try to download another item.\n        this.setState({\n          isDownloading: false\n        });\n        console.log(error);\n      });\n    };\n\n    this.showPlayer = () => {\n      this.setState(prevState => ({\n        show: !prevState.show\n      }), () => {\n        this.listContent();\n      });\n    };\n\n    this.showDescription = () => {\n      this.setState(prevState => ({\n        description: !prevState.description\n      }));\n    };\n\n    this.state = {\n      show: false,\n      video: null,\n      src: null,\n      description: false,\n      content: [],\n      videoId: null,\n      offlineAvail: false,\n      isDownloading: false\n    };\n    window.muxjs = muxjs;\n    this.shakaRef = /*#__PURE__*/React.createRef();\n    this.progressBar = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    window.getShakaInst = () => this.shakRef.current;\n\n    this.setState({\n      video: this.props.location.state.selectedVideo,\n      src: this.props.location.state.selectedVideo.url,\n      videoId: this.props.location.state.selectedVideo.id\n    }, () => {\n      let video = shaka.videoElement;\n      let player = new shaka.Player(video);\n      window.player = player;\n      this.initStorage(player);\n      this.showPlayer();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, this.state.show && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ShakaPlayer, {\n      className: \"shaka-video\",\n      ref: this.shakaRef,\n      autoPlay: true,\n      src: this.state.src,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-detail-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"video-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, this.state.video.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"video-date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }, this.state.video.creationDate)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }\n    }, this.state.offlineAvail ? /*#__PURE__*/React.createElement(DeleteIcon, {\n      onClick: this.removeContent,\n      className: \"video-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 19\n      }\n    }, this.state.isDownloading ? /*#__PURE__*/React.createElement(\"progress\", {\n      ref: this.progressBar,\n      value: \"0\",\n      max: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 23\n      }\n    }) : /*#__PURE__*/React.createElement(DownloadButton, {\n      onClick: this.onDownloadClick,\n      className: \"video-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(Angle, {\n      onClick: this.showDescription,\n      className: `video-icon ${this.state.description ? \"rotate\" : null}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }))), this.state.description && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-description-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: this.state.video.description\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n}\n\nexport default MyShakaPlayer;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/shaka/shaka.component.jsx"],"names":["React","ShakaPlayer","muxjs","shaka","require","MyShakaPlayer","Component","constructor","selectTracks","tracks","found","filter","track","type","sort","a","b","bandwidth","pop","console","log","initStorage","player","window","storage","offline","Storage","configure","progressCallback","setDownloadProgress","trackSelectionCallback","content","progress","progressBar","current","value","max","listContent","list","setState","playContent","offlineSRC","state","forEach","appMetadata","videoId","offlineUri","src","offlineAvail","removeContent","prevState","video","url","remove","downloadContent","manifestUri","title","metadata","downloaded","Date","store","onDownloadClick","name","isDownloading","then","catch","error","showPlayer","show","showDescription","description","shakaRef","createRef","componentDidMount","getShakaInst","shakRef","props","location","selectedVideo","id","videoElement","Player","render","creationDate","__html"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,OAAO,gCAAP;AACA,OAAO,oBAAP;;;;;AAIA,MAAMC,KAAK,GAAGC,OAAO,CAAC,sCAAD,CAArB,C,CACA;;;AAEA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAmCdC,YAnCc,GAmCEC,MAAD,IAAY;AACzB;AACA;AACA;AACA;AACA;AACA,YAAMC,KAAK,GAAGD,MAAM,CACjBE,MADW,CACJ,UAAUC,KAAV,EAAiB;AACvB,eAAOA,KAAK,CAACC,IAAN,IAAc,SAArB;AACD,OAHW,EAIXC,IAJW,CAIN,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACpB,eAAOD,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAAvB;AACD,OANW,EAOXC,GAPW,EAAd;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BV,KAAK,CAACO,SAAhD;AACA,aAAO,CAACP,KAAD,CAAP;AACD,KAnDa;;AAAA,SAqDdW,WArDc,GAqDCC,MAAD,IAAY;AACxBC,MAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIrB,KAAK,CAACsB,OAAN,CAAcC,OAAlB,CAA0BJ,MAA1B,CAAjB;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeG,SAAf,CAAyB;AACvBF,QAAAA,OAAO,EAAE;AACPG,UAAAA,gBAAgB,EAAE,KAAKC,mBADhB;AAEPC,UAAAA,sBAAsB,EAAE,KAAKtB;AAFtB;AADc,OAAzB;AAMD,KA7Da;;AAAA,SA+DdqB,mBA/Dc,GA+DQ,CAACE,OAAD,EAAUC,QAAV,KAAuB;AAC3C,YAAMC,WAAW,GAAG,KAAKA,WAAL,CAAiBC,OAArC;AACAD,MAAAA,WAAW,CAACE,KAAZ,GAAoBH,QAAQ,GAAGC,WAAW,CAACG,GAA3C;AACD,KAlEa;;AAAA,SAoEdC,WApEc,GAoEA,YAAY;AACxB,UAAIN,OAAO,GAAG,MAAMR,MAAM,CAACC,OAAP,CAAec,IAAf,EAApB;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AACA,WAAKQ,QAAL,CACE;AACER,QAAAA,OAAO,EAAEA;AADX,OADF,EAIE,MAAM;AACJ,aAAKS,WAAL;AACD,OANH;AAQA,aAAOT,OAAP;AACD,KAhFa;;AAAA,SAkFdS,WAlFc,GAkFA,MAAM;AAClB,UAAIC,UAAJ;AACA,WAAKC,KAAL,CAAWX,OAAX,CAAmBY,OAAnB,CAA4BZ,OAAD,IAAa;AACtC,YAAIA,OAAO,CAACa,WAAR,CAAoBC,OAApB,KAAgC,KAAKH,KAAL,CAAWG,OAA/C,EAAwD;AACtDJ,UAAAA,UAAU,GAAGV,OAAO,CAACe,UAArB;AACD;AACF,OAJD;;AAKA,UAAIL,UAAJ,EAAgB;AACd,aAAKF,QAAL,CAAc;AAAEQ,UAAAA,GAAG,EAAEN,UAAP;AAAmBO,UAAAA,YAAY,EAAE;AAAjC,SAAd;AACD,OATiB,CAUlB;;AACD,KA7Fa;;AAAA,SA+FdC,aA/Fc,GA+FE,MAAM;AACpB,UAAIR,UAAJ;AACA,WAAKC,KAAL,CAAWX,OAAX,CAAmBY,OAAnB,CAA4BZ,OAAD,IAAa;AACtC,YAAIA,OAAO,CAACa,WAAR,CAAoBC,OAApB,KAAgC,KAAKH,KAAL,CAAWG,OAA/C,EAAwD;AACtDJ,UAAAA,UAAU,GAAGV,OAAO,CAACe,UAArB;AACD;AACF,OAJD;;AAKA,UAAIL,UAAJ,EAAgB;AACd,aAAKF,QAAL,CACGW,SAAD,KAAgB;AAAEH,UAAAA,GAAG,EAAEG,SAAS,CAACC,KAAV,CAAgBC,GAAvB;AAA4BJ,UAAAA,YAAY,EAAE;AAA1C,SAAhB,CADF,EAEE,MAAM;AACJzB,UAAAA,MAAM,CAACC,OAAP,CAAe6B,MAAf,CAAsBZ,UAAtB;AACD,SAJH;AAMD;AACF,KA9Ga;;AAAA,SAgHda,eAhHc,GAgHI,CAACC,WAAD,EAAcC,KAAd,EAAqBX,OAArB,KAAiC;AACjD,YAAMY,QAAQ,GAAG;AACfD,QAAAA,KAAK,EAAEA,KADQ;AAEfE,QAAAA,UAAU,EAAEC,IAAI,EAFD;AAGfd,QAAAA,OAAO,EAAEA;AAHM,OAAjB;AAKA1B,MAAAA,OAAO,CAACC,GAAR,CAAYqC,QAAZ;AACAtC,MAAAA,OAAO,CAACC,GAAR,CAAYmC,WAAZ;AACA,aAAOhC,MAAM,CAACC,OAAP,CAAeoC,KAAf,CAAqBL,WAArB,EAAkCE,QAAlC,CAAP;AACD,KAzHa;;AAAA,SA2HdI,eA3Hc,GA2HI,MAAM;AACtB,UAAIN,WAAW,GAAG,KAAKb,KAAL,CAAWS,KAAX,CAAiBC,GAAnC;AACA,UAAII,KAAK,GAAG,KAAKd,KAAL,CAAWS,KAAX,CAAiBW,IAA7B;AACA,UAAIjB,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAAzB;AACA,WAAKN,QAAL,CAAc;AAAEwB,QAAAA,aAAa,EAAE;AAAjB,OAAd,EAAuC,MAAM;AAC3C5C,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,aAAKS,mBAAL,CAAyB,IAAzB,EAA+B,CAA/B;AACD,OAHD;AAIA,WAAKyB,eAAL,CAAqBC,WAArB,EAAkCC,KAAlC,EAAyCX,OAAzC,EACGmB,IADH,CACQ,MAAM;AACV7C,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,aAAKS,mBAAL,CAAyB,IAAzB,EAA+B,CAA/B;AACA,eAAO,KAAKQ,WAAL,EAAP;AACD,OALH,EAMG2B,IANH,CAMSjC,OAAD,IAAa;AACjBZ,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AACA,aAAKQ,QAAL,CAAc;AAAEwB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD,OAVH,EAWGE,KAXH,CAWUC,KAAD,IAAW;AAChB;AACA;AACA,aAAK3B,QAAL,CAAc;AAAEwB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACA5C,QAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ;AACD,OAhBH;AAiBD,KApJa;;AAAA,SAsJdC,UAtJc,GAsJD,MAAM;AACjB,WAAK5B,QAAL,CACGW,SAAD,KAAgB;AACdkB,QAAAA,IAAI,EAAE,CAAClB,SAAS,CAACkB;AADH,OAAhB,CADF,EAIE,MAAM;AACJ,aAAK/B,WAAL;AACD,OANH;AAQD,KA/Ja;;AAAA,SAiKdgC,eAjKc,GAiKI,MAAM;AACtB,WAAK9B,QAAL,CAAeW,SAAD,KAAgB;AAC5BoB,QAAAA,WAAW,EAAE,CAACpB,SAAS,CAACoB;AADI,OAAhB,CAAd;AAGD,KArKa;;AAEZ,SAAK5B,KAAL,GAAa;AACX0B,MAAAA,IAAI,EAAE,KADK;AAEXjB,MAAAA,KAAK,EAAE,IAFI;AAGXJ,MAAAA,GAAG,EAAE,IAHM;AAIXuB,MAAAA,WAAW,EAAE,KAJF;AAKXvC,MAAAA,OAAO,EAAE,EALE;AAMXc,MAAAA,OAAO,EAAE,IANE;AAOXG,MAAAA,YAAY,EAAE,KAPH;AAQXe,MAAAA,aAAa,EAAE;AARJ,KAAb;AAUAxC,IAAAA,MAAM,CAACrB,KAAP,GAAeA,KAAf;AACA,SAAKqE,QAAL,gBAAgBvE,KAAK,CAACwE,SAAN,EAAhB;AACA,SAAKvC,WAAL,gBAAmBjC,KAAK,CAACwE,SAAN,EAAnB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBlD,IAAAA,MAAM,CAACmD,YAAP,GAAsB,MAAM,KAAKC,OAAL,CAAazC,OAAzC;;AACA,SAAKK,QAAL,CACE;AACEY,MAAAA,KAAK,EAAE,KAAKyB,KAAL,CAAWC,QAAX,CAAoBnC,KAApB,CAA0BoC,aADnC;AAEE/B,MAAAA,GAAG,EAAE,KAAK6B,KAAL,CAAWC,QAAX,CAAoBnC,KAApB,CAA0BoC,aAA1B,CAAwC1B,GAF/C;AAGEP,MAAAA,OAAO,EAAE,KAAK+B,KAAL,CAAWC,QAAX,CAAoBnC,KAApB,CAA0BoC,aAA1B,CAAwCC;AAHnD,KADF,EAME,MAAM;AACJ,UAAI5B,KAAK,GAAGhD,KAAK,CAAC6E,YAAlB;AACA,UAAI1D,MAAM,GAAG,IAAInB,KAAK,CAAC8E,MAAV,CAAiB9B,KAAjB,CAAb;AACA5B,MAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AACA,WAAKD,WAAL,CAAiBC,MAAjB;AACA,WAAK6C,UAAL;AACD,KAZH;AAcD;;AAsIDe,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxC,KAAL,CAAW0B,IAAX,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,GAAG,EAAE,KAAKG,QAFZ;AAGE,MAAA,QAAQ,MAHV;AAIE,MAAA,GAAG,EAAE,KAAK7B,KAAL,CAAWK,GAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAOE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,KAAKL,KAAL,CAAWS,KAAX,CAAiBW,IAA9C,CADF,eAEE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKpB,KAAL,CAAWS,KAAX,CAAiBgC,YAA5C,CAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKzC,KAAL,CAAWM,YAAX,gBACC,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKC,aADhB;AAEE,MAAA,SAAS,EAAC,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKP,KAAL,CAAWqB,aAAX,gBACC;AAAU,MAAA,GAAG,EAAE,KAAK9B,WAApB;AAAiC,MAAA,KAAK,EAAC,GAAvC;AAA2C,MAAA,GAAG,EAAC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAGC,oBAAC,cAAD;AACE,MAAA,OAAO,EAAE,KAAK4B,eADhB;AAEE,MAAA,SAAS,EAAC,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAPJ,eAkBE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAE,KAAKQ,eADhB;AAEE,MAAA,SAAS,EAAG,cACV,KAAK3B,KAAL,CAAW4B,WAAX,GAAyB,QAAzB,GAAoC,IACrC,EAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,CALF,CAPF,EAsCG,KAAK5B,KAAL,CAAW4B,WAAX,iBACC;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,uBAAuB,EAAE;AACvBc,QAAAA,MAAM,EAAE,KAAK1C,KAAL,CAAWS,KAAX,CAAiBmB;AADF,OAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAvCJ,CAFJ,CADF;AAsDD;;AA/NyC;;AAkO5C,eAAejE,aAAf","sourcesContent":["import React from \"react\";\r\nimport ShakaPlayer from \"shaka-player-react\";\r\nimport muxjs from \"mux.js\";\r\nimport \"shaka-player/dist/controls.css\";\r\nimport \"./shaka.styles.css\";\r\nimport { ReactComponent as Angle } from \"./images/angle-up-solid.svg\";\r\nimport { ReactComponent as DownloadButton } from \"./images/download-solid.svg\";\r\nimport { ReactComponent as DeleteIcon } from \"./images/trash-solid.svg\";\r\nconst shaka = require(\"shaka-player/dist/shaka-player.ui.js\");\r\n// console.log(shaka.offline); //<---use for offline purpose\r\n\r\nclass MyShakaPlayer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: false,\r\n      video: null,\r\n      src: null,\r\n      description: false,\r\n      content: [],\r\n      videoId: null,\r\n      offlineAvail: false,\r\n      isDownloading: false,\r\n    };\r\n    window.muxjs = muxjs;\r\n    this.shakaRef = React.createRef();\r\n    this.progressBar = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.getShakaInst = () => this.shakRef.current;\r\n    this.setState(\r\n      {\r\n        video: this.props.location.state.selectedVideo,\r\n        src: this.props.location.state.selectedVideo.url,\r\n        videoId: this.props.location.state.selectedVideo.id,\r\n      },\r\n      () => {\r\n        let video = shaka.videoElement;\r\n        let player = new shaka.Player(video);\r\n        window.player = player;\r\n        this.initStorage(player);\r\n        this.showPlayer();\r\n      }\r\n    );\r\n  }\r\n\r\n  selectTracks = (tracks) => {\r\n    // This example stores the highest bandwidth variant.\r\n    //\r\n    // Note that this is just an example of an arbitrary algorithm, and not a best\r\n    // practice for storing content offline.  Decide what your app needs, or keep\r\n    // the default (user-pref-matching audio, best SD video, all text).\r\n    const found = tracks\r\n      .filter(function (track) {\r\n        return track.type == \"variant\";\r\n      })\r\n      .sort(function (a, b) {\r\n        return a.bandwidth - b.bandwidth;\r\n      })\r\n      .pop();\r\n    console.log(\"Offline Track bandwidth: \" + found.bandwidth);\r\n    return [found];\r\n  };\r\n\r\n  initStorage = (player) => {\r\n    window.storage = new shaka.offline.Storage(player);\r\n    window.storage.configure({\r\n      offline: {\r\n        progressCallback: this.setDownloadProgress,\r\n        trackSelectionCallback: this.selectTracks,\r\n      },\r\n    });\r\n  };\r\n\r\n  setDownloadProgress = (content, progress) => {\r\n    const progressBar = this.progressBar.current;\r\n    progressBar.value = progress * progressBar.max;\r\n  };\r\n\r\n  listContent = async () => {\r\n    let content = await window.storage.list();\r\n    console.log(content);\r\n    this.setState(\r\n      {\r\n        content: content,\r\n      },\r\n      () => {\r\n        this.playContent();\r\n      }\r\n    );\r\n    return content;\r\n  };\r\n\r\n  playContent = () => {\r\n    let offlineSRC;\r\n    this.state.content.forEach((content) => {\r\n      if (content.appMetadata.videoId === this.state.videoId) {\r\n        offlineSRC = content.offlineUri;\r\n      }\r\n    });\r\n    if (offlineSRC) {\r\n      this.setState({ src: offlineSRC, offlineAvail: true });\r\n    }\r\n    // window.player.load(content.offlineUri);\r\n  };\r\n\r\n  removeContent = () => {\r\n    let offlineSRC;\r\n    this.state.content.forEach((content) => {\r\n      if (content.appMetadata.videoId === this.state.videoId) {\r\n        offlineSRC = content.offlineUri;\r\n      }\r\n    });\r\n    if (offlineSRC) {\r\n      this.setState(\r\n        (prevState) => ({ src: prevState.video.url, offlineAvail: false }),\r\n        () => {\r\n          window.storage.remove(offlineSRC);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  downloadContent = (manifestUri, title, videoId) => {\r\n    const metadata = {\r\n      title: title,\r\n      downloaded: Date(),\r\n      videoId: videoId,\r\n    };\r\n    console.log(metadata);\r\n    console.log(manifestUri);\r\n    return window.storage.store(manifestUri, metadata);\r\n  };\r\n\r\n  onDownloadClick = () => {\r\n    let manifestUri = this.state.video.url;\r\n    let title = this.state.video.name;\r\n    let videoId = this.state.videoId;\r\n    this.setState({ isDownloading: true }, () => {\r\n      console.log(\"1st\");\r\n      this.setDownloadProgress(null, 0);\r\n    });\r\n    this.downloadContent(manifestUri, title, videoId)\r\n      .then(() => {\r\n        console.log(\"downloaded\");\r\n        this.setDownloadProgress(null, 1);\r\n        return this.listContent();\r\n      })\r\n      .then((content) => {\r\n        console.log(\"2\");\r\n        console.log(content);\r\n        this.setState({ isDownloading: false });\r\n      })\r\n      .catch((error) => {\r\n        // In the case of an error, re-enable the download button so\r\n        // that the user can try to download another item.\r\n        this.setState({ isDownloading: false });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  showPlayer = () => {\r\n    this.setState(\r\n      (prevState) => ({\r\n        show: !prevState.show,\r\n      }),\r\n      () => {\r\n        this.listContent();\r\n      }\r\n    );\r\n  };\r\n\r\n  showDescription = () => {\r\n    this.setState((prevState) => ({\r\n      description: !prevState.description,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"video-container\">\r\n        {this.state.show && (\r\n          <div>\r\n            <ShakaPlayer\r\n              className=\"shaka-video\"\r\n              ref={this.shakaRef}\r\n              autoPlay\r\n              src={this.state.src}\r\n            />\r\n            <div className=\"video-detail-box\">\r\n              <div>\r\n                <h3 className=\"video-title\">{this.state.video.name}</h3>\r\n                <p className=\"video-date\">{this.state.video.creationDate}</p>\r\n              </div>\r\n              <div>\r\n                {this.state.offlineAvail ? (\r\n                  <DeleteIcon\r\n                    onClick={this.removeContent}\r\n                    className=\"video-icon\"\r\n                  />\r\n                ) : (\r\n                  <span>\r\n                    {this.state.isDownloading ? (\r\n                      <progress ref={this.progressBar} value=\"0\" max=\"100\" />\r\n                    ) : (\r\n                      <DownloadButton\r\n                        onClick={this.onDownloadClick}\r\n                        className=\"video-icon\"\r\n                      />\r\n                    )}\r\n                  </span>\r\n                )}\r\n                <Angle\r\n                  onClick={this.showDescription}\r\n                  className={`video-icon ${\r\n                    this.state.description ? \"rotate\" : null\r\n                  }`}\r\n                />\r\n              </div>\r\n            </div>\r\n            {this.state.description && (\r\n              <div className=\"video-description-box\">\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: this.state.video.description,\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyShakaPlayer;\r\n"]},"metadata":{},"sourceType":"module"}
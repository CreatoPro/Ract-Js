{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\feedback-form\\\\InstructorFeedback.jsx\";\nimport React, { Component } from \"react\";\nimport { Container, Accordion, Card, Button, ListGroup, ListGroupItem, Badge } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport ApiService from \"../../_services/ApiService\";\nimport { ILoader } from '../../_components/iloader/iloader';\nimport Config from '../../_config/config';\nimport './FeedbackForm.css';\nimport swal from 'sweetalert';\nimport Iframe from \"../../_components/iframe/iframe\";\n\nclass InstructorFeedback extends Component {\n  constructor(props) {\n    super(props); //console.log(\"InstructorFeedback -> constructor()... \");\n\n    this.toggleLoading = () => {\n      //console.log(\"InstructorFeedback -> toggleLoading()... \");\n      this.setState(state => ({\n        showLoading: !state.showLoading\n      }));\n    };\n\n    this.state = {\n      message: null,\n      showLoading: false,\n      courseFeedbackFormBeans: []\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"FeedbackForm -> componentDidMount()... \");\n    this.init();\n  }\n\n  init() {\n    //console.log(\"FeedbackForm -> init()... \");        \n    this.setState({\n      showLoading: true\n    }, () => {\n      ApiService.getInstructorFeedbackForms().then(res => {\n        console.log(\"InstructorFeedback -> init(); res : \" + JSON.stringify(res.data.data));\n        this.setState({\n          showLoading: false,\n          courseFeedbackFormBeans: res.data.data\n        });\n      });\n    });\n  }\n\n  giveFeedback(feedbackFormId, employeeFeedbackBean, courseId) {\n    let instructorId = employeeFeedbackBean.id;\n    let instructorName = employeeFeedbackBean.name;\n\n    let _path = '/feedback/form/' + feedbackFormId + '/instructor/' + instructorId + '/course/' + courseId;\n\n    let data = {\n      'instructorName': instructorName\n    };\n    data.studyResource = {\n      id: feedbackFormId,\n      name: 'Feedback1'\n    };\n    this.props.history.push({\n      pathname: _path,\n      state: data\n    });\n  }\n\n  render() {\n    //console.log(\"InstructorFeedback -> render()... \");        \n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.renderHeader(), this.renderBody()), this.renderLoader()));\n  }\n\n  renderHeader() {\n    //console.log(\"InstructorFeedback -> renderHeader()... \");\n    let CURRENT_PORTLET = JSON.parse(localStorage['portlet']);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `ilearn-plain-header ${CURRENT_PORTLET.class}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      onClick: this.props.history.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }\n    }, CURRENT_PORTLET.name));\n  }\n\n  renderBody() {\n    var _this$state;\n\n    //console.log(\"InstructorFeedback -> renderBody()... \");\n    const courseFeedbackBeans = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.courseFeedbackFormBeans;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, courseFeedbackBeans.map((courseFeedbackBean, index) => {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      }, courseFeedbackBean.courseName, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n        as: Button,\n        variant: \"link\",\n        eventKey: \"0\",\n        className: \"float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faChevronDown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 41\n        }\n      }))), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: `${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }\n      }, this.renderEmployeeFeedbackBeans(courseFeedbackBean.courseId, courseFeedbackBean.employeeFeedbackBeans)));\n    })));\n  }\n\n  renderEmployeeFeedbackBeans(courseId, employeeFeedbackBeans) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListGroup, {\n      className: \"list-group-flush\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, employeeFeedbackBeans.map((employeeFeedbackBean, index) => {\n      return /*#__PURE__*/React.createElement(ListGroupItem, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }\n      }, employeeFeedbackBean.name, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      }, [...Array(employeeFeedbackBean.numberOfFeedbackAvailable)].map((x, i) => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, employeeFeedbackBean['responseForLink' + (i + 1)] === true && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Badge, {\n          variant: \"success\",\n          className: \"instructor_feedback_button\",\n          onClick: () => this.giveFeedback(employeeFeedbackBean['link' + (i + 1)], employeeFeedbackBean, courseId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 49\n          }\n        }, \"Feedback \", i + 1, \" Given\"), ' '), employeeFeedbackBean['responseForLink' + (i + 1)] == false && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Badge, {\n          variant: \"warning\",\n          className: \"instructor_feedback_button\",\n          onClick: () => this.giveFeedback(employeeFeedbackBean['link' + (i + 1)], employeeFeedbackBean, courseId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 49\n          }\n        }, \"Give Feedback \", i + 1), ' '));\n      })));\n    })));\n  }\n\n  renderLoader() {\n    //console.log(\"InstructorFeedback -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport { InstructorFeedback };\n/*\r\n    References:\r\n    Card -> https://getbootstrap.com/docs/4.0/components/card/\r\n\r\n*/","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/feedback-form/InstructorFeedback.jsx"],"names":["React","Component","Container","Accordion","Card","Button","ListGroup","ListGroupItem","Badge","FontAwesomeIcon","faArrowLeft","faChevronDown","faChevronUp","ApiService","ILoader","Config","swal","Iframe","InstructorFeedback","constructor","props","toggleLoading","setState","state","showLoading","message","courseFeedbackFormBeans","componentDidMount","init","getInstructorFeedbackForms","then","res","console","log","JSON","stringify","data","giveFeedback","feedbackFormId","employeeFeedbackBean","courseId","instructorId","id","instructorName","name","_path","studyResource","history","push","pathname","render","renderHeader","renderBody","renderLoader","CURRENT_PORTLET","parse","localStorage","class","goBack","courseFeedbackBeans","map","courseFeedbackBean","index","courseName","renderEmployeeFeedbackBeans","employeeFeedbackBeans","Array","numberOfFeedbackAvailable","x","i","_loadingText"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Accordion , Card, Button, ListGroup, ListGroupItem, Badge } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport ApiService from \"../../_services/ApiService\";\r\nimport {ILoader} from '../../_components/iloader/iloader';\r\nimport Config from '../../_config/config'\r\nimport './FeedbackForm.css';\r\nimport swal from 'sweetalert';\r\nimport Iframe from \"../../_components/iframe/iframe\";\r\n\r\nclass InstructorFeedback extends Component { \r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        //console.log(\"InstructorFeedback -> constructor()... \");\r\n        this.state = {\r\n            message: null,\r\n            showLoading: false,\r\n            courseFeedbackFormBeans : []           \r\n        };       \r\n    }\r\n    \r\n    componentDidMount() {\r\n        //console.log(\"FeedbackForm -> componentDidMount()... \");\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        //console.log(\"FeedbackForm -> init()... \");        \r\n        this.setState({ showLoading: true }, () => {\r\n            ApiService.getInstructorFeedbackForms()\r\n            .then((res) => {\r\n              console.log(\"InstructorFeedback -> init(); res : \"+JSON.stringify(res.data.data));\r\n              this.setState({\r\n                showLoading: false,\r\n                courseFeedbackFormBeans : res.data.data\r\n              });\r\n            });\r\n        });\r\n    }\r\n\r\n    giveFeedback(feedbackFormId, employeeFeedbackBean, courseId) {\r\n        let instructorId = employeeFeedbackBean.id\r\n        let instructorName = employeeFeedbackBean.name\r\n        let _path = '/feedback/form/'+feedbackFormId+'/instructor/'+instructorId+'/course/'+courseId;\r\n        let data = {'instructorName': instructorName};\r\n\t\tdata.studyResource = {id:feedbackFormId, name:'Feedback1'};\r\n\t\tthis.props.history.push({pathname: _path, state: data});\r\n    }\r\n    \r\n    render() {\r\n        //console.log(\"InstructorFeedback -> render()... \");        \r\n        return (  \r\n            <>                \r\n                <Container fluid >\r\n                    <>\r\n                        {this.renderHeader()}\r\n                        {this.renderBody()}\r\n                    </>\r\n                    {this.renderLoader()}                    \r\n                </Container>\r\n            </>           \r\n              \r\n        );\r\n    }\r\n\r\n    renderHeader() {\r\n        //console.log(\"InstructorFeedback -> renderHeader()... \");\r\n        let CURRENT_PORTLET = JSON.parse(localStorage['portlet']);\r\n        return (\r\n            <div className={`ilearn-plain-header ${CURRENT_PORTLET.class}`}>\r\n                <div className=\"back\">\r\n                    <FontAwesomeIcon icon={ faArrowLeft } onClick={this.props.history.goBack} />\r\n                </div>\r\n                {\r\n                   <h4>{CURRENT_PORTLET.name}</h4>  \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBody() {\r\n        //console.log(\"InstructorFeedback -> renderBody()... \");\r\n        const courseFeedbackBeans = this.state?.courseFeedbackFormBeans;\r\n        return (\r\n            <>\r\n                <Accordion defaultActiveKey=\"0\">\r\n                {\r\n                    courseFeedbackBeans.map((courseFeedbackBean, index) => {\r\n                        return (                        \r\n                            <Card key={index}>\r\n                                <Card.Header>\r\n                                    {courseFeedbackBean.courseName}\r\n                                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className=\"float-right\">\r\n                                        <FontAwesomeIcon icon={ faChevronDown } />\r\n                                    </Accordion.Toggle>\r\n                                </Card.Header>\r\n                                <Accordion.Collapse eventKey={`${index}`}>\r\n                                    {this.renderEmployeeFeedbackBeans(courseFeedbackBean.courseId, courseFeedbackBean.employeeFeedbackBeans)}\r\n                                </Accordion.Collapse>\r\n                            </Card>                        \r\n                        )\r\n                    })\r\n                }\r\n                </Accordion>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEmployeeFeedbackBeans(courseId, employeeFeedbackBeans) {\r\n        return (\r\n            <>\r\n            <ListGroup className=\"list-group-flush\">\r\n            {\r\n                employeeFeedbackBeans.map((employeeFeedbackBean, index) => {\r\n                    return (\r\n                        <ListGroupItem key={index}>{employeeFeedbackBean.name}\r\n                            <div>\r\n                                {[...Array(employeeFeedbackBean.numberOfFeedbackAvailable)].map((x, i) => {\r\n                                        return(\r\n                                            <>\r\n                                            {employeeFeedbackBean['responseForLink'+(i+1)] === true && \r\n                                                <>\r\n                                                <Badge variant=\"success\" className=\"instructor_feedback_button\" onClick={()=>this.giveFeedback(employeeFeedbackBean['link'+(i+1)], employeeFeedbackBean, courseId)}>\r\n                                                    Feedback {i+1} Given\r\n                                                </Badge>{' '}\r\n                                                </>\r\n                                            }\r\n                                            {employeeFeedbackBean['responseForLink'+(i+1)] == false && \r\n                                                <>    \r\n                                                <Badge variant=\"warning\" className=\"instructor_feedback_button\" onClick={()=>this.giveFeedback(employeeFeedbackBean['link'+(i+1)], employeeFeedbackBean, courseId)}>\r\n                                                    Give Feedback {i+1}\r\n                                                </Badge>{' '}\r\n                                                </>\r\n                                            }\r\n                                            </>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </ListGroupItem>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n            </>\r\n        )\r\n    }\r\n    \r\n    renderLoader() {\r\n        //console.log(\"InstructorFeedback -> renderLoader()... \");\r\n        const _loadingText = 'Please wait...';\r\n        return (\r\n            <ILoader\r\n                loadingText={_loadingText}\r\n                isShow={this.state.showLoading}\r\n                >\r\n            </ILoader>\r\n        )\r\n    }\r\n\r\n    toggleLoading = () => {\r\n        //console.log(\"InstructorFeedback -> toggleLoading()... \");\r\n        this.setState(state => ({ showLoading: !state.showLoading }));\r\n    };\r\n\r\n}\r\n\r\n  \r\nexport {InstructorFeedback};\r\n\r\n/*\r\n    References:\r\n    Card -> https://getbootstrap.com/docs/4.0/components/card/\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}
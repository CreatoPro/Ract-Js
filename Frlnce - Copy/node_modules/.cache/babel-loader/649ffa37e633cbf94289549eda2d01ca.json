{"ast":null,"code":"'use strict';\n\nif (!process) {\n  var process = {\n    \"cwd\": function () {\n      return '/';\n    }\n  };\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + path);\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var start = res.length - 1;\n            var j = start;\n\n            for (; j >= 0; --j) {\n              if (res.charCodeAt(j) === 47\n              /*/*/\n              ) break;\n            }\n\n            if (j !== start) {\n              if (j === -1) res = '';else res = res.slice(0, j);\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('Parameter \"pathObject\" must be an object, not ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  posix: null\n};\nmodule.exports = posix;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/path-webpack/path.js"],"names":["process","assertPath","path","TypeError","normalizeStringPosix","allowAboveRoot","res","lastSlash","dots","code","i","length","charCodeAt","start","j","slice","_format","sep","pathObject","dir","root","base","name","ext","posix","resolve","resolvedPath","resolvedAbsolute","cwd","arguments","undefined","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","parse","ret","delimiter","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nif (!process) {\n  var process = {\n    \"cwd\" : function () { return '/' }\n  };\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + path);\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47/*/*/)\n      break;\n    else\n      code = 47/*/*/;\n    if (code === 47/*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 ||\n            res.charCodeAt(res.length - 1) !== 46/*.*/ ||\n            res.charCodeAt(res.length - 2) !== 46/*.*/) {\n          if (res.length > 2) {\n            var start = res.length - 1;\n            var j = start;\n            for (; j >= 0; --j) {\n              if (res.charCodeAt(j) === 47/*/*/)\n                break;\n            }\n            if (j !== start) {\n              if (j === -1)\n                res = '';\n              else\n                res = res.slice(0, j);\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46/*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base ||\n    ((pathObject.name || '') + (pathObject.ext || ''));\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47/*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0)\n      return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47/*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47/*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute)\n      path = '.';\n    if (path.length > 0 && trailingSeparator)\n      path += '/';\n\n    if (isAbsolute)\n      return '/' + path;\n    return path;\n  },\n\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47/*/*/;\n  },\n\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to)\n      return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to)\n      return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47/*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = (fromEnd - fromStart);\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47/*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = (toEnd - toStart);\n\n    // Compare paths to find the longest common path from root\n    var length = (fromLen < toLen ? fromLen : toLen);\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47/*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47/*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47/*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47/*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47/*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0)\n      return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = (code === 47/*/*/);\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1)\n      return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1)\n      return '//';\n    return path.slice(0, end);\n  },\n\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string')\n      throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path)\n        return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47/*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47/*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1)\n        return '';\n      return path.slice(start, end);\n    }\n  },\n\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46/*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError(\n        'Parameter \"pathObject\" must be an object, not ' + typeof(pathObject)\n      );\n    }\n    return _format('/', pathObject);\n  },\n\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0)\n      return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = (code === 47/*/*/);\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46/*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute)\n          ret.base = ret.name = path.slice(1, end);\n        else\n          ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0)\n      ret.dir = path.slice(0, startPart - 1);\n    else if (isAbsolute)\n      ret.dir = '/';\n\n    return ret;\n  },\n\n\n  sep: '/',\n  delimiter: ':',\n  posix: null\n};\n\n\nmodule.exports = posix;\n"]},"metadata":{},"sourceType":"script"}
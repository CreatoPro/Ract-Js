{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _eventEmitter = _interopRequireDefault(require(\"event-emitter\"));\n\nvar _core = require(\"./utils/core\");\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _spine = _interopRequireDefault(require(\"./spine\"));\n\nvar _locations = _interopRequireDefault(require(\"./locations\"));\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _packaging = _interopRequireDefault(require(\"./packaging\"));\n\nvar _navigation = _interopRequireDefault(require(\"./navigation\"));\n\nvar _resources = _interopRequireDefault(require(\"./resources\"));\n\nvar _pagelist = _interopRequireDefault(require(\"./pagelist\"));\n\nvar _rendition = _interopRequireDefault(require(\"./rendition\"));\n\nvar _archive = _interopRequireDefault(require(\"./archive\"));\n\nvar _request2 = _interopRequireDefault(require(\"./utils/request\"));\n\nvar _epubcfi = _interopRequireDefault(require(\"./epubcfi\"));\n\nvar _store = _interopRequireDefault(require(\"./store\"));\n\nvar _displayoptions = _interopRequireDefault(require(\"./displayoptions\"));\n\nvar _constants = require(\"./utils/constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst CONTAINER_PATH = \"META-INF/container.xml\";\nconst IBOOKS_DISPLAY_OPTIONS_PATH = \"META-INF/com.apple.ibooks.display-options.xml\";\nconst INPUT_TYPE = {\n  BINARY: \"binary\",\n  BASE64: \"base64\",\n  EPUB: \"epub\",\n  OPF: \"opf\",\n  MANIFEST: \"json\",\n  DIRECTORY: \"directory\"\n};\n/**\n * An Epub representation with methods for the loading, parsing and manipulation\n * of its contents.\n * @class\n * @param {string} [url]\n * @param {object} [options]\n * @param {method} [options.requestMethod] a request function to use instead of the default\n * @param {boolean} [options.requestCredentials=undefined] send the xhr request withCredentials\n * @param {object} [options.requestHeaders=undefined] send the xhr request headers\n * @param {string} [options.encoding=binary] optional to pass 'binary' or base64' for archived Epubs\n * @param {string} [options.replacements=none] use base64, blobUrl, or none for replacing assets in archived Epubs\n * @param {method} [options.canonical] optional function to determine canonical urls for a path\n * @param {string} [options.openAs] optional string to determine the input type\n * @param {string} [options.store=false] cache the contents in local storage, value should be the name of the reader\n * @returns {Book}\n * @example new Book(\"/path/to/book.epub\", {})\n * @example new Book({ replacements: \"blobUrl\" })\n */\n\nclass Book {\n  constructor(url, options) {\n    // Allow passing just options to the Book\n    if (typeof options === \"undefined\" && typeof url !== \"string\" && url instanceof Blob === false && url instanceof ArrayBuffer === false) {\n      options = url;\n      url = undefined;\n    }\n\n    this.settings = (0, _core.extend)(this.settings || {}, {\n      requestMethod: undefined,\n      requestCredentials: undefined,\n      requestHeaders: undefined,\n      encoding: undefined,\n      replacements: undefined,\n      canonical: undefined,\n      openAs: undefined,\n      store: undefined\n    });\n    (0, _core.extend)(this.settings, options); // Promises\n\n    this.opening = new _core.defer();\n    /**\n     * @member {promise} opened returns after the book is loaded\n     * @memberof Book\n     */\n\n    this.opened = this.opening.promise;\n    this.isOpen = false;\n    this.loading = {\n      manifest: new _core.defer(),\n      spine: new _core.defer(),\n      metadata: new _core.defer(),\n      cover: new _core.defer(),\n      navigation: new _core.defer(),\n      pageList: new _core.defer(),\n      resources: new _core.defer(),\n      displayOptions: new _core.defer()\n    };\n    this.loaded = {\n      manifest: this.loading.manifest.promise,\n      spine: this.loading.spine.promise,\n      metadata: this.loading.metadata.promise,\n      cover: this.loading.cover.promise,\n      navigation: this.loading.navigation.promise,\n      pageList: this.loading.pageList.promise,\n      resources: this.loading.resources.promise,\n      displayOptions: this.loading.displayOptions.promise\n    };\n    /**\n     * @member {promise} ready returns after the book is loaded and parsed\n     * @memberof Book\n     * @private\n     */\n\n    this.ready = Promise.all([this.loaded.manifest, this.loaded.spine, this.loaded.metadata, this.loaded.cover, this.loaded.navigation, this.loaded.resources, this.loaded.displayOptions]); // Queue for methods used before opening\n\n    this.isRendered = false; // this._q = queue(this);\n\n    /**\n     * @member {method} request\n     * @memberof Book\n     * @private\n     */\n\n    this.request = this.settings.requestMethod || _request2.default;\n    /**\n     * @member {Spine} spine\n     * @memberof Book\n     */\n\n    this.spine = new _spine.default();\n    /**\n     * @member {Locations} locations\n     * @memberof Book\n     */\n\n    this.locations = new _locations.default(this.spine, this.load.bind(this));\n    /**\n     * @member {Navigation} navigation\n     * @memberof Book\n     */\n\n    this.navigation = undefined;\n    /**\n     * @member {PageList} pagelist\n     * @memberof Book\n     */\n\n    this.pageList = undefined;\n    /**\n     * @member {Url} url\n     * @memberof Book\n     * @private\n     */\n\n    this.url = undefined;\n    /**\n     * @member {Path} path\n     * @memberof Book\n     * @private\n     */\n\n    this.path = undefined;\n    /**\n     * @member {boolean} archived\n     * @memberof Book\n     * @private\n     */\n\n    this.archived = false;\n    /**\n     * @member {Archive} archive\n     * @memberof Book\n     * @private\n     */\n\n    this.archive = undefined;\n    /**\n     * @member {Store} storage\n     * @memberof Book\n     * @private\n     */\n\n    this.storage = undefined;\n    /**\n     * @member {Resources} resources\n     * @memberof Book\n     * @private\n     */\n\n    this.resources = undefined;\n    /**\n     * @member {Rendition} rendition\n     * @memberof Book\n     * @private\n     */\n\n    this.rendition = undefined;\n    /**\n     * @member {Container} container\n     * @memberof Book\n     * @private\n     */\n\n    this.container = undefined;\n    /**\n     * @member {Packaging} packaging\n     * @memberof Book\n     * @private\n     */\n\n    this.packaging = undefined;\n    /**\n     * @member {DisplayOptions} displayOptions\n     * @memberof DisplayOptions\n     * @private\n     */\n\n    this.displayOptions = undefined; // this.toc = undefined;\n\n    if (this.settings.store) {\n      this.store(this.settings.store);\n    }\n\n    if (url) {\n      this.open(url, this.settings.openAs).catch(error => {\n        var err = new Error(\"Cannot load book at \" + url);\n        this.emit(_constants.EVENTS.BOOK.OPEN_FAILED, err);\n      });\n    }\n  }\n  /**\n   * Open a epub or url\n   * @param {string | ArrayBuffer} input Url, Path or ArrayBuffer\n   * @param {string} [what=\"binary\", \"base64\", \"epub\", \"opf\", \"json\", \"directory\"] force opening as a certain type\n   * @returns {Promise} of when the book has been loaded\n   * @example book.open(\"/path/to/book.epub\")\n   */\n\n\n  open(input, what) {\n    var opening;\n    var type = what || this.determineType(input);\n\n    if (type === INPUT_TYPE.BINARY) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.openEpub(input);\n    } else if (type === INPUT_TYPE.BASE64) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.openEpub(input, type);\n    } else if (type === INPUT_TYPE.EPUB) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.request(input, \"binary\", this.settings.requestCredentials, this.settings.requestHeaders).then(this.openEpub.bind(this));\n    } else if (type == INPUT_TYPE.OPF) {\n      this.url = new _url.default(input);\n      opening = this.openPackaging(this.url.Path.toString());\n    } else if (type == INPUT_TYPE.MANIFEST) {\n      this.url = new _url.default(input);\n      opening = this.openManifest(this.url.Path.toString());\n    } else {\n      this.url = new _url.default(input);\n      opening = this.openContainer(CONTAINER_PATH).then(this.openPackaging.bind(this));\n    }\n\n    return opening;\n  }\n  /**\n   * Open an archived epub\n   * @private\n   * @param  {binary} data\n   * @param  {string} [encoding]\n   * @return {Promise}\n   */\n\n\n  openEpub(data, encoding) {\n    return this.unarchive(data, encoding || this.settings.encoding).then(() => {\n      return this.openContainer(CONTAINER_PATH);\n    }).then(packagePath => {\n      return this.openPackaging(packagePath);\n    });\n  }\n  /**\n   * Open the epub container\n   * @private\n   * @param  {string} url\n   * @return {string} packagePath\n   */\n\n\n  openContainer(url) {\n    return this.load(url).then(xml => {\n      this.container = new _container.default(xml);\n      return this.resolve(this.container.packagePath);\n    });\n  }\n  /**\n   * Open the Open Packaging Format Xml\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n\n\n  openPackaging(url) {\n    this.path = new _path.default(url);\n    return this.load(url).then(xml => {\n      this.packaging = new _packaging.default(xml);\n      return this.unpack(this.packaging);\n    });\n  }\n  /**\n   * Open the manifest JSON\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n\n\n  openManifest(url) {\n    this.path = new _path.default(url);\n    return this.load(url).then(json => {\n      this.packaging = new _packaging.default();\n      this.packaging.load(json);\n      return this.unpack(this.packaging);\n    });\n  }\n  /**\n   * Load a resource from the Book\n   * @param  {string} path path to the resource to load\n   * @return {Promise}     returns a promise with the requested resource\n   */\n\n\n  load(path) {\n    var resolved = this.resolve(path);\n\n    if (this.archived) {\n      return this.archive.request(resolved);\n    } else {\n      return this.request(resolved, null, this.settings.requestCredentials, this.settings.requestHeaders);\n    }\n  }\n  /**\n   * Resolve a path to it's absolute position in the Book\n   * @param  {string} path\n   * @param  {boolean} [absolute] force resolving the full URL\n   * @return {string}          the resolved path string\n   */\n\n\n  resolve(path, absolute) {\n    if (!path) {\n      return;\n    }\n\n    var resolved = path;\n    var isAbsolute = path.indexOf(\"://\") > -1;\n\n    if (isAbsolute) {\n      return path;\n    }\n\n    if (this.path) {\n      resolved = this.path.resolve(path);\n    }\n\n    if (absolute != false && this.url) {\n      resolved = this.url.resolve(resolved);\n    }\n\n    return resolved;\n  }\n  /**\n   * Get a canonical link to a path\n   * @param  {string} path\n   * @return {string} the canonical path string\n   */\n\n\n  canonical(path) {\n    var url = path;\n\n    if (!path) {\n      return \"\";\n    }\n\n    if (this.settings.canonical) {\n      url = this.settings.canonical(path);\n    } else {\n      url = this.resolve(path, true);\n    }\n\n    return url;\n  }\n  /**\n   * Determine the type of they input passed to open\n   * @private\n   * @param  {string} input\n   * @return {string}  binary | directory | epub | opf\n   */\n\n\n  determineType(input) {\n    var url;\n    var path;\n    var extension;\n\n    if (this.settings.encoding === \"base64\") {\n      return INPUT_TYPE.BASE64;\n    }\n\n    if (typeof input != \"string\") {\n      return INPUT_TYPE.BINARY;\n    }\n\n    url = new _url.default(input);\n    path = url.path();\n    extension = path.extension; // If there's a search string, remove it before determining type\n\n    if (extension) {\n      extension = extension.replace(/\\?.*$/, \"\");\n    }\n\n    if (!extension) {\n      return INPUT_TYPE.DIRECTORY;\n    }\n\n    if (extension === \"epub\") {\n      return INPUT_TYPE.EPUB;\n    }\n\n    if (extension === \"opf\") {\n      return INPUT_TYPE.OPF;\n    }\n\n    if (extension === \"json\") {\n      return INPUT_TYPE.MANIFEST;\n    }\n  }\n  /**\n   * unpack the contents of the Books packaging\n   * @private\n   * @param {Packaging} packaging object\n   */\n\n\n  unpack(packaging) {\n    this.package = packaging; //TODO: deprecated this\n\n    if (this.packaging.metadata.layout === \"\") {\n      // rendition:layout not set - check display options if book is pre-paginated\n      this.load(this.url.resolve(IBOOKS_DISPLAY_OPTIONS_PATH)).then(xml => {\n        this.displayOptions = new _displayoptions.default(xml);\n        this.loading.displayOptions.resolve(this.displayOptions);\n      }).catch(err => {\n        this.displayOptions = new _displayoptions.default();\n        this.loading.displayOptions.resolve(this.displayOptions);\n      });\n    } else {\n      this.displayOptions = new _displayoptions.default();\n      this.loading.displayOptions.resolve(this.displayOptions);\n    }\n\n    this.spine.unpack(this.packaging, this.resolve.bind(this), this.canonical.bind(this));\n    this.resources = new _resources.default(this.packaging.manifest, {\n      archive: this.archive,\n      resolver: this.resolve.bind(this),\n      request: this.request.bind(this),\n      replacements: this.settings.replacements || (this.archived ? \"blobUrl\" : \"base64\")\n    });\n    this.loadNavigation(this.packaging).then(() => {\n      // this.toc = this.navigation.toc;\n      this.loading.navigation.resolve(this.navigation);\n    });\n\n    if (this.packaging.coverPath) {\n      this.cover = this.resolve(this.packaging.coverPath);\n    } // Resolve promises\n\n\n    this.loading.manifest.resolve(this.packaging.manifest);\n    this.loading.metadata.resolve(this.packaging.metadata);\n    this.loading.spine.resolve(this.spine);\n    this.loading.cover.resolve(this.cover);\n    this.loading.resources.resolve(this.resources);\n    this.loading.pageList.resolve(this.pageList);\n    this.isOpen = true;\n\n    if (this.archived || this.settings.replacements && this.settings.replacements != \"none\") {\n      this.replacements().then(() => {\n        this.loaded.displayOptions.then(() => {\n          this.opening.resolve(this);\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      // Resolve book opened promise\n      this.loaded.displayOptions.then(() => {\n        this.opening.resolve(this);\n      });\n    }\n  }\n  /**\n   * Load Navigation and PageList from package\n   * @private\n   * @param {Packaging} packaging\n   */\n\n\n  loadNavigation(packaging) {\n    let navPath = packaging.navPath || packaging.ncxPath;\n    let toc = packaging.toc; // From json manifest\n\n    if (toc) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new _navigation.default(toc);\n\n        if (packaging.pageList) {\n          this.pageList = new _pagelist.default(packaging.pageList); // TODO: handle page lists from Manifest\n        }\n\n        resolve(this.navigation);\n      });\n    }\n\n    if (!navPath) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new _navigation.default();\n        this.pageList = new _pagelist.default();\n        resolve(this.navigation);\n      });\n    }\n\n    return this.load(navPath, \"xml\").then(xml => {\n      this.navigation = new _navigation.default(xml);\n      this.pageList = new _pagelist.default(xml);\n      return this.navigation;\n    });\n  }\n  /**\n   * Gets a Section of the Book from the Spine\n   * Alias for `book.spine.get`\n   * @param {string} target\n   * @return {Section}\n   */\n\n\n  section(target) {\n    return this.spine.get(target);\n  }\n  /**\n   * Sugar to render a book to an element\n   * @param  {element | string} element element or string to add a rendition to\n   * @param  {object} [options]\n   * @return {Rendition}\n   */\n\n\n  renderTo(element, options) {\n    this.rendition = new _rendition.default(this, options);\n    this.rendition.attachTo(element);\n    return this.rendition;\n  }\n  /**\n   * Set if request should use withCredentials\n   * @param {boolean} credentials\n   */\n\n\n  setRequestCredentials(credentials) {\n    this.settings.requestCredentials = credentials;\n  }\n  /**\n   * Set headers request should use\n   * @param {object} headers\n   */\n\n\n  setRequestHeaders(headers) {\n    this.settings.requestHeaders = headers;\n  }\n  /**\n   * Unarchive a zipped epub\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Archive}\n   */\n\n\n  unarchive(input, encoding) {\n    this.archive = new _archive.default();\n    return this.archive.open(input, encoding);\n  }\n  /**\n   * Store the epubs contents\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Store}\n   */\n\n\n  store(name) {\n    // Use \"blobUrl\" or \"base64\" for replacements\n    let replacementsSetting = this.settings.replacements && this.settings.replacements !== \"none\"; // Save original url\n\n    let originalUrl = this.url; // Save original request method\n\n    let requester = this.settings.requestMethod || _request2.default.bind(this); // Create new Store\n\n\n    this.storage = new _store.default(name, requester, this.resolve.bind(this)); // Replace request method to go through store\n\n    this.request = this.storage.request.bind(this.storage);\n    this.opened.then(() => {\n      if (this.archived) {\n        this.storage.requester = this.archive.request.bind(this.archive);\n      } // Substitute hook\n\n\n      let substituteResources = (output, section) => {\n        section.output = this.resources.substitute(output, section.url);\n      }; // Set to use replacements\n\n\n      this.resources.settings.replacements = replacementsSetting || \"blobUrl\"; // Create replacement urls\n\n      this.resources.replacements().then(() => {\n        return this.resources.replaceCss();\n      });\n      this.storage.on(\"offline\", () => {\n        // Remove url to use relative resolving for hrefs\n        this.url = new _url.default(\"/\", \"\"); // Add hook to replace resources in contents\n\n        this.spine.hooks.serialize.register(substituteResources);\n      });\n      this.storage.on(\"online\", () => {\n        // Restore original url\n        this.url = originalUrl; // Remove hook\n\n        this.spine.hooks.serialize.deregister(substituteResources);\n      });\n    });\n    return this.storage;\n  }\n  /**\n   * Get the cover url\n   * @return {Promise<?string>} coverUrl\n   */\n\n\n  coverUrl() {\n    return this.loaded.cover.then(() => {\n      if (!this.cover) {\n        return null;\n      }\n\n      if (this.archived) {\n        return this.archive.createUrl(this.cover);\n      } else {\n        return this.cover;\n      }\n    });\n  }\n  /**\n   * Load replacement urls\n   * @private\n   * @return {Promise} completed loading urls\n   */\n\n\n  replacements() {\n    this.spine.hooks.serialize.register((output, section) => {\n      section.output = this.resources.substitute(output, section.url);\n    });\n    return this.resources.replacements().then(() => {\n      return this.resources.replaceCss();\n    });\n  }\n  /**\n   * Find a DOM Range for a given CFI Range\n   * @param  {EpubCFI} cfiRange a epub cfi range\n   * @return {Promise}\n   */\n\n\n  getRange(cfiRange) {\n    var cfi = new _epubcfi.default(cfiRange);\n    var item = this.spine.get(cfi.spinePos);\n\n    var _request = this.load.bind(this);\n\n    if (!item) {\n      return new Promise((resolve, reject) => {\n        reject(\"CFI could not be found\");\n      });\n    }\n\n    return item.load(_request).then(function (contents) {\n      var range = cfi.toRange(item.document);\n      return range;\n    });\n  }\n  /**\n   * Generates the Book Key using the identifier in the manifest or other string provided\n   * @param  {string} [identifier] to use instead of metadata identifier\n   * @return {string} key\n   */\n\n\n  key(identifier) {\n    var ident = identifier || this.packaging.metadata.identifier || this.url.filename;\n    return `epubjs:${_constants.EPUBJS_VERSION}:${ident}`;\n  }\n  /**\n   * Destroy the Book and all associated objects\n   */\n\n\n  destroy() {\n    this.opened = undefined;\n    this.loading = undefined;\n    this.loaded = undefined;\n    this.ready = undefined;\n    this.isOpen = false;\n    this.isRendered = false;\n    this.spine && this.spine.destroy();\n    this.locations && this.locations.destroy();\n    this.pageList && this.pageList.destroy();\n    this.archive && this.archive.destroy();\n    this.resources && this.resources.destroy();\n    this.container && this.container.destroy();\n    this.packaging && this.packaging.destroy();\n    this.rendition && this.rendition.destroy();\n    this.displayOptions && this.displayOptions.destroy();\n    this.spine = undefined;\n    this.locations = undefined;\n    this.pageList = undefined;\n    this.archive = undefined;\n    this.resources = undefined;\n    this.container = undefined;\n    this.packaging = undefined;\n    this.rendition = undefined;\n    this.navigation = undefined;\n    this.url = undefined;\n    this.path = undefined;\n    this.archived = false;\n  }\n\n} //-- Enable binding events to book\n\n\n(0, _eventEmitter.default)(Book.prototype);\nvar _default = Book;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/book.js"],"names":["Object","defineProperty","exports","value","default","_eventEmitter","_interopRequireDefault","require","_core","_url","_path","_spine","_locations","_container","_packaging","_navigation","_resources","_pagelist","_rendition","_archive","_request2","_epubcfi","_store","_displayoptions","_constants","obj","__esModule","CONTAINER_PATH","IBOOKS_DISPLAY_OPTIONS_PATH","INPUT_TYPE","BINARY","BASE64","EPUB","OPF","MANIFEST","DIRECTORY","Book","constructor","url","options","Blob","ArrayBuffer","undefined","settings","extend","requestMethod","requestCredentials","requestHeaders","encoding","replacements","canonical","openAs","store","opening","defer","opened","promise","isOpen","loading","manifest","spine","metadata","cover","navigation","pageList","resources","displayOptions","loaded","ready","Promise","all","isRendered","request","locations","load","bind","path","archived","archive","storage","rendition","container","packaging","open","catch","error","err","Error","emit","EVENTS","BOOK","OPEN_FAILED","input","what","type","determineType","openEpub","then","openPackaging","Path","toString","openManifest","openContainer","data","unarchive","packagePath","xml","resolve","unpack","json","resolved","absolute","isAbsolute","indexOf","extension","replace","package","layout","resolver","loadNavigation","coverPath","console","navPath","ncxPath","toc","reject","section","target","get","renderTo","element","attachTo","setRequestCredentials","credentials","setRequestHeaders","headers","name","replacementsSetting","originalUrl","requester","substituteResources","output","substitute","replaceCss","on","hooks","serialize","register","deregister","coverUrl","createUrl","getRange","cfiRange","cfi","item","spinePos","_request","contents","range","toRange","document","key","identifier","ident","filename","EPUBJS_VERSION","destroy","prototype","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _eventEmitter = _interopRequireDefault(require(\"event-emitter\"));\n\nvar _core = require(\"./utils/core\");\n\nvar _url = _interopRequireDefault(require(\"./utils/url\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _spine = _interopRequireDefault(require(\"./spine\"));\n\nvar _locations = _interopRequireDefault(require(\"./locations\"));\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _packaging = _interopRequireDefault(require(\"./packaging\"));\n\nvar _navigation = _interopRequireDefault(require(\"./navigation\"));\n\nvar _resources = _interopRequireDefault(require(\"./resources\"));\n\nvar _pagelist = _interopRequireDefault(require(\"./pagelist\"));\n\nvar _rendition = _interopRequireDefault(require(\"./rendition\"));\n\nvar _archive = _interopRequireDefault(require(\"./archive\"));\n\nvar _request2 = _interopRequireDefault(require(\"./utils/request\"));\n\nvar _epubcfi = _interopRequireDefault(require(\"./epubcfi\"));\n\nvar _store = _interopRequireDefault(require(\"./store\"));\n\nvar _displayoptions = _interopRequireDefault(require(\"./displayoptions\"));\n\nvar _constants = require(\"./utils/constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CONTAINER_PATH = \"META-INF/container.xml\";\nconst IBOOKS_DISPLAY_OPTIONS_PATH = \"META-INF/com.apple.ibooks.display-options.xml\";\nconst INPUT_TYPE = {\n  BINARY: \"binary\",\n  BASE64: \"base64\",\n  EPUB: \"epub\",\n  OPF: \"opf\",\n  MANIFEST: \"json\",\n  DIRECTORY: \"directory\"\n};\n/**\n * An Epub representation with methods for the loading, parsing and manipulation\n * of its contents.\n * @class\n * @param {string} [url]\n * @param {object} [options]\n * @param {method} [options.requestMethod] a request function to use instead of the default\n * @param {boolean} [options.requestCredentials=undefined] send the xhr request withCredentials\n * @param {object} [options.requestHeaders=undefined] send the xhr request headers\n * @param {string} [options.encoding=binary] optional to pass 'binary' or base64' for archived Epubs\n * @param {string} [options.replacements=none] use base64, blobUrl, or none for replacing assets in archived Epubs\n * @param {method} [options.canonical] optional function to determine canonical urls for a path\n * @param {string} [options.openAs] optional string to determine the input type\n * @param {string} [options.store=false] cache the contents in local storage, value should be the name of the reader\n * @returns {Book}\n * @example new Book(\"/path/to/book.epub\", {})\n * @example new Book({ replacements: \"blobUrl\" })\n */\n\nclass Book {\n  constructor(url, options) {\n    // Allow passing just options to the Book\n    if (typeof options === \"undefined\" && typeof url !== \"string\" && url instanceof Blob === false && url instanceof ArrayBuffer === false) {\n      options = url;\n      url = undefined;\n    }\n\n    this.settings = (0, _core.extend)(this.settings || {}, {\n      requestMethod: undefined,\n      requestCredentials: undefined,\n      requestHeaders: undefined,\n      encoding: undefined,\n      replacements: undefined,\n      canonical: undefined,\n      openAs: undefined,\n      store: undefined\n    });\n    (0, _core.extend)(this.settings, options); // Promises\n\n    this.opening = new _core.defer();\n    /**\n     * @member {promise} opened returns after the book is loaded\n     * @memberof Book\n     */\n\n    this.opened = this.opening.promise;\n    this.isOpen = false;\n    this.loading = {\n      manifest: new _core.defer(),\n      spine: new _core.defer(),\n      metadata: new _core.defer(),\n      cover: new _core.defer(),\n      navigation: new _core.defer(),\n      pageList: new _core.defer(),\n      resources: new _core.defer(),\n      displayOptions: new _core.defer()\n    };\n    this.loaded = {\n      manifest: this.loading.manifest.promise,\n      spine: this.loading.spine.promise,\n      metadata: this.loading.metadata.promise,\n      cover: this.loading.cover.promise,\n      navigation: this.loading.navigation.promise,\n      pageList: this.loading.pageList.promise,\n      resources: this.loading.resources.promise,\n      displayOptions: this.loading.displayOptions.promise\n    };\n    /**\n     * @member {promise} ready returns after the book is loaded and parsed\n     * @memberof Book\n     * @private\n     */\n\n    this.ready = Promise.all([this.loaded.manifest, this.loaded.spine, this.loaded.metadata, this.loaded.cover, this.loaded.navigation, this.loaded.resources, this.loaded.displayOptions]); // Queue for methods used before opening\n\n    this.isRendered = false; // this._q = queue(this);\n\n    /**\n     * @member {method} request\n     * @memberof Book\n     * @private\n     */\n\n    this.request = this.settings.requestMethod || _request2.default;\n    /**\n     * @member {Spine} spine\n     * @memberof Book\n     */\n\n    this.spine = new _spine.default();\n    /**\n     * @member {Locations} locations\n     * @memberof Book\n     */\n\n    this.locations = new _locations.default(this.spine, this.load.bind(this));\n    /**\n     * @member {Navigation} navigation\n     * @memberof Book\n     */\n\n    this.navigation = undefined;\n    /**\n     * @member {PageList} pagelist\n     * @memberof Book\n     */\n\n    this.pageList = undefined;\n    /**\n     * @member {Url} url\n     * @memberof Book\n     * @private\n     */\n\n    this.url = undefined;\n    /**\n     * @member {Path} path\n     * @memberof Book\n     * @private\n     */\n\n    this.path = undefined;\n    /**\n     * @member {boolean} archived\n     * @memberof Book\n     * @private\n     */\n\n    this.archived = false;\n    /**\n     * @member {Archive} archive\n     * @memberof Book\n     * @private\n     */\n\n    this.archive = undefined;\n    /**\n     * @member {Store} storage\n     * @memberof Book\n     * @private\n     */\n\n    this.storage = undefined;\n    /**\n     * @member {Resources} resources\n     * @memberof Book\n     * @private\n     */\n\n    this.resources = undefined;\n    /**\n     * @member {Rendition} rendition\n     * @memberof Book\n     * @private\n     */\n\n    this.rendition = undefined;\n    /**\n     * @member {Container} container\n     * @memberof Book\n     * @private\n     */\n\n    this.container = undefined;\n    /**\n     * @member {Packaging} packaging\n     * @memberof Book\n     * @private\n     */\n\n    this.packaging = undefined;\n    /**\n     * @member {DisplayOptions} displayOptions\n     * @memberof DisplayOptions\n     * @private\n     */\n\n    this.displayOptions = undefined; // this.toc = undefined;\n\n    if (this.settings.store) {\n      this.store(this.settings.store);\n    }\n\n    if (url) {\n      this.open(url, this.settings.openAs).catch(error => {\n        var err = new Error(\"Cannot load book at \" + url);\n        this.emit(_constants.EVENTS.BOOK.OPEN_FAILED, err);\n      });\n    }\n  }\n  /**\n   * Open a epub or url\n   * @param {string | ArrayBuffer} input Url, Path or ArrayBuffer\n   * @param {string} [what=\"binary\", \"base64\", \"epub\", \"opf\", \"json\", \"directory\"] force opening as a certain type\n   * @returns {Promise} of when the book has been loaded\n   * @example book.open(\"/path/to/book.epub\")\n   */\n\n\n  open(input, what) {\n    var opening;\n    var type = what || this.determineType(input);\n\n    if (type === INPUT_TYPE.BINARY) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.openEpub(input);\n    } else if (type === INPUT_TYPE.BASE64) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.openEpub(input, type);\n    } else if (type === INPUT_TYPE.EPUB) {\n      this.archived = true;\n      this.url = new _url.default(\"/\", \"\");\n      opening = this.request(input, \"binary\", this.settings.requestCredentials, this.settings.requestHeaders).then(this.openEpub.bind(this));\n    } else if (type == INPUT_TYPE.OPF) {\n      this.url = new _url.default(input);\n      opening = this.openPackaging(this.url.Path.toString());\n    } else if (type == INPUT_TYPE.MANIFEST) {\n      this.url = new _url.default(input);\n      opening = this.openManifest(this.url.Path.toString());\n    } else {\n      this.url = new _url.default(input);\n      opening = this.openContainer(CONTAINER_PATH).then(this.openPackaging.bind(this));\n    }\n\n    return opening;\n  }\n  /**\n   * Open an archived epub\n   * @private\n   * @param  {binary} data\n   * @param  {string} [encoding]\n   * @return {Promise}\n   */\n\n\n  openEpub(data, encoding) {\n    return this.unarchive(data, encoding || this.settings.encoding).then(() => {\n      return this.openContainer(CONTAINER_PATH);\n    }).then(packagePath => {\n      return this.openPackaging(packagePath);\n    });\n  }\n  /**\n   * Open the epub container\n   * @private\n   * @param  {string} url\n   * @return {string} packagePath\n   */\n\n\n  openContainer(url) {\n    return this.load(url).then(xml => {\n      this.container = new _container.default(xml);\n      return this.resolve(this.container.packagePath);\n    });\n  }\n  /**\n   * Open the Open Packaging Format Xml\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n\n\n  openPackaging(url) {\n    this.path = new _path.default(url);\n    return this.load(url).then(xml => {\n      this.packaging = new _packaging.default(xml);\n      return this.unpack(this.packaging);\n    });\n  }\n  /**\n   * Open the manifest JSON\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n\n\n  openManifest(url) {\n    this.path = new _path.default(url);\n    return this.load(url).then(json => {\n      this.packaging = new _packaging.default();\n      this.packaging.load(json);\n      return this.unpack(this.packaging);\n    });\n  }\n  /**\n   * Load a resource from the Book\n   * @param  {string} path path to the resource to load\n   * @return {Promise}     returns a promise with the requested resource\n   */\n\n\n  load(path) {\n    var resolved = this.resolve(path);\n\n    if (this.archived) {\n      return this.archive.request(resolved);\n    } else {\n      return this.request(resolved, null, this.settings.requestCredentials, this.settings.requestHeaders);\n    }\n  }\n  /**\n   * Resolve a path to it's absolute position in the Book\n   * @param  {string} path\n   * @param  {boolean} [absolute] force resolving the full URL\n   * @return {string}          the resolved path string\n   */\n\n\n  resolve(path, absolute) {\n    if (!path) {\n      return;\n    }\n\n    var resolved = path;\n    var isAbsolute = path.indexOf(\"://\") > -1;\n\n    if (isAbsolute) {\n      return path;\n    }\n\n    if (this.path) {\n      resolved = this.path.resolve(path);\n    }\n\n    if (absolute != false && this.url) {\n      resolved = this.url.resolve(resolved);\n    }\n\n    return resolved;\n  }\n  /**\n   * Get a canonical link to a path\n   * @param  {string} path\n   * @return {string} the canonical path string\n   */\n\n\n  canonical(path) {\n    var url = path;\n\n    if (!path) {\n      return \"\";\n    }\n\n    if (this.settings.canonical) {\n      url = this.settings.canonical(path);\n    } else {\n      url = this.resolve(path, true);\n    }\n\n    return url;\n  }\n  /**\n   * Determine the type of they input passed to open\n   * @private\n   * @param  {string} input\n   * @return {string}  binary | directory | epub | opf\n   */\n\n\n  determineType(input) {\n    var url;\n    var path;\n    var extension;\n\n    if (this.settings.encoding === \"base64\") {\n      return INPUT_TYPE.BASE64;\n    }\n\n    if (typeof input != \"string\") {\n      return INPUT_TYPE.BINARY;\n    }\n\n    url = new _url.default(input);\n    path = url.path();\n    extension = path.extension; // If there's a search string, remove it before determining type\n\n    if (extension) {\n      extension = extension.replace(/\\?.*$/, \"\");\n    }\n\n    if (!extension) {\n      return INPUT_TYPE.DIRECTORY;\n    }\n\n    if (extension === \"epub\") {\n      return INPUT_TYPE.EPUB;\n    }\n\n    if (extension === \"opf\") {\n      return INPUT_TYPE.OPF;\n    }\n\n    if (extension === \"json\") {\n      return INPUT_TYPE.MANIFEST;\n    }\n  }\n  /**\n   * unpack the contents of the Books packaging\n   * @private\n   * @param {Packaging} packaging object\n   */\n\n\n  unpack(packaging) {\n    this.package = packaging; //TODO: deprecated this\n\n    if (this.packaging.metadata.layout === \"\") {\n      // rendition:layout not set - check display options if book is pre-paginated\n      this.load(this.url.resolve(IBOOKS_DISPLAY_OPTIONS_PATH)).then(xml => {\n        this.displayOptions = new _displayoptions.default(xml);\n        this.loading.displayOptions.resolve(this.displayOptions);\n      }).catch(err => {\n        this.displayOptions = new _displayoptions.default();\n        this.loading.displayOptions.resolve(this.displayOptions);\n      });\n    } else {\n      this.displayOptions = new _displayoptions.default();\n      this.loading.displayOptions.resolve(this.displayOptions);\n    }\n\n    this.spine.unpack(this.packaging, this.resolve.bind(this), this.canonical.bind(this));\n    this.resources = new _resources.default(this.packaging.manifest, {\n      archive: this.archive,\n      resolver: this.resolve.bind(this),\n      request: this.request.bind(this),\n      replacements: this.settings.replacements || (this.archived ? \"blobUrl\" : \"base64\")\n    });\n    this.loadNavigation(this.packaging).then(() => {\n      // this.toc = this.navigation.toc;\n      this.loading.navigation.resolve(this.navigation);\n    });\n\n    if (this.packaging.coverPath) {\n      this.cover = this.resolve(this.packaging.coverPath);\n    } // Resolve promises\n\n\n    this.loading.manifest.resolve(this.packaging.manifest);\n    this.loading.metadata.resolve(this.packaging.metadata);\n    this.loading.spine.resolve(this.spine);\n    this.loading.cover.resolve(this.cover);\n    this.loading.resources.resolve(this.resources);\n    this.loading.pageList.resolve(this.pageList);\n    this.isOpen = true;\n\n    if (this.archived || this.settings.replacements && this.settings.replacements != \"none\") {\n      this.replacements().then(() => {\n        this.loaded.displayOptions.then(() => {\n          this.opening.resolve(this);\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      // Resolve book opened promise\n      this.loaded.displayOptions.then(() => {\n        this.opening.resolve(this);\n      });\n    }\n  }\n  /**\n   * Load Navigation and PageList from package\n   * @private\n   * @param {Packaging} packaging\n   */\n\n\n  loadNavigation(packaging) {\n    let navPath = packaging.navPath || packaging.ncxPath;\n    let toc = packaging.toc; // From json manifest\n\n    if (toc) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new _navigation.default(toc);\n\n        if (packaging.pageList) {\n          this.pageList = new _pagelist.default(packaging.pageList); // TODO: handle page lists from Manifest\n        }\n\n        resolve(this.navigation);\n      });\n    }\n\n    if (!navPath) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new _navigation.default();\n        this.pageList = new _pagelist.default();\n        resolve(this.navigation);\n      });\n    }\n\n    return this.load(navPath, \"xml\").then(xml => {\n      this.navigation = new _navigation.default(xml);\n      this.pageList = new _pagelist.default(xml);\n      return this.navigation;\n    });\n  }\n  /**\n   * Gets a Section of the Book from the Spine\n   * Alias for `book.spine.get`\n   * @param {string} target\n   * @return {Section}\n   */\n\n\n  section(target) {\n    return this.spine.get(target);\n  }\n  /**\n   * Sugar to render a book to an element\n   * @param  {element | string} element element or string to add a rendition to\n   * @param  {object} [options]\n   * @return {Rendition}\n   */\n\n\n  renderTo(element, options) {\n    this.rendition = new _rendition.default(this, options);\n    this.rendition.attachTo(element);\n    return this.rendition;\n  }\n  /**\n   * Set if request should use withCredentials\n   * @param {boolean} credentials\n   */\n\n\n  setRequestCredentials(credentials) {\n    this.settings.requestCredentials = credentials;\n  }\n  /**\n   * Set headers request should use\n   * @param {object} headers\n   */\n\n\n  setRequestHeaders(headers) {\n    this.settings.requestHeaders = headers;\n  }\n  /**\n   * Unarchive a zipped epub\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Archive}\n   */\n\n\n  unarchive(input, encoding) {\n    this.archive = new _archive.default();\n    return this.archive.open(input, encoding);\n  }\n  /**\n   * Store the epubs contents\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Store}\n   */\n\n\n  store(name) {\n    // Use \"blobUrl\" or \"base64\" for replacements\n    let replacementsSetting = this.settings.replacements && this.settings.replacements !== \"none\"; // Save original url\n\n    let originalUrl = this.url; // Save original request method\n\n    let requester = this.settings.requestMethod || _request2.default.bind(this); // Create new Store\n\n\n    this.storage = new _store.default(name, requester, this.resolve.bind(this)); // Replace request method to go through store\n\n    this.request = this.storage.request.bind(this.storage);\n    this.opened.then(() => {\n      if (this.archived) {\n        this.storage.requester = this.archive.request.bind(this.archive);\n      } // Substitute hook\n\n\n      let substituteResources = (output, section) => {\n        section.output = this.resources.substitute(output, section.url);\n      }; // Set to use replacements\n\n\n      this.resources.settings.replacements = replacementsSetting || \"blobUrl\"; // Create replacement urls\n\n      this.resources.replacements().then(() => {\n        return this.resources.replaceCss();\n      });\n      this.storage.on(\"offline\", () => {\n        // Remove url to use relative resolving for hrefs\n        this.url = new _url.default(\"/\", \"\"); // Add hook to replace resources in contents\n\n        this.spine.hooks.serialize.register(substituteResources);\n      });\n      this.storage.on(\"online\", () => {\n        // Restore original url\n        this.url = originalUrl; // Remove hook\n\n        this.spine.hooks.serialize.deregister(substituteResources);\n      });\n    });\n    return this.storage;\n  }\n  /**\n   * Get the cover url\n   * @return {Promise<?string>} coverUrl\n   */\n\n\n  coverUrl() {\n    return this.loaded.cover.then(() => {\n      if (!this.cover) {\n        return null;\n      }\n\n      if (this.archived) {\n        return this.archive.createUrl(this.cover);\n      } else {\n        return this.cover;\n      }\n    });\n  }\n  /**\n   * Load replacement urls\n   * @private\n   * @return {Promise} completed loading urls\n   */\n\n\n  replacements() {\n    this.spine.hooks.serialize.register((output, section) => {\n      section.output = this.resources.substitute(output, section.url);\n    });\n    return this.resources.replacements().then(() => {\n      return this.resources.replaceCss();\n    });\n  }\n  /**\n   * Find a DOM Range for a given CFI Range\n   * @param  {EpubCFI} cfiRange a epub cfi range\n   * @return {Promise}\n   */\n\n\n  getRange(cfiRange) {\n    var cfi = new _epubcfi.default(cfiRange);\n    var item = this.spine.get(cfi.spinePos);\n\n    var _request = this.load.bind(this);\n\n    if (!item) {\n      return new Promise((resolve, reject) => {\n        reject(\"CFI could not be found\");\n      });\n    }\n\n    return item.load(_request).then(function (contents) {\n      var range = cfi.toRange(item.document);\n      return range;\n    });\n  }\n  /**\n   * Generates the Book Key using the identifier in the manifest or other string provided\n   * @param  {string} [identifier] to use instead of metadata identifier\n   * @return {string} key\n   */\n\n\n  key(identifier) {\n    var ident = identifier || this.packaging.metadata.identifier || this.url.filename;\n    return `epubjs:${_constants.EPUBJS_VERSION}:${ident}`;\n  }\n  /**\n   * Destroy the Book and all associated objects\n   */\n\n\n  destroy() {\n    this.opened = undefined;\n    this.loading = undefined;\n    this.loaded = undefined;\n    this.ready = undefined;\n    this.isOpen = false;\n    this.isRendered = false;\n    this.spine && this.spine.destroy();\n    this.locations && this.locations.destroy();\n    this.pageList && this.pageList.destroy();\n    this.archive && this.archive.destroy();\n    this.resources && this.resources.destroy();\n    this.container && this.container.destroy();\n    this.packaging && this.packaging.destroy();\n    this.rendition && this.rendition.destroy();\n    this.displayOptions && this.displayOptions.destroy();\n    this.spine = undefined;\n    this.locations = undefined;\n    this.pageList = undefined;\n    this.archive = undefined;\n    this.resources = undefined;\n    this.container = undefined;\n    this.packaging = undefined;\n    this.rendition = undefined;\n    this.navigation = undefined;\n    this.url = undefined;\n    this.path = undefined;\n    this.archived = false;\n  }\n\n} //-- Enable binding events to book\n\n\n(0, _eventEmitter.default)(Book.prototype);\nvar _default = Book;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
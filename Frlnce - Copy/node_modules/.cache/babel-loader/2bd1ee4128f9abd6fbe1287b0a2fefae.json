{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\_components\\\\video-player\\\\MediaElementVideoPlayer.jsx\";\nimport React from \"react\";\nimport MediaElement from './MediaElement';\n\nclass MediaElementVideoComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getVideoType(videoUrl) {\n    let extension;\n    let type = \"video/mp4\";\n\n    if (videoUrl.includes(\"youtube\")) {\n      extension = \"youtube\";\n    } else if (videoUrl.includes(\"vimeo\")) {\n      extension = \"vimeo\";\n    } else {\n      extension = videoUrl.split('.').pop();\n    }\n\n    console.log(\"extension: \" + extension);\n\n    switch (extension) {\n      case 'mp4':\n        type = \"video/mp4\";\n        break;\n\n      case 'm3u8':\n        type = \"video/hls\";\n        break;\n\n      case 'webm':\n        type = \"video/webm\";\n        break;\n\n      case 'ogg':\n        type = \"video/ogg\";\n\n      case 'youtube':\n        type = \"video/youtube\";\n\n      case 'vimeo':\n        type = \"video/vimeo\";\n\n      default:\n        type = \"video/\" + extension;\n    }\n\n    return type;\n  }\n\n  render() {\n    console.log(\"MediaElementVideoComponent --> render()...\");\n    const videoURL = this.props.videoUrl;\n    let type = this.getVideoType(videoURL);\n    console.log(\"MediaElementVideoComponent --> type: \" + type);\n    let transcripts = this.props.transcripts;\n    let _tracks = [];\n\n    if (transcripts) {\n      for (let transcript of transcripts) {\n        let track = {\n          src: transcript.src,\n          kind: 'subtitles',\n          //subtitles|captions|chapters\n          lang: transcript.lang,\n          label: transcript.label\n        };\n\n        _tracks.push(track);\n      }\n    }\n\n    const sources = [{\n      src: videoURL,\n      type: type\n    }],\n          config = {\n      startLanguage: 'en'\n    },\n          tracks = _tracks;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediaElement, Object.assign({}, this.props, {\n      id: \"mediaelementvideopalyer1\",\n      mediaType: \"video\",\n      preload: \"none\",\n      controls: type === 'video/vimeo' ? false : true,\n      width: \"640\",\n      height: \"360\",\n      poster: \"\",\n      sources: JSON.stringify(sources),\n      options: JSON.stringify(config),\n      tracks: JSON.stringify(tracks),\n      onPlayerEvent: this.props.onPlayerEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\nexport default MediaElementVideoComponent;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/_components/video-player/MediaElementVideoPlayer.jsx"],"names":["React","MediaElement","MediaElementVideoComponent","Component","constructor","props","getVideoType","videoUrl","extension","type","includes","split","pop","console","log","render","videoURL","transcripts","_tracks","transcript","track","src","kind","lang","label","push","sources","config","startLanguage","tracks","JSON","stringify","onPlayerEvent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport MediaElement from './MediaElement';\r\n\r\nclass MediaElementVideoComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    getVideoType(videoUrl) {\r\n        let extension;\r\n        let type = \"video/mp4\";\r\n        if(videoUrl.includes(\"youtube\")) {\r\n            extension = \"youtube\";\r\n        }\r\n        else if(videoUrl.includes(\"vimeo\")) {\r\n            extension = \"vimeo\";\r\n        }\r\n        else {\r\n            extension = videoUrl.split('.').pop();\r\n        }\r\n        console.log(\"extension: \"+extension)\r\n        switch (extension){  \r\n            case 'mp4':\r\n                type = \"video/mp4\";     \r\n                break;\r\n            case 'm3u8':\r\n                type = \"video/hls\";   \r\n                break;\r\n            case 'webm':\r\n                type = \"video/webm\";\r\n                break;\r\n            case 'ogg':\r\n                type= \"video/ogg\"\r\n            case 'youtube':\r\n                type= \"video/youtube\"\r\n            case 'vimeo':\r\n                type= \"video/vimeo\"\r\n            default:\r\n                type= \"video/\"+extension\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"MediaElementVideoComponent --> render()...\");\r\n        const videoURL = this.props.videoUrl;\r\n        let type = this.getVideoType(videoURL);\r\n        console.log(\"MediaElementVideoComponent --> type: \"+type);\r\n        let transcripts = this.props.transcripts;\r\n        let _tracks=[];\r\n        if(transcripts) {\r\n            for (let transcript of transcripts) {\r\n                let track = {\r\n                    src: transcript.src,\r\n                    kind: 'subtitles', //subtitles|captions|chapters\r\n                    lang: transcript.lang,\r\n                    label: transcript.label \r\n                }\r\n                _tracks.push(track);\r\n            }\r\n        }\r\n\r\n        const\r\n            sources = [\r\n                {src: videoURL, type: type}\r\n            ],\r\n            config = {startLanguage: 'en'},\r\n            tracks = _tracks\r\n            ;\r\n            \r\n        return ( \r\n            <>\r\n                <MediaElement\r\n                    {...this.props}\r\n                    id='mediaelementvideopalyer1'\r\n                    mediaType=\"video\"\r\n                    preload=\"none\"\r\n                    controls = {type==='video/vimeo'? false : true}\r\n                    width=\"640\"\r\n                    height=\"360\"\r\n                    poster=\"\"\r\n                    sources={JSON.stringify(sources)}\r\n                    options={JSON.stringify(config)}\r\n                    tracks={JSON.stringify(tracks)}\r\n                    onPlayerEvent={this.props.onPlayerEvent}\r\n                />            \r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MediaElementVideoComponent;"]},"metadata":{},"sourceType":"module"}
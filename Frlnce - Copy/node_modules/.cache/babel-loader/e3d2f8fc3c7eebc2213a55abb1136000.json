{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n\nvar _constants = require(\"./utils/constants\");\n\nvar _eventEmitter = _interopRequireDefault(require(\"event-emitter\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Figures out the CSS values to apply for a layout\n * @class\n * @param {object} settings\n * @param {string} [settings.layout='reflowable']\n * @param {string} [settings.spread]\n * @param {number} [settings.minSpreadWidth=800]\n * @param {boolean} [settings.evenSpreads=false]\n */\n\n\nclass Layout {\n  constructor(settings) {\n    this.settings = settings;\n    this.name = settings.layout || \"reflowable\";\n    this._spread = settings.spread === \"none\" ? false : true;\n    this._minSpreadWidth = settings.minSpreadWidth || 800;\n    this._evenSpreads = settings.evenSpreads || false;\n\n    if (settings.flow === \"scrolled\" || settings.flow === \"scrolled-continuous\" || settings.flow === \"scrolled-doc\") {\n      this._flow = \"scrolled\";\n    } else {\n      this._flow = \"paginated\";\n    }\n\n    this.width = 0;\n    this.height = 0;\n    this.spreadWidth = 0;\n    this.delta = 0;\n    this.columnWidth = 0;\n    this.gap = 0;\n    this.divisor = 1;\n    this.props = {\n      name: this.name,\n      spread: this._spread,\n      flow: this._flow,\n      width: 0,\n      height: 0,\n      spreadWidth: 0,\n      delta: 0,\n      columnWidth: 0,\n      gap: 0,\n      divisor: 1\n    };\n  }\n  /**\n   * Switch the flow between paginated and scrolled\n   * @param  {string} flow paginated | scrolled\n   * @return {string} simplified flow\n   */\n\n\n  flow(flow) {\n    if (typeof flow != \"undefined\") {\n      if (flow === \"scrolled\" || flow === \"scrolled-continuous\" || flow === \"scrolled-doc\") {\n        this._flow = \"scrolled\";\n      } else {\n        this._flow = \"paginated\";\n      } // this.props.flow = this._flow;\n\n\n      this.update({\n        flow: this._flow\n      });\n    }\n\n    return this._flow;\n  }\n  /**\n   * Switch between using spreads or not, and set the\n   * width at which they switch to single.\n   * @param  {string} spread \"none\" | \"always\" | \"auto\"\n   * @param  {number} min integer in pixels\n   * @return {boolean} spread true | false\n   */\n\n\n  spread(spread, min) {\n    if (spread) {\n      this._spread = spread === \"none\" ? false : true; // this.props.spread = this._spread;\n\n      this.update({\n        spread: this._spread\n      });\n    }\n\n    if (min >= 0) {\n      this._minSpreadWidth = min;\n    }\n\n    return this._spread;\n  }\n  /**\n   * Calculate the dimensions of the pagination\n   * @param  {number} _width  width of the rendering\n   * @param  {number} _height height of the rendering\n   * @param  {number} _gap    width of the gap between columns\n   */\n\n\n  calculate(_width, _height, _gap) {\n    var divisor = 1;\n    var gap = _gap || 0; //-- Check the width and create even width columns\n    // var fullWidth = Math.floor(_width);\n\n    var width = _width;\n    var height = _height;\n    var section = Math.floor(width / 12);\n    var columnWidth;\n    var spreadWidth;\n    var pageWidth;\n    var delta;\n\n    if (this._spread && width >= this._minSpreadWidth) {\n      divisor = 2;\n    } else {\n      divisor = 1;\n    }\n\n    if (this.name === \"reflowable\" && this._flow === \"paginated\" && !(_gap >= 0)) {\n      gap = section % 2 === 0 ? section : section - 1;\n    }\n\n    if (this.name === \"pre-paginated\") {\n      gap = 0;\n    } //-- Double Page\n\n\n    if (divisor > 1) {\n      // width = width - gap;\n      // columnWidth = (width - gap) / divisor;\n      // gap = gap / divisor;\n      columnWidth = width / divisor - gap;\n      pageWidth = columnWidth + gap;\n    } else {\n      columnWidth = width;\n      pageWidth = width;\n    }\n\n    if (this.name === \"pre-paginated\" && divisor > 1) {\n      width = columnWidth;\n    }\n\n    spreadWidth = columnWidth * divisor + gap;\n    delta = width;\n    this.width = width;\n    this.height = height;\n    this.spreadWidth = spreadWidth;\n    this.pageWidth = pageWidth;\n    this.delta = delta;\n    this.columnWidth = columnWidth;\n    this.gap = gap;\n    this.divisor = divisor; // this.props.width = width;\n    // this.props.height = _height;\n    // this.props.spreadWidth = spreadWidth;\n    // this.props.pageWidth = pageWidth;\n    // this.props.delta = delta;\n    //\n    // this.props.columnWidth = colWidth;\n    // this.props.gap = gap;\n    // this.props.divisor = divisor;\n\n    this.update({\n      width,\n      height,\n      spreadWidth,\n      pageWidth,\n      delta,\n      columnWidth,\n      gap,\n      divisor\n    });\n  }\n  /**\n   * Apply Css to a Document\n   * @param  {Contents} contents\n   * @return {Promise}\n   */\n\n\n  format(contents, section, axis) {\n    var formating;\n\n    if (this.name === \"pre-paginated\") {\n      formating = contents.fit(this.columnWidth, this.height, section);\n    } else if (this._flow === \"paginated\") {\n      formating = contents.columns(this.width, this.height, this.columnWidth, this.gap, this.settings.direction);\n    } else if (axis && axis === \"horizontal\") {\n      formating = contents.size(null, this.height);\n    } else {\n      formating = contents.size(this.width, null);\n    }\n\n    return formating; // might be a promise in some View Managers\n  }\n  /**\n   * Count number of pages\n   * @param  {number} totalLength\n   * @param  {number} pageLength\n   * @return {{spreads: Number, pages: Number}}\n   */\n\n\n  count(totalLength, pageLength) {\n    let spreads, pages;\n\n    if (this.name === \"pre-paginated\") {\n      spreads = 1;\n      pages = 1;\n    } else if (this._flow === \"paginated\") {\n      pageLength = pageLength || this.delta;\n      spreads = Math.ceil(totalLength / pageLength);\n      pages = spreads * this.divisor;\n    } else {\n      // scrolled\n      pageLength = pageLength || this.height;\n      spreads = Math.ceil(totalLength / pageLength);\n      pages = spreads;\n    }\n\n    return {\n      spreads,\n      pages\n    };\n  }\n  /**\n   * Update props that have changed\n   * @private\n   * @param  {object} props\n   */\n\n\n  update(props) {\n    // Remove props that haven't changed\n    Object.keys(props).forEach(propName => {\n      if (this.props[propName] === props[propName]) {\n        delete props[propName];\n      }\n    });\n\n    if (Object.keys(props).length > 0) {\n      let newProps = (0, _core.extend)(this.props, props);\n      this.emit(_constants.EVENTS.LAYOUT.UPDATED, newProps, props);\n    }\n  }\n\n}\n\n(0, _eventEmitter.default)(Layout.prototype);\nvar _default = Layout;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/layout.js"],"names":["Object","defineProperty","exports","value","default","_core","require","_constants","_eventEmitter","_interopRequireDefault","obj","__esModule","Layout","constructor","settings","name","layout","_spread","spread","_minSpreadWidth","minSpreadWidth","_evenSpreads","evenSpreads","flow","_flow","width","height","spreadWidth","delta","columnWidth","gap","divisor","props","update","min","calculate","_width","_height","_gap","section","Math","floor","pageWidth","format","contents","axis","formating","fit","columns","direction","size","count","totalLength","pageLength","spreads","pages","ceil","keys","forEach","propName","length","newProps","extend","emit","EVENTS","LAYOUT","UPDATED","prototype","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n\nvar _constants = require(\"./utils/constants\");\n\nvar _eventEmitter = _interopRequireDefault(require(\"event-emitter\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Figures out the CSS values to apply for a layout\n * @class\n * @param {object} settings\n * @param {string} [settings.layout='reflowable']\n * @param {string} [settings.spread]\n * @param {number} [settings.minSpreadWidth=800]\n * @param {boolean} [settings.evenSpreads=false]\n */\nclass Layout {\n  constructor(settings) {\n    this.settings = settings;\n    this.name = settings.layout || \"reflowable\";\n    this._spread = settings.spread === \"none\" ? false : true;\n    this._minSpreadWidth = settings.minSpreadWidth || 800;\n    this._evenSpreads = settings.evenSpreads || false;\n\n    if (settings.flow === \"scrolled\" || settings.flow === \"scrolled-continuous\" || settings.flow === \"scrolled-doc\") {\n      this._flow = \"scrolled\";\n    } else {\n      this._flow = \"paginated\";\n    }\n\n    this.width = 0;\n    this.height = 0;\n    this.spreadWidth = 0;\n    this.delta = 0;\n    this.columnWidth = 0;\n    this.gap = 0;\n    this.divisor = 1;\n    this.props = {\n      name: this.name,\n      spread: this._spread,\n      flow: this._flow,\n      width: 0,\n      height: 0,\n      spreadWidth: 0,\n      delta: 0,\n      columnWidth: 0,\n      gap: 0,\n      divisor: 1\n    };\n  }\n  /**\n   * Switch the flow between paginated and scrolled\n   * @param  {string} flow paginated | scrolled\n   * @return {string} simplified flow\n   */\n\n\n  flow(flow) {\n    if (typeof flow != \"undefined\") {\n      if (flow === \"scrolled\" || flow === \"scrolled-continuous\" || flow === \"scrolled-doc\") {\n        this._flow = \"scrolled\";\n      } else {\n        this._flow = \"paginated\";\n      } // this.props.flow = this._flow;\n\n\n      this.update({\n        flow: this._flow\n      });\n    }\n\n    return this._flow;\n  }\n  /**\n   * Switch between using spreads or not, and set the\n   * width at which they switch to single.\n   * @param  {string} spread \"none\" | \"always\" | \"auto\"\n   * @param  {number} min integer in pixels\n   * @return {boolean} spread true | false\n   */\n\n\n  spread(spread, min) {\n    if (spread) {\n      this._spread = spread === \"none\" ? false : true; // this.props.spread = this._spread;\n\n      this.update({\n        spread: this._spread\n      });\n    }\n\n    if (min >= 0) {\n      this._minSpreadWidth = min;\n    }\n\n    return this._spread;\n  }\n  /**\n   * Calculate the dimensions of the pagination\n   * @param  {number} _width  width of the rendering\n   * @param  {number} _height height of the rendering\n   * @param  {number} _gap    width of the gap between columns\n   */\n\n\n  calculate(_width, _height, _gap) {\n    var divisor = 1;\n    var gap = _gap || 0; //-- Check the width and create even width columns\n    // var fullWidth = Math.floor(_width);\n\n    var width = _width;\n    var height = _height;\n    var section = Math.floor(width / 12);\n    var columnWidth;\n    var spreadWidth;\n    var pageWidth;\n    var delta;\n\n    if (this._spread && width >= this._minSpreadWidth) {\n      divisor = 2;\n    } else {\n      divisor = 1;\n    }\n\n    if (this.name === \"reflowable\" && this._flow === \"paginated\" && !(_gap >= 0)) {\n      gap = section % 2 === 0 ? section : section - 1;\n    }\n\n    if (this.name === \"pre-paginated\") {\n      gap = 0;\n    } //-- Double Page\n\n\n    if (divisor > 1) {\n      // width = width - gap;\n      // columnWidth = (width - gap) / divisor;\n      // gap = gap / divisor;\n      columnWidth = width / divisor - gap;\n      pageWidth = columnWidth + gap;\n    } else {\n      columnWidth = width;\n      pageWidth = width;\n    }\n\n    if (this.name === \"pre-paginated\" && divisor > 1) {\n      width = columnWidth;\n    }\n\n    spreadWidth = columnWidth * divisor + gap;\n    delta = width;\n    this.width = width;\n    this.height = height;\n    this.spreadWidth = spreadWidth;\n    this.pageWidth = pageWidth;\n    this.delta = delta;\n    this.columnWidth = columnWidth;\n    this.gap = gap;\n    this.divisor = divisor; // this.props.width = width;\n    // this.props.height = _height;\n    // this.props.spreadWidth = spreadWidth;\n    // this.props.pageWidth = pageWidth;\n    // this.props.delta = delta;\n    //\n    // this.props.columnWidth = colWidth;\n    // this.props.gap = gap;\n    // this.props.divisor = divisor;\n\n    this.update({\n      width,\n      height,\n      spreadWidth,\n      pageWidth,\n      delta,\n      columnWidth,\n      gap,\n      divisor\n    });\n  }\n  /**\n   * Apply Css to a Document\n   * @param  {Contents} contents\n   * @return {Promise}\n   */\n\n\n  format(contents, section, axis) {\n    var formating;\n\n    if (this.name === \"pre-paginated\") {\n      formating = contents.fit(this.columnWidth, this.height, section);\n    } else if (this._flow === \"paginated\") {\n      formating = contents.columns(this.width, this.height, this.columnWidth, this.gap, this.settings.direction);\n    } else if (axis && axis === \"horizontal\") {\n      formating = contents.size(null, this.height);\n    } else {\n      formating = contents.size(this.width, null);\n    }\n\n    return formating; // might be a promise in some View Managers\n  }\n  /**\n   * Count number of pages\n   * @param  {number} totalLength\n   * @param  {number} pageLength\n   * @return {{spreads: Number, pages: Number}}\n   */\n\n\n  count(totalLength, pageLength) {\n    let spreads, pages;\n\n    if (this.name === \"pre-paginated\") {\n      spreads = 1;\n      pages = 1;\n    } else if (this._flow === \"paginated\") {\n      pageLength = pageLength || this.delta;\n      spreads = Math.ceil(totalLength / pageLength);\n      pages = spreads * this.divisor;\n    } else {\n      // scrolled\n      pageLength = pageLength || this.height;\n      spreads = Math.ceil(totalLength / pageLength);\n      pages = spreads;\n    }\n\n    return {\n      spreads,\n      pages\n    };\n  }\n  /**\n   * Update props that have changed\n   * @private\n   * @param  {object} props\n   */\n\n\n  update(props) {\n    // Remove props that haven't changed\n    Object.keys(props).forEach(propName => {\n      if (this.props[propName] === props[propName]) {\n        delete props[propName];\n      }\n    });\n\n    if (Object.keys(props).length > 0) {\n      let newProps = (0, _core.extend)(this.props, props);\n      this.emit(_constants.EVENTS.LAYOUT.UPDATED, newProps, props);\n    }\n  }\n\n}\n\n(0, _eventEmitter.default)(Layout.prototype);\nvar _default = Layout;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
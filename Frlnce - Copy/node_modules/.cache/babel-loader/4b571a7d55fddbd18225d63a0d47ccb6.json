{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n\nvar _request = _interopRequireDefault(require(\"./utils/request\"));\n\nvar _mime = _interopRequireDefault(require(\"./utils/mime\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _jszip = _interopRequireDefault(require(\"jszip/dist/jszip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Handles Unzipping a requesting files from an Epub Archive\n * @class\n */\n\n\nclass Archive {\n  constructor() {\n    this.zip = undefined;\n    this.urlCache = {};\n    this.checkRequirements();\n  }\n  /**\n   * Checks to see if JSZip exists in global namspace,\n   * Requires JSZip if it isn't there\n   * @private\n   */\n\n\n  checkRequirements() {\n    try {\n      this.zip = new _jszip.default();\n    } catch (e) {\n      throw new Error(\"JSZip lib not loaded\");\n    }\n  }\n  /**\n   * Open an archive\n   * @param  {binary} input\n   * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n   * @return {Promise} zipfile\n   */\n\n\n  open(input, isBase64) {\n    return this.zip.loadAsync(input, {\n      \"base64\": isBase64\n    });\n  }\n  /**\n   * Load and Open an archive\n   * @param  {string} zipUrl\n   * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n   * @return {Promise} zipfile\n   */\n\n\n  openUrl(zipUrl, isBase64) {\n    return (0, _request.default)(zipUrl, \"binary\").then(function (data) {\n      return this.zip.loadAsync(data, {\n        \"base64\": isBase64\n      });\n    }.bind(this));\n  }\n  /**\n   * Request a url from the archive\n   * @param  {string} url  a url to request from the archive\n   * @param  {string} [type] specify the type of the returned result\n   * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n   */\n\n\n  request(url, type) {\n    var deferred = new _core.defer();\n    var response;\n    var path = new _path.default(url); // If type isn't set, determine it from the file extension\n\n    if (!type) {\n      type = path.extension;\n    }\n\n    if (type == \"blob\") {\n      response = this.getBlob(url);\n    } else {\n      response = this.getText(url);\n    }\n\n    if (response) {\n      response.then(function (r) {\n        let result = this.handleResponse(r, type);\n        deferred.resolve(result);\n      }.bind(this));\n    } else {\n      deferred.reject({\n        message: \"File not found in the epub: \" + url,\n        stack: new Error().stack\n      });\n    }\n\n    return deferred.promise;\n  }\n  /**\n   * Handle the response from request\n   * @private\n   * @param  {any} response\n   * @param  {string} [type]\n   * @return {any} the parsed result\n   */\n\n\n  handleResponse(response, type) {\n    var r;\n\n    if (type == \"json\") {\n      r = JSON.parse(response);\n    } else if ((0, _core.isXml)(type)) {\n      r = (0, _core.parse)(response, \"text/xml\");\n    } else if (type == \"xhtml\") {\n      r = (0, _core.parse)(response, \"application/xhtml+xml\");\n    } else if (type == \"html\" || type == \"htm\") {\n      r = (0, _core.parse)(response, \"text/html\");\n    } else {\n      r = response;\n    }\n\n    return r;\n  }\n  /**\n   * Get a Blob from Archive by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {Blob}\n   */\n\n\n  getBlob(url, mimeType) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      mimeType = mimeType || _mime.default.lookup(entry.name);\n      return entry.async(\"uint8array\").then(function (uint8array) {\n        return new Blob([uint8array], {\n          type: mimeType\n        });\n      });\n    }\n  }\n  /**\n   * Get Text from Archive by Url\n   * @param  {string} url\n   * @param  {string} [encoding]\n   * @return {string}\n   */\n\n\n  getText(url, encoding) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      return entry.async(\"string\").then(function (text) {\n        return text;\n      });\n    }\n  }\n  /**\n   * Get a base64 encoded result from Archive by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {string} base64 encoded\n   */\n\n\n  getBase64(url, mimeType) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      mimeType = mimeType || _mime.default.lookup(entry.name);\n      return entry.async(\"base64\").then(function (data) {\n        return \"data:\" + mimeType + \";base64,\" + data;\n      });\n    }\n  }\n  /**\n   * Create a Url from an unarchived item\n   * @param  {string} url\n   * @param  {object} [options.base64] use base64 encoding or blob url\n   * @return {Promise} url promise with Url string\n   */\n\n\n  createUrl(url, options) {\n    var deferred = new _core.defer();\n\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    var tempUrl;\n    var response;\n    var useBase64 = options && options.base64;\n\n    if (url in this.urlCache) {\n      deferred.resolve(this.urlCache[url]);\n      return deferred.promise;\n    }\n\n    if (useBase64) {\n      response = this.getBase64(url);\n\n      if (response) {\n        response.then(function (tempUrl) {\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    } else {\n      response = this.getBlob(url);\n\n      if (response) {\n        response.then(function (blob) {\n          tempUrl = _URL.createObjectURL(blob);\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    }\n\n    if (!response) {\n      deferred.reject({\n        message: \"File not found in the epub: \" + url,\n        stack: new Error().stack\n      });\n    }\n\n    return deferred.promise;\n  }\n  /**\n   * Revoke Temp Url for a archive item\n   * @param  {string} url url of the item in the archive\n   */\n\n\n  revokeUrl(url) {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    var fromCache = this.urlCache[url];\n    if (fromCache) _URL.revokeObjectURL(fromCache);\n  }\n\n  destroy() {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    for (let fromCache in this.urlCache) {\n      _URL.revokeObjectURL(fromCache);\n    }\n\n    this.zip = undefined;\n    this.urlCache = {};\n  }\n\n}\n\nvar _default = Archive;\nexports.default = _default;","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/node_modules/epubjs/lib/archive.js"],"names":["Object","defineProperty","exports","value","default","_core","require","_request","_interopRequireDefault","_mime","_path","_jszip","obj","__esModule","Archive","constructor","zip","undefined","urlCache","checkRequirements","e","Error","open","input","isBase64","loadAsync","openUrl","zipUrl","then","data","bind","request","url","type","deferred","defer","response","path","extension","getBlob","getText","r","result","handleResponse","resolve","reject","message","stack","promise","JSON","parse","isXml","mimeType","decodededUrl","window","decodeURIComponent","substr","entry","file","lookup","name","async","uint8array","Blob","encoding","text","getBase64","createUrl","options","_URL","URL","webkitURL","mozURL","tempUrl","useBase64","base64","blob","createObjectURL","revokeUrl","fromCache","revokeObjectURL","destroy","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"./utils/core\");\n\nvar _request = _interopRequireDefault(require(\"./utils/request\"));\n\nvar _mime = _interopRequireDefault(require(\"./utils/mime\"));\n\nvar _path = _interopRequireDefault(require(\"./utils/path\"));\n\nvar _jszip = _interopRequireDefault(require(\"jszip/dist/jszip\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles Unzipping a requesting files from an Epub Archive\n * @class\n */\nclass Archive {\n  constructor() {\n    this.zip = undefined;\n    this.urlCache = {};\n    this.checkRequirements();\n  }\n  /**\n   * Checks to see if JSZip exists in global namspace,\n   * Requires JSZip if it isn't there\n   * @private\n   */\n\n\n  checkRequirements() {\n    try {\n      this.zip = new _jszip.default();\n    } catch (e) {\n      throw new Error(\"JSZip lib not loaded\");\n    }\n  }\n  /**\n   * Open an archive\n   * @param  {binary} input\n   * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n   * @return {Promise} zipfile\n   */\n\n\n  open(input, isBase64) {\n    return this.zip.loadAsync(input, {\n      \"base64\": isBase64\n    });\n  }\n  /**\n   * Load and Open an archive\n   * @param  {string} zipUrl\n   * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n   * @return {Promise} zipfile\n   */\n\n\n  openUrl(zipUrl, isBase64) {\n    return (0, _request.default)(zipUrl, \"binary\").then(function (data) {\n      return this.zip.loadAsync(data, {\n        \"base64\": isBase64\n      });\n    }.bind(this));\n  }\n  /**\n   * Request a url from the archive\n   * @param  {string} url  a url to request from the archive\n   * @param  {string} [type] specify the type of the returned result\n   * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n   */\n\n\n  request(url, type) {\n    var deferred = new _core.defer();\n    var response;\n    var path = new _path.default(url); // If type isn't set, determine it from the file extension\n\n    if (!type) {\n      type = path.extension;\n    }\n\n    if (type == \"blob\") {\n      response = this.getBlob(url);\n    } else {\n      response = this.getText(url);\n    }\n\n    if (response) {\n      response.then(function (r) {\n        let result = this.handleResponse(r, type);\n        deferred.resolve(result);\n      }.bind(this));\n    } else {\n      deferred.reject({\n        message: \"File not found in the epub: \" + url,\n        stack: new Error().stack\n      });\n    }\n\n    return deferred.promise;\n  }\n  /**\n   * Handle the response from request\n   * @private\n   * @param  {any} response\n   * @param  {string} [type]\n   * @return {any} the parsed result\n   */\n\n\n  handleResponse(response, type) {\n    var r;\n\n    if (type == \"json\") {\n      r = JSON.parse(response);\n    } else if ((0, _core.isXml)(type)) {\n      r = (0, _core.parse)(response, \"text/xml\");\n    } else if (type == \"xhtml\") {\n      r = (0, _core.parse)(response, \"application/xhtml+xml\");\n    } else if (type == \"html\" || type == \"htm\") {\n      r = (0, _core.parse)(response, \"text/html\");\n    } else {\n      r = response;\n    }\n\n    return r;\n  }\n  /**\n   * Get a Blob from Archive by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {Blob}\n   */\n\n\n  getBlob(url, mimeType) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      mimeType = mimeType || _mime.default.lookup(entry.name);\n      return entry.async(\"uint8array\").then(function (uint8array) {\n        return new Blob([uint8array], {\n          type: mimeType\n        });\n      });\n    }\n  }\n  /**\n   * Get Text from Archive by Url\n   * @param  {string} url\n   * @param  {string} [encoding]\n   * @return {string}\n   */\n\n\n  getText(url, encoding) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      return entry.async(\"string\").then(function (text) {\n        return text;\n      });\n    }\n  }\n  /**\n   * Get a base64 encoded result from Archive by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {string} base64 encoded\n   */\n\n\n  getBase64(url, mimeType) {\n    var decodededUrl = window.decodeURIComponent(url.substr(1)); // Remove first slash\n\n    var entry = this.zip.file(decodededUrl);\n\n    if (entry) {\n      mimeType = mimeType || _mime.default.lookup(entry.name);\n      return entry.async(\"base64\").then(function (data) {\n        return \"data:\" + mimeType + \";base64,\" + data;\n      });\n    }\n  }\n  /**\n   * Create a Url from an unarchived item\n   * @param  {string} url\n   * @param  {object} [options.base64] use base64 encoding or blob url\n   * @return {Promise} url promise with Url string\n   */\n\n\n  createUrl(url, options) {\n    var deferred = new _core.defer();\n\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    var tempUrl;\n    var response;\n    var useBase64 = options && options.base64;\n\n    if (url in this.urlCache) {\n      deferred.resolve(this.urlCache[url]);\n      return deferred.promise;\n    }\n\n    if (useBase64) {\n      response = this.getBase64(url);\n\n      if (response) {\n        response.then(function (tempUrl) {\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    } else {\n      response = this.getBlob(url);\n\n      if (response) {\n        response.then(function (blob) {\n          tempUrl = _URL.createObjectURL(blob);\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    }\n\n    if (!response) {\n      deferred.reject({\n        message: \"File not found in the epub: \" + url,\n        stack: new Error().stack\n      });\n    }\n\n    return deferred.promise;\n  }\n  /**\n   * Revoke Temp Url for a archive item\n   * @param  {string} url url of the item in the archive\n   */\n\n\n  revokeUrl(url) {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    var fromCache = this.urlCache[url];\n    if (fromCache) _URL.revokeObjectURL(fromCache);\n  }\n\n  destroy() {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n\n    for (let fromCache in this.urlCache) {\n      _URL.revokeObjectURL(fromCache);\n    }\n\n    this.zip = undefined;\n    this.urlCache = {};\n  }\n\n}\n\nvar _default = Archive;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
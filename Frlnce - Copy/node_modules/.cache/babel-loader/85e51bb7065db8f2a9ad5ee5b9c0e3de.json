{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\notification\\\\Notification.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Notification.css\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { ILoader } from './../../_components/iloader/iloader';\nimport { markNotificationsAsRead } from \"./../../push-notification\";\n\nclass Notification extends Component {\n  constructor(props) {\n    super(props); //console.log(\"Notification -> constructor()... \");\n\n    this.state = {\n      notifications: [],\n      message: null,\n      showLoading: false\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"Notification -> componentDidMount()... \");\n    this.init();\n  }\n\n  init() {\n    //console.log(\"Notification -> init()... \");\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\n    this.setState(state => ({\n      notifications: notificationMsgs ? JSON.parse(notificationMsgs) : []\n    }));\n    markNotificationsAsRead();\n  }\n\n  render() {\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, this.renderHeader(), this.renderBody(), this.renderLoader()));\n  }\n\n  renderHeader() {\n    //console.log(\"Notification -> renderHeader()... \");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `ilearn-plain-header blue-card`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      onClick: this.props.history.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Notifications\"));\n  }\n\n  renderBody() {\n    //console.log(\"Notification -> renderBody()... \");\n    let _notifications = this.state.notifications;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-padding-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, _notifications.sort((a, b) => b.messageId - a.messageId).map((notification, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"ilearn-padding-both-sides ilearn-padding-top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }\n      }, notification.picture ? /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: notification.picture,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }\n      }) : '', /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ilearn-item-block notification-card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: `notification-text ${notification.status == 0 ? 'notification-unread' : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 37\n        }\n      }, notification.message)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"text-right notification-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 35\n        }\n      }, notification.receivedDate)))));\n    })));\n  }\n\n  renderLoader() {\n    //console.log(\"Notification -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport { Notification };","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/notification/Notification.jsx"],"names":["React","Component","Container","Row","Col","Card","FontAwesomeIcon","faArrowLeft","ILoader","markNotificationsAsRead","Notification","constructor","props","state","notifications","message","showLoading","componentDidMount","init","notificationMsgs","localStorage","getItem","setState","JSON","parse","render","_loadingText","renderHeader","renderBody","renderLoader","history","goBack","_notifications","sort","a","b","messageId","map","notification","index","picture","status","receivedDate"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,iBAA1C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAAQC,OAAR,QAAsB,qCAAtB;AACA,SAASC,uBAAT,QAAwC,2BAAxC;;AAGA,MAAMC,YAAN,SAA2BT,SAA3B,CAAqC;AACnCU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,WAAW,EAAE;AAHF,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,IAAL;AACD;;AAEDA,EAAAA,IAAI,GAAG;AACL;AACA,QAAIC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,sBAArB,CAAvB;AACA,SAAKC,QAAL,CAAcT,KAAK,KAAK;AAAEC,MAAAA,aAAa,EAAGK,gBAAgB,GAACI,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAD,GAA8B;AAAhE,KAAL,CAAnB;AACAV,IAAAA,uBAAuB;AACxB;;AAEDgB,EAAAA,MAAM,GAAG;AACP,UAAMC,YAAY,GAAG,gBAArB;AACA,wBACE,uDACE,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,YAAL,EADH,EAEG,KAAKC,UAAL,EAFH,EAGG,KAAKC,YAAL,EAHH,CADF,CADF;AASD;;AAEDF,EAAAA,YAAY,GAAG;AACb;AACA,wBACE;AAAK,MAAA,SAAS,EAAG,+BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAGpB,WAAxB;AAAsC,MAAA,OAAO,EAAE,KAAKK,KAAL,CAAWkB,OAAX,CAAmBC,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,CADF;AAQD;;AAEDH,EAAAA,UAAU,GAAG;AACX;AACA,QAAII,cAAc,GAAG,KAAKnB,KAAL,CAAWC,aAAhC;AACA,wBACE,uDACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQkB,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAA9C,EACCC,GADD,CACK,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC1B,0BACI;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAC,8CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,YAAY,CAACE,OAAb,gBACC,oBAAC,IAAD,CAAM,GAAN;AAAU,QAAA,OAAO,EAAC,KAAlB;AAAwB,QAAA,GAAG,EAAEF,YAAY,CAACE,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAEG,EAHN,eAIA,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAG,qBAAoBF,YAAY,CAACG,MAAb,IAAuB,CAAvB,GAA0B,qBAA1B,GAAkD,EAAG,EAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4FH,YAAY,CAACvB,OAAzG,CADJ,CADJ,eAII,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGuB,YAAY,CAACI,YADhB,CADF,CAJJ,CAJA,CADJ,CADJ;AAmBH,KArBD,CAFR,CADF,CADF;AA8BD;;AAEDb,EAAAA,YAAY,GAAG;AACb;AACA,UAAMH,YAAY,GAAG,gBAArB;AACA,wBACI,oBAAC,OAAD;AACE,MAAA,WAAW,EAAEA,YADf;AAEE,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWG,WAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOD;;AA7FkC;;AAiGrC,SAAQN,YAAR","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Notification.css\";\r\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport {ILoader} from './../../_components/iloader/iloader';\r\nimport { markNotificationsAsRead } from \"./../../push-notification\";\r\n\r\n\r\nclass Notification extends Component {\r\n  constructor(props) {    \r\n    super(props);\r\n    //console.log(\"Notification -> constructor()... \");\r\n    this.state = {\r\n      notifications: [],\r\n      message: null,\r\n      showLoading: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log(\"Notification -> componentDidMount()... \");\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    //console.log(\"Notification -> init()... \");\r\n    let notificationMsgs = localStorage.getItem('ilearn-notifications');\r\n    this.setState(state => ({ notifications:  notificationMsgs?JSON.parse(notificationMsgs):[] }));\r\n    markNotificationsAsRead();   \r\n  }\r\n  \r\n  render() {\r\n    const _loadingText = 'Please wait...';\r\n    return (\r\n      <>\r\n        <Container fluid>\r\n          {this.renderHeader()}\r\n          {this.renderBody()}\r\n          {this.renderLoader()}          \r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderHeader() {\r\n    //console.log(\"Notification -> renderHeader()... \");\r\n    return (\r\n      <div className={`ilearn-plain-header blue-card`}>\r\n        <div className=\"back\">\r\n          <FontAwesomeIcon icon={ faArrowLeft } onClick={this.props.history.goBack} />\r\n        </div>\r\n        <h4>Notifications</h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderBody() {\r\n    //console.log(\"Notification -> renderBody()... \");\r\n    let _notifications = this.state.notifications;\r\n    return  (\r\n      <>\r\n        <div className=\"ilearn-padding-top\">\r\n            {\r\n                _notifications.sort((a, b) => b.messageId - a.messageId)\r\n                .map((notification, index) => {\r\n                    return ( \r\n                        <div key={index} className=\"ilearn-padding-both-sides ilearn-padding-top\">\r\n                            <Card>\r\n                              {notification.picture?\r\n                                <Card.Img variant=\"top\" src={notification.picture} />\r\n                                : ''}\r\n                            <Card.Body>\r\n                                <div className=\"ilearn-item-block notification-card\">\r\n                                    <p className={`notification-text ${notification.status == 0? 'notification-unread' : ''}`}>{notification.message}</p>\r\n                                </div>\r\n                                <Row>\r\n                                  <Col className=\"text-right notification-date\">\r\n                                    {notification.receivedDate}\r\n                                  </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderLoader() {\r\n    //console.log(\"Notification -> renderLoader()... \");\r\n    const _loadingText = 'Please wait...';\r\n    return (\r\n        <ILoader\r\n          loadingText={_loadingText}\r\n          isShow={this.state.showLoading}\r\n        >\r\n        </ILoader>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport {Notification};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"S:\\\\REACT\\\\Ract-Js\\\\Frlnce\\\\src\\\\pages\\\\feedback-form\\\\FeedbackForm.jsx\";\nimport React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport ApiService from \"../../_services/ApiService\";\nimport { ILoader } from './../../_components/iloader/iloader';\nimport Config from '../../_config/config';\nimport './FeedbackForm.css';\nimport swal from 'sweetalert';\nimport Iframe from \"../../_components/iframe/iframe\";\n\nclass FeedbackForm extends Component {\n  constructor(props) {\n    super(props); //console.log(\"FeedbackForm -> constructor()... \");\n\n    this.toggleLoading = () => {\n      //console.log(\"FeedbackForm -> toggleLoading()... \");\n      this.setState(state => ({\n        showLoading: !state.showLoading\n      }));\n    };\n\n    this.handleSingleChoices = (event, question) => {\n      //console.log(\"handleSingleChoices....\");\n      question.feedbackFormQuestionChoiceBeans.forEach(choice => {\n        choice.selected = false;\n\n        if (choice.id === parseInt(event.target.value)) {\n          choice.selected = true; //event.target.checked;\n\n          question.feedbackResponse = choice.id;\n        }\n      });\n    };\n\n    this.handleMultipleChoices = (event, question) => {\n      //console.log(\"handleMultipleChoices....\");\n      let selectedChoices = [];\n      question.feedbackFormQuestionChoiceBeans.forEach(choice => {\n        if (choice.id === parseInt(event.target.value)) {\n          choice.selected = event.target.checked;\n        }\n      });\n      question.feedbackFormQuestionChoiceBeans.forEach(choice => {\n        if (choice.selected === true) {\n          selectedChoices.push(choice.id);\n        }\n      });\n      question.feedbackResponse = selectedChoices.join();\n    };\n\n    this.submit = () => {\n      //console.log(\"FeedbackForm -> submit()... \");\n      //console.log(JSON.stringify(this.state.feedbackFormBean));\n      let user = JSON.parse(localStorage['user']);\n      let feedbackFormBean = this.state.feedbackFormBean;\n      let employeeId = this.props.match.params.instructorId || 0;\n      let courseId = this.props.match.params.courseId || 0;\n      feedbackFormBean.employeeId = employeeId;\n      feedbackFormBean.courseId = courseId;\n      feedbackFormBean.applicableToUserId = this.props.location.state.userId || 0;\n      feedbackFormBean.respondentToUserId = this.props.location.state.userId ? user === null || user === void 0 ? void 0 : user.userId : 0;\n      this.setState({\n        showLoading: true\n      }, () => {\n        ApiService.saveFeedbackForm(feedbackFormBean, 0).then(res => {\n          //console.log(\"FeedbackForm -> submit(); res : \"+JSON.stringify(res.data));\n          let respData = res.data;\n\n          if (respData.status == 0) {\n            let questions = [];\n\n            for (let question of feedbackFormBean.feedbackQuestionBeans) {\n              question.errorMessage = null;\n\n              for (let i = 0; i < respData.data.length; i++) {\n                if (parseInt(respData.data[i].id) === question.id) {\n                  question.errorMessage = respData.data[i].message;\n                  break;\n                }\n              }\n\n              questions.push(question);\n            }\n\n            feedbackFormBean.feedbackQuestionBeans = questions;\n            this.setState({\n              showLoading: false,\n              feedbackFormBean: feedbackFormBean\n            });\n            this.showErrorAlert(respData.message);\n          } else {\n            //SuccessCB      \n            //this.showMessage(\"Confirmation Message\", respData.message);\n            this.setState({\n              showLoading: false\n            });\n            this.showSuccessAlert(respData.message);\n          }\n        });\n      });\n    };\n\n    this.state = {\n      message: null,\n      showLoading: false\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"FeedbackForm -> componentDidMount()... \");\n    this.init();\n  }\n\n  init() {\n    let employeeId = this.props.match.params.instructorId || 0;\n    let courseId = this.props.match.params.courseId || 0;\n    const userId = this.props.location.state.userId || 0;\n    this.setState({\n      showLoading: true\n    }, () => {\n      ApiService.getFeedbackForm(this.props.match.params.id, 0, employeeId, courseId, userId).then(res => {\n        const temp = res.data.data;\n        console.log(temp.userBeans, '<----Temp');\n\n        if (temp.userBeans) {\n          this.props.history.replace({\n            pathname: `/studentfeedback/form/${this.props.match.params.id}`,\n            state: {\n              employeeId,\n              courseId\n            }\n          }); // this.props.history.replace('/');\n        }\n\n        console.log(\"FeedbackForm -> init(); res : \" + JSON.parse(JSON.stringify(res.data.data)));\n        this.setState({\n          showLoading: false,\n          feedbackFormBean: res.data.data\n        });\n      });\n    });\n  }\n\n  render() {\n    //console.log(\"DiscussionBoardTopic -> render()... \");        \n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.renderHeader(), this.renderBody(), this.renderFooter()), this.renderLoader()));\n  }\n\n  renderHeader() {\n    //console.log(\"FeedbackForm -> renderHeader()... \");\n    let CURRENT_PORTLET = JSON.parse(localStorage['portlet']);\n    let studyResource = this.props.location.state.studyResource;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `ilearn-plain-header ${CURRENT_PORTLET.class}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      onClick: this.props.history.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }\n    }, studyResource.name));\n  }\n\n  renderBody() {\n    var _this$state;\n\n    //console.log(\"FeedbackForm -> renderBody()... \");\n    const feedbackFormBean = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.feedbackFormBean;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, feedbackFormBean && feedbackFormBean.readFromStaff ? this.renderReadFromStaffFeedbackForm() : this.renderStudentFeedbackForm());\n  }\n\n  renderRating() {\n    var _this$state2, _this$state2$feedback;\n\n    let employeeId = this.props.match.params.instructorId || 0;\n    let instructorName = this.props.location.state.instructorName;\n    const feedbackMode = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$feedback = _this$state2.feedbackFormBean) === null || _this$state2$feedback === void 0 ? void 0 : _this$state2$feedback.mode;\n\n    if (employeeId > 0) {\n      var _this$state3, _this$state3$feedback;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-primary\",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert-heading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 56\n        }\n      }, instructorName), feedbackMode === 'view' ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"rating pull-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 33\n        }\n      }, (_this$state3 = this.state) === null || _this$state3 === void 0 ? void 0 : (_this$state3$feedback = _this$state3.feedbackFormBean) === null || _this$state3$feedback === void 0 ? void 0 : _this$state3$feedback.score) : \"\")));\n    }\n  }\n\n  renderStudentFeedbackForm() {\n    var _this$state4, _this$state4$feedback;\n\n    const feedbackQuestionBeans = (_this$state4 = this.state) === null || _this$state4 === void 0 ? void 0 : (_this$state4$feedback = _this$state4.feedbackFormBean) === null || _this$state4$feedback === void 0 ? void 0 : _this$state4$feedback.feedbackQuestionBeans;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderRating(), feedbackQuestionBeans && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-padding-top ilearn-padding-both-sides\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, this.renderFeedbackFormQuestions(feedbackQuestionBeans)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 18\n      }\n    }));\n  }\n\n  renderReadFromStaffFeedbackForm() {\n    let enquiryId = localStorage.getItem('enquiryId');\n    let feedbackFormId = this.state.feedbackFormBean.id;\n    const feedbackFormURL = Config.siteUrl + \"popup/studentportal/studentPortal.do?reqCode=viewStudentFeedbackFormInMobile&enquiryId=\" + enquiryId + \"&feedBackFormId=\" + feedbackFormId;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Iframe, {\n      url: feedbackFormURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderFeedbackFormQuestions(feedbackQuestionBeans) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, feedbackQuestionBeans.map((question, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this._renderFeedbackQuestion(question, index));\n    }));\n  }\n\n  _renderFeedbackQuestion(question, index) {\n    var _this$state5, _this$state5$feedback;\n\n    const feedbackMode = (_this$state5 = this.state) === null || _this$state5 === void 0 ? void 0 : (_this$state5$feedback = _this$state5.feedbackFormBean) === null || _this$state5$feedback === void 0 ? void 0 : _this$state5$feedback.mode;\n\n    if (question.questionTypeId === 1 || question.questionTypeId === 2 || question.questionTypeId === 3 || question.questionTypeId === 5 || question.questionTypeId === 6 || question.questionTypeId === 8 || question.questionTypeId === 9 || question.questionTypeId === 10) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"ilearn-padding-top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body feedback-question-card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, feedbackMode === 'view' ? this.renderReadOnlyFeedbackQuestion(question) : this.renderFeedbackQuestion(question)))));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  renderFeedbackQuestion(question) {\n    var _this$state6, _this$state6$feedback;\n\n    const feedbackMode = (_this$state6 = this.state) === null || _this$state6 === void 0 ? void 0 : (_this$state6$feedback = _this$state6.feedbackFormBean) === null || _this$state6$feedback === void 0 ? void 0 : _this$state6$feedback.mode;\n\n    if (question.questionTypeId === 1) {\n      //Text\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }\n      })), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 2) {\n      //Text Area\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"textarea\", {\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        rows: \"3\",\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }\n      }, question.feedbackResponse)), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 3) {\n      //3=Select Dropdown ; \n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"select\", {\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        placeholder: \"--Select--\",\n        onChange: e => this.handleSingleChoices(e, question),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }\n      }, question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"option\", {\n        key: 'option_' + i,\n        value: option.id,\n        selected: option.selected === true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 31\n        }\n      }, option.name)))), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 5) {\n      //5=Radio Button\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }\n      }, question.name), question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-check feedback-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-check-input\",\n        type: \"radio\",\n        name: 'q_radio_' + question.id,\n        id: 'q_radio_option_' + option.id,\n        value: option.id,\n        onChange: e => this.handleSingleChoices(e, question),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        class: \"form-check-label\",\n        for: 'q_radio_option_' + option.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 33\n        }\n      }, option.name)))), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 6) {\n      //Multiple Choice\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, question.name), question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-check feedback-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        value: option.id,\n        id: 'fb_question_choice' + option.id,\n        onChange: e => this.handleMultipleChoices(e, question),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        class: \"form-check-label\",\n        for: 'fb_question_choice' + option.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 29\n        }\n      }, option.name)))), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }\n      }, question.errorMessage));\n    }\n\n    if (question.questionTypeId === 8) {\n      //Date\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }\n      })), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 25\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 9) {\n      //Email\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }\n      })), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }\n      }, question.errorMessage));\n    } else if (question.questionTypeId === 10) {\n      //Mobile Number\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }\n      })), question.errorMessage && question.errorMessage.length > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }\n      }, question.errorMessage));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  renderReadOnlyFeedbackQuestion(question) {\n    if (question.questionTypeId === 1) {\n      //Text\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        value: question.feedbackResponse,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 25\n        }\n      })));\n    } else if (question.questionTypeId === 2) {\n      //Text Area\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"textarea\", {\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        rows: \"3\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 25\n        }\n      }, question.feedbackResponse)));\n    } else if (question.questionTypeId === 3) {\n      //3=Select Dropdown ; \n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"select\", {\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        placeholder: \"--Select--\",\n        onChange: e => question.feedbackResponse = e.target.value || '',\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }\n      }, question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"option\", {\n        key: 'option_' + i,\n        value: option.id,\n        selected: option.selected === true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 31\n        }\n      }, option.name)))));\n    } else if (question.questionTypeId === 5) {\n      //5=Radio Button\n      let employeeId = this.props.match.params.instructorId || 0;\n      let instructorName = this.props.location.state.instructorName;\n\n      if (employeeId > 0) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group feedback-form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          for: 'fb_question_' + question.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 25\n          }\n        }, question.name), question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(React.Fragment, null, option.selected && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"alert-heading\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 68\n          }\n        }, option.name), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"rating pull-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 41\n          }\n        }, question.rating)))))));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group feedback-form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          for: 'fb_question_' + question.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }\n        }, question.name), question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"div\", {\n          class: \"form-check feedback-question\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          class: \"form-check-input\",\n          type: \"radio\",\n          name: 'q_radio_' + question.id,\n          id: 'q_radio_option_' + option.id,\n          value: option.id,\n          checked: option.selected === true,\n          disabled: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"label\", {\n          class: \"form-check-label\",\n          for: 'q_radio_option_' + option.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 37\n          }\n        }, option.name)))));\n      }\n    } else if (question.questionTypeId === 6) {\n      //Multiple Choice\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }\n      }, question.name), question.feedbackFormQuestionChoiceBeans.map((option, i) => /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-check feedback-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        value: option.id,\n        id: 'fb_question_choice' + option.id,\n        checked: option.selected === true,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        class: \"form-check-label\",\n        for: 'fb_question_choice' + option.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 29\n        }\n      }, option.name)))));\n    }\n\n    if (question.questionTypeId === 8) {\n      //Date\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        value: question.feedbackResponse,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 25\n        }\n      })));\n    } else if (question.questionTypeId === 9) {\n      //Email\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        value: question.feedbackResponse,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 25\n        }\n      })));\n    } else if (question.questionTypeId === 10) {\n      //Mobile Number\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group feedback-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: 'fb_question_' + question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 25\n        }\n      }, question.name), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: 'fb_question_' + question.id,\n        value: question.feedbackResponse,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 25\n        }\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  renderFooter() {\n    var _this$state7, _this$state7$feedback, _this$state8, _this$state8$feedback;\n\n    //console.log(\"FeedbackForm -> renderFooter()... \");\n    const feedbackQuestionBeans = (_this$state7 = this.state) === null || _this$state7 === void 0 ? void 0 : (_this$state7$feedback = _this$state7.feedbackFormBean) === null || _this$state7$feedback === void 0 ? void 0 : _this$state7$feedback.feedbackQuestionBeans;\n    const feedbackMode = (_this$state8 = this.state) === null || _this$state8 === void 0 ? void 0 : (_this$state8$feedback = _this$state8.feedbackFormBean) === null || _this$state8$feedback === void 0 ? void 0 : _this$state8$feedback.mode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, feedbackQuestionBeans && feedbackMode !== 'view' && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ilearn-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"ilearn-footer-col ilearn-blue-btn\",\n      onClick: () => this.submit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn ilearn-blue-btn ilearn-footer-btn btn-block text-uppercase\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"color-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 29\n      }\n    }, \"Submit\"), \"\\xA0\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPaperPlane,\n      size: \"lg\",\n      color: \"#fff\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 29\n      }\n    }), \" \\xA0\")))));\n  }\n\n  renderLoader() {\n    //console.log(\"FeedbackForm -> renderLoader()... \");\n    const _loadingText = 'Please wait...';\n    return /*#__PURE__*/React.createElement(ILoader, {\n      loadingText: _loadingText,\n      isShow: this.state.showLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 13\n      }\n    });\n  }\n\n  showSuccessAlert(message) {\n    swal({\n      text: message,\n      icon: \"success\",\n      button: \"Ok\",\n      allowOutsideClick: false,\n      closeOnClickOutside: false,\n      closeOnEsc: false\n    }).then(exit => {\n      this.props.history.goBack();\n    });\n  }\n\n  showErrorAlert(message) {\n    swal({\n      text: message,\n      icon: \"warning\",\n      button: \"Ok\",\n      allowOutsideClick: false,\n      closeOnClickOutside: false,\n      closeOnEsc: false\n    }).then(exit => {//console.log(\"Error!\");\n    });\n  }\n\n}\n\nexport { FeedbackForm };\n/*\r\n    References:\r\n    Card -> https://getbootstrap.com/docs/4.0/components/card/\r\n\r\n*/","map":{"version":3,"sources":["S:/REACT/Ract-Js/Frlnce/src/pages/feedback-form/FeedbackForm.jsx"],"names":["React","Component","Container","Row","Col","FontAwesomeIcon","faArrowLeft","faPaperPlane","ApiService","ILoader","Config","swal","Iframe","FeedbackForm","constructor","props","toggleLoading","setState","state","showLoading","handleSingleChoices","event","question","feedbackFormQuestionChoiceBeans","forEach","choice","selected","id","parseInt","target","value","feedbackResponse","handleMultipleChoices","selectedChoices","checked","push","join","submit","user","JSON","parse","localStorage","feedbackFormBean","employeeId","match","params","instructorId","courseId","applicableToUserId","location","userId","respondentToUserId","saveFeedbackForm","then","res","respData","data","status","questions","feedbackQuestionBeans","errorMessage","i","length","message","showErrorAlert","showSuccessAlert","componentDidMount","init","getFeedbackForm","temp","console","log","userBeans","history","replace","pathname","stringify","render","renderHeader","renderBody","renderFooter","renderLoader","CURRENT_PORTLET","studyResource","class","goBack","name","readFromStaff","renderReadFromStaffFeedbackForm","renderStudentFeedbackForm","renderRating","instructorName","feedbackMode","mode","score","renderFeedbackFormQuestions","enquiryId","getItem","feedbackFormId","feedbackFormURL","siteUrl","map","index","_renderFeedbackQuestion","questionTypeId","renderReadOnlyFeedbackQuestion","renderFeedbackQuestion","e","option","rating","_loadingText","text","icon","button","allowOutsideClick","closeOnClickOutside","closeOnEsc","exit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport ApiService from \"../../_services/ApiService\";\r\nimport {ILoader} from './../../_components/iloader/iloader';\r\nimport Config from '../../_config/config'\r\nimport './FeedbackForm.css';\r\nimport swal from 'sweetalert';\r\nimport Iframe from \"../../_components/iframe/iframe\";\r\nclass FeedbackForm extends Component { \r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        //console.log(\"FeedbackForm -> constructor()... \");\r\n        this.state = {\r\n            message: null,\r\n            showLoading: false,           \r\n        };       \r\n    }\r\n    \r\n    componentDidMount() {\r\n        //console.log(\"FeedbackForm -> componentDidMount()... \");\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        let employeeId = this.props.match.params.instructorId || 0;\r\n        let courseId = this.props.match.params.courseId || 0;  \r\n        const userId = this.props.location.state.userId || 0;\r\n\r\n        this.setState({ showLoading: true }, () => {\r\n            ApiService.getFeedbackForm(this.props.match.params.id, 0, employeeId, courseId, userId)\r\n            .then((res) => {\r\n               \r\n                const temp = res.data.data;\r\n                console.log(temp.userBeans,'<----Temp');\r\n                if(temp.userBeans){\r\n                this.props.history.replace({pathname:`/studentfeedback/form/${this.props.match.params.id}`,state:{employeeId, courseId}});\r\n                // this.props.history.replace('/');\r\n                }  \r\n                \r\n              console.log(\"FeedbackForm -> init(); res : \"+ JSON.parse( JSON.stringify(res.data.data)));\r\n              this.setState({\r\n                showLoading: false,\r\n                feedbackFormBean : res.data.data\r\n              });\r\n            });\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        //console.log(\"DiscussionBoardTopic -> render()... \");        \r\n        return (  \r\n            <>                \r\n                <Container fluid >\r\n                    <>\r\n                        {this.renderHeader()}\r\n                        {this.renderBody()}\r\n                        {this.renderFooter()}\r\n                    </>\r\n                    {this.renderLoader()}                    \r\n                </Container>\r\n            </>           \r\n              \r\n        );\r\n    }\r\n\r\n    renderHeader() {\r\n        //console.log(\"FeedbackForm -> renderHeader()... \");\r\n        let CURRENT_PORTLET = JSON.parse(localStorage['portlet']);\r\n        let studyResource = this.props.location.state.studyResource;\r\n        return (\r\n            <div className={`ilearn-plain-header ${CURRENT_PORTLET.class}`}>\r\n                <div className=\"back\">\r\n                    <FontAwesomeIcon icon={ faArrowLeft } onClick={this.props.history.goBack} />\r\n                </div>\r\n                {\r\n                   <h4>{studyResource.name}</h4>  \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBody() {\r\n        //console.log(\"FeedbackForm -> renderBody()... \");\r\n        const feedbackFormBean = this.state?.feedbackFormBean;\r\n        return (\r\n            <>\r\n            {\r\n                (feedbackFormBean && feedbackFormBean.readFromStaff) ? (\r\n                    this.renderReadFromStaffFeedbackForm()\r\n                ) : (\r\n                    this.renderStudentFeedbackForm()\r\n                )\r\n            }\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRating() {\r\n        let employeeId = this.props.match.params.instructorId || 0;\r\n        let instructorName = this.props.location.state.instructorName;\r\n        const feedbackMode = this.state?.feedbackFormBean?.mode;\r\n        if(employeeId>0) {\r\n            return (\r\n                <>\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        <div className=\"alert-heading\"><b>{instructorName}</b>\r\n                        {\r\n                            feedbackMode==='view'?                      \r\n                                <span className=\"rating pull-right\" >{this.state?.feedbackFormBean?.score}</span>\r\n                                : \"\"\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderStudentFeedbackForm() {\r\n        const feedbackQuestionBeans = this.state?.feedbackFormBean?.feedbackQuestionBeans;        \r\n        return (\r\n            <>\r\n            {this.renderRating()}\r\n            {\r\n                feedbackQuestionBeans &&  \r\n                    <div className=\"ilearn-padding-top ilearn-padding-both-sides\">\r\n                        {this.renderFeedbackFormQuestions(feedbackQuestionBeans)}\r\n                    </div>\r\n            }\r\n            <br/><br/>\r\n            </>\r\n        );    \r\n    }\r\n\r\n    renderReadFromStaffFeedbackForm() {\r\n        let enquiryId = localStorage.getItem('enquiryId'); \r\n        let feedbackFormId = this.state.feedbackFormBean.id;       \r\n        const feedbackFormURL = Config.siteUrl+\"popup/studentportal/studentPortal.do?reqCode=viewStudentFeedbackFormInMobile&enquiryId=\"+enquiryId+\"&feedBackFormId=\"+feedbackFormId;\r\n\t\treturn (\r\n            <>\r\n                <Iframe url={feedbackFormURL} />\r\n            </>\r\n        );    \r\n    }\r\n    \r\n    renderFeedbackFormQuestions(feedbackQuestionBeans) {\r\n        return  (\r\n            <>             \r\n                {\r\n                    feedbackQuestionBeans.map((question, index) => {\r\n                        return (\r\n                            <>\r\n                                {this._renderFeedbackQuestion(question, index)}\r\n                            </>\r\n                        );\r\n                    })\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    _renderFeedbackQuestion(question, index) {\r\n        const feedbackMode = this.state?.feedbackFormBean?.mode;\r\n        if(question.questionTypeId===1 || question.questionTypeId===2 || \r\n            question.questionTypeId===3 || question.questionTypeId===5 || \r\n            question.questionTypeId===6 || question.questionTypeId===8 || \r\n            question.questionTypeId===9 || question.questionTypeId===10) {\r\n            return  (\r\n                <>\r\n                    <div key={index} className=\"ilearn-padding-top\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body feedback-question-card\">\r\n                                {feedbackMode==='view'? this.renderReadOnlyFeedbackQuestion(question) : \r\n                                    this.renderFeedbackQuestion(question)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    renderFeedbackQuestion(question) {\r\n        const feedbackMode = this.state?.feedbackFormBean?.mode;\r\n        if(question.questionTypeId===1) {//Text\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            onChange={e => question.feedbackResponse=e.target.value || ''} >\r\n                        </input>\r\n                    </div>\r\n                    {\r\n                        question.errorMessage && question.errorMessage.length>0 && \r\n                        <span className=\"error-msg\">{question.errorMessage}</span>\r\n                    }\r\n                    \r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===2) {//Text Area\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <textarea className=\"form-control\" id={'fb_question_'+question.id} rows=\"3\" \r\n                            onChange={e => question.feedbackResponse=e.target.value || ''} > \r\n                            {question.feedbackResponse}                           \r\n                        </textarea>\r\n                    </div>\r\n                    {\r\n                        question.errorMessage && question.errorMessage.length>0 && \r\n                        <span className=\"error-msg\">{question.errorMessage}</span>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===3) { //3=Select Dropdown ; \r\n            return (\r\n                <>\r\n                <div className=\"form-group feedback-form-group\">\r\n                    <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                    <select className=\"form-control\" id={'fb_question_'+question.id} \r\n                        placeholder=\"--Select--\" \r\n                        onChange={e => this.handleSingleChoices(e, question)} >\r\n                        { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                              <option key={'option_'+i} value={option.id} \r\n                                selected={option.selected===true}>{option.name}</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                {\r\n                    question.errorMessage && question.errorMessage.length>0 && \r\n                    <span className=\"error-msg\">{question.errorMessage}</span>\r\n                }\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===5) { //5=Radio Button\r\n            return (\r\n                <>\r\n                <div className=\"form-group feedback-form-group\">\r\n                    <label for={'fb_question_'+question.id}>{question.name}</label>                    \r\n                    { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                            <div class=\"form-check feedback-question\">\r\n                                <input class=\"form-check-input\" type=\"radio\" name={'q_radio_'+question.id} \r\n                                    id={'q_radio_option_'+option.id} value={option.id} \r\n                                    onChange={e => this.handleSingleChoices(e, question)} />\r\n                                <label class=\"form-check-label\" for={'q_radio_option_'+option.id}>\r\n                                    {option.name}\r\n                                </label>\r\n                            </div>\r\n                    )}\r\n                </div>\r\n                {\r\n                    question.errorMessage && question.errorMessage.length>0 && \r\n                    <span className=\"error-msg\">{question.errorMessage}</span>\r\n                }\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===6) { //Multiple Choice\r\n            return (\r\n                <>\r\n                <div className=\"form-group feedback-form-group\">\r\n                    <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                    { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                        <div class=\"form-check feedback-question\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" value={option.id} \r\n                            id={'fb_question_choice'+option.id} \r\n                            onChange={e => this.handleMultipleChoices(e, question)} />\r\n                            <label class=\"form-check-label\" for={'fb_question_choice'+option.id}>\r\n                               { option.name}\r\n                            </label>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {\r\n                    question.errorMessage && question.errorMessage.length>0 && \r\n                    <span className=\"error-msg\">{question.errorMessage}</span>\r\n                }\r\n                </>\r\n            );\r\n        }\r\n        if(question.questionTypeId===8) {//Date\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            onChange={e => question.feedbackResponse=e.target.value || ''} >\r\n                        </input>\r\n                    </div>\r\n                    {\r\n                        question.errorMessage && question.errorMessage.length>0 && \r\n                        <span className=\"error-msg\">{question.errorMessage}</span>\r\n                    }\r\n                    \r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===9) {//Email\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"email\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            onChange={e => question.feedbackResponse=e.target.value || ''} >\r\n                        </input>\r\n                    </div>\r\n                    {\r\n                        question.errorMessage && question.errorMessage.length>0 && \r\n                        <span className=\"error-msg\">{question.errorMessage}</span>\r\n                    }\r\n                    \r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===10) {//Mobile Number\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            onChange={e => question.feedbackResponse=e.target.value || ''} >\r\n                        </input>\r\n                    </div>\r\n                    {\r\n                        question.errorMessage && question.errorMessage.length>0 && \r\n                        <span className=\"error-msg\">{question.errorMessage}</span>\r\n                    }\r\n                    \r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderReadOnlyFeedbackQuestion(question) {\r\n        if(question.questionTypeId===1) {//Text\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            value={question.feedbackResponse} \r\n                            disabled>\r\n                        </input>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===2) {//Text Area\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <textarea className=\"form-control\" id={'fb_question_'+question.id} rows=\"3\" \r\n                            disabled> \r\n                            {question.feedbackResponse}                           \r\n                        </textarea>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===3) { //3=Select Dropdown ; \r\n            return (\r\n                <>\r\n                <div className=\"form-group feedback-form-group\">\r\n                    <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                    <select className=\"form-control\" id={'fb_question_'+question.id} \r\n                        placeholder=\"--Select--\" \r\n                        onChange={e => question.feedbackResponse=e.target.value || ''} \r\n                        disabled>\r\n                        { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                              <option key={'option_'+i} value={option.id} \r\n                                selected={option.selected===true}>{option.name}</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===5) { //5=Radio Button\r\n            let employeeId = this.props.match.params.instructorId || 0;\r\n            let instructorName = this.props.location.state.instructorName;\r\n            if(employeeId>0) {\r\n                return (\r\n                    <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>                    \r\n                        { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                                <>\r\n                                {option.selected && \r\n                                    <>\r\n                                    <div className=\"alert-heading\"><b>{option.name}</b>                        \r\n                                        <span className=\"rating pull-right\" >{question.rating}</span>\r\n                                    </div>\r\n                                    </>\r\n                                }\r\n                                </>                                \r\n                        )}\r\n                    </div>\r\n                    </>\r\n                );    \r\n            }\r\n            else {\r\n                return (\r\n                    <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>                    \r\n                        { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                                <div class=\"form-check feedback-question\">\r\n                                    <input class=\"form-check-input\" type=\"radio\" name={'q_radio_'+question.id} \r\n                                        id={'q_radio_option_'+option.id} value={option.id} \r\n                                        checked={option.selected===true} \r\n                                        disabled/>\r\n                                    <label class=\"form-check-label\" for={'q_radio_option_'+option.id}>\r\n                                        {option.name}\r\n                                    </label>\r\n                                </div>\r\n                        )}\r\n                    </div>\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n        else if(question.questionTypeId===6) { //Multiple Choice\r\n            return (\r\n                <>\r\n                <div className=\"form-group feedback-form-group\">\r\n                    <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                    { question.feedbackFormQuestionChoiceBeans.map((option, i) =>\r\n                        <div class=\"form-check feedback-question\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" value={option.id} \r\n                            id={'fb_question_choice'+option.id} \r\n                            checked={option.selected===true} \r\n                            disabled/>\r\n                            <label class=\"form-check-label\" for={'fb_question_choice'+option.id}>\r\n                               { option.name}\r\n                            </label>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                </>\r\n            );\r\n        }\r\n        if(question.questionTypeId===8) {//Date\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            value={question.feedbackResponse} \r\n                            disabled>\r\n                        </input>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===9) {//Email\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"email\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            value={question.feedbackResponse} \r\n                            disabled>\r\n                        </input>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if(question.questionTypeId===10) {//Mobile Number\r\n            return (\r\n                <>\r\n                    <div className=\"form-group feedback-form-group\">\r\n                        <label for={'fb_question_'+question.id}>{question.name}</label>\r\n                        <input type=\"text\" className=\"form-control\" id={'fb_question_'+question.id} \r\n                            value={question.feedbackResponse} \r\n                            disabled>\r\n                        </input>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    renderFooter() {\r\n        //console.log(\"FeedbackForm -> renderFooter()... \");\r\n        const feedbackQuestionBeans = this.state?.feedbackFormBean?.feedbackQuestionBeans;\r\n        const feedbackMode = this.state?.feedbackFormBean?.mode;\r\n        return ( \r\n            <>\r\n            {\r\n            feedbackQuestionBeans && feedbackMode!=='view' && \r\n            <div className=\"ilearn-footer\">                    \r\n                <Row>\r\n                    <Col className=\"ilearn-footer-col ilearn-blue-btn\" onClick={() => this.submit()}>\r\n                        <button className=\"btn ilearn-blue-btn ilearn-footer-btn btn-block text-uppercase\" > \r\n                            <b className=\"color-white\">Submit</b>&nbsp;\r\n                            <FontAwesomeIcon icon={ faPaperPlane }  size = 'lg' color='#fff'/> &nbsp;\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n    \r\n    renderLoader() {\r\n        //console.log(\"FeedbackForm -> renderLoader()... \");\r\n        const _loadingText = 'Please wait...';\r\n        return (\r\n            <ILoader\r\n                loadingText={_loadingText}\r\n                isShow={this.state.showLoading}\r\n                >\r\n            </ILoader>\r\n        )\r\n    }\r\n\r\n    toggleLoading = () => {\r\n        //console.log(\"FeedbackForm -> toggleLoading()... \");\r\n        this.setState(state => ({ showLoading: !state.showLoading }));\r\n    };\r\n\r\n    handleSingleChoices = (event, question) => {\r\n        //console.log(\"handleSingleChoices....\");\r\n        question.feedbackFormQuestionChoiceBeans.forEach(choice => {\r\n            choice.selected = false;\r\n            if (choice.id === parseInt(event.target.value)) {\r\n                choice.selected = true; //event.target.checked;\r\n                question.feedbackResponse = choice.id;\r\n            }\r\n        })\r\n    }\r\n\r\n    handleMultipleChoices = (event, question) => {\r\n        //console.log(\"handleMultipleChoices....\");\r\n        let selectedChoices = [];\r\n        question.feedbackFormQuestionChoiceBeans.forEach(choice => {\r\n            if (choice.id === parseInt(event.target.value)) {\r\n                    choice.selected =  event.target.checked;\r\n            }\r\n        })\r\n        question.feedbackFormQuestionChoiceBeans.forEach(choice => {\r\n            if (choice.selected === true) {\r\n                selectedChoices.push(choice.id);\r\n            }\r\n        })\r\n        question.feedbackResponse=selectedChoices.join();\r\n    }\r\n\r\n    submit = () => {\r\n        //console.log(\"FeedbackForm -> submit()... \");\r\n        //console.log(JSON.stringify(this.state.feedbackFormBean));\r\n        let user = JSON.parse(localStorage['user']);\r\n        let feedbackFormBean = this.state.feedbackFormBean;\r\n        let employeeId = this.props.match.params.instructorId || 0;\r\n        let courseId = this.props.match.params.courseId || 0;\r\n        feedbackFormBean.employeeId = employeeId;\r\n        feedbackFormBean.courseId = courseId;\r\n        feedbackFormBean.applicableToUserId = this.props.location.state.userId || 0;\r\n        feedbackFormBean.respondentToUserId = this.props.location.state.userId ? user?.userId : 0;\r\n       \r\n        this.setState({ showLoading: true }, () => {\r\n            ApiService.saveFeedbackForm(feedbackFormBean, 0)\r\n            .then((res) => {\r\n                //console.log(\"FeedbackForm -> submit(); res : \"+JSON.stringify(res.data));\r\n                let respData = res.data;\r\n                if(respData.status==0) {\r\n                    let questions = [];        \r\n                    for(let question of feedbackFormBean.feedbackQuestionBeans) {\r\n                        question.errorMessage=null;\r\n                        for(let i=0; i<respData.data.length; i++) {\r\n                            if(parseInt(respData.data[i].id) === question.id) {\r\n                                question.errorMessage=respData.data[i].message;\r\n                                break;\r\n                            }\r\n                        }\r\n                        questions.push(question);\r\n                    }\r\n                    feedbackFormBean.feedbackQuestionBeans=questions;\r\n                    this.setState({\r\n                        showLoading: false,\r\n                        feedbackFormBean : feedbackFormBean\r\n                    });\r\n                    this.showErrorAlert(respData.message);\r\n                }\r\n                else {  //SuccessCB      \r\n                    //this.showMessage(\"Confirmation Message\", respData.message);\r\n                    this.setState({\r\n                        showLoading: false\r\n                    });\r\n                    this.showSuccessAlert(respData.message);                                        \r\n                }\r\n            });              \r\n        });\r\n    }\r\n\r\n    showSuccessAlert(message) {\r\n        swal({\r\n            text: message,\r\n            icon: \"success\",\r\n            button: \"Ok\",\r\n            allowOutsideClick: false,\r\n            closeOnClickOutside: false,\r\n            closeOnEsc: false\r\n        }).then(exit => {\r\n            this.props.history.goBack();\r\n        });\r\n    }\r\n\r\n    showErrorAlert(message) {\r\n        swal({\r\n            text: message,\r\n            icon: \"warning\",\r\n            button: \"Ok\",\r\n            allowOutsideClick: false,\r\n            closeOnClickOutside: false,\r\n            closeOnEsc: false\r\n        }).then(exit => {\r\n            //console.log(\"Error!\");\r\n        });\r\n    }\r\n\r\n}\r\n\r\n  \r\nexport {FeedbackForm};\r\n\r\n/*\r\n    References:\r\n    Card -> https://getbootstrap.com/docs/4.0/components/card/\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}